{"searchDocs":[{"title":"beamUtil","type":0,"sectionRef":"#","url":"/libraries/api/beamUtil","content":"","keywords":"","version":null},{"title":"Functions​","type":1,"pageTitle":"beamUtil","url":"/libraries/api/beamUtil#functions","content":" ","version":null,"tagName":"h2"},{"title":"attachBeam​","type":1,"pageTitle":"beamUtil","url":"/libraries/api/beamUtil#attachBeam","content":"&lt;/&gt; beamUtil.attachBeam( beam: Beam , a0: Attachment , part: BasePart , beamParent: Instance ) → () Attaches the given beam. ","version":null,"tagName":"h3"},{"title":"basePartUtil","type":0,"sectionRef":"#","url":"/libraries/api/basePartUtil","content":"","keywords":"","version":null},{"title":"Functions​","type":1,"pageTitle":"basePartUtil","url":"/libraries/api/basePartUtil#functions","content":" ","version":null,"tagName":"h2"},{"title":"corners​","type":1,"pageTitle":"basePartUtil","url":"/libraries/api/basePartUtil#corners","content":"&lt;/&gt; basePartUtil.corners(basePart: BasePart ) → { top: {Vector3 }, bottom: {Vector3 } } Returns a read-only dictionary of all corners of basePart, top and bottom.  ","version":null,"tagName":"h3"},{"title":"floorMaterial​","type":1,"pageTitle":"basePartUtil","url":"/libraries/api/basePartUtil#floorMaterial","content":"&lt;/&gt; basePartUtil.floorMaterial( basePart: BasePart , raycastParams: RaycastParams?, depth: number? ) → Enum.Material Returns the material the basePart is lying on. If basePart is underwater, then Enum.Material.Water will be returned, elseif basePart is in air, then Enum.Material.Air will be returned. The 2nd argument can be passed as a RaycastParams object, which will be used in determining the material of basePart through ray casting. The 3rd argument can be passed as a number (depth) which will increase the length of the ray by depth studs (on the Y-axis). This is only useful when you want to add in more leeway in determining the material of basePart reliably, since sometimes the basePart may be very slightly over the top of some ground due to its geometry so in those cases, the ray may not register properly. If this argument isn't specified, then it will default to 0.01.  ","version":null,"tagName":"h3"},{"title":"basePartSizeUtil","type":0,"sectionRef":"#","url":"/libraries/api/basePartSizeUtil","content":"","keywords":"","version":null},{"title":"Functions​","type":1,"pageTitle":"basePartSizeUtil","url":"/libraries/api/basePartSizeUtil#functions","content":" ","version":null,"tagName":"h2"},{"title":"resizeOnXAxis​","type":1,"pageTitle":"basePartSizeUtil","url":"/libraries/api/basePartSizeUtil#resizeOnXAxis","content":"&lt;/&gt; basePartSizeUtil.resizeOnXAxis( basePart: BasePart , newSizeX: number, tweenInfo: TweenInfo? ) → Promise? Resizes the given basePart's Size's X to newSizeX. If tweenInfo is specified, then a promise is returned which is resolved once the operation is successful.  ","version":null,"tagName":"h3"},{"title":"resizeOnYAxis​","type":1,"pageTitle":"basePartSizeUtil","url":"/libraries/api/basePartSizeUtil#resizeOnYAxis","content":"&lt;/&gt; basePartSizeUtil.resizeOnYAxis( basePart: BasePart , newSizeY: number, tweenInfo: TweenInfo? ) → Promise? Resizes the given basePart's Size's Y to newSizeY. If tweenInfo is specified, then a promise is returned which is resolved once the operation is successful.  ","version":null,"tagName":"h3"},{"title":"resizeOnZAxis​","type":1,"pageTitle":"basePartSizeUtil","url":"/libraries/api/basePartSizeUtil#resizeOnZAxis","content":"&lt;/&gt; basePartSizeUtil.resizeOnZAxis( basePart: BasePart , newSizeZ: number, tweenInfo: TweenInfo? ) → Promise? Resizes the given basePart's Size's Z to newSizeZ. If tweenInfo is specified, then a promise is returned which is resolved once the operation is successful. ","version":null,"tagName":"h3"},{"title":"clientMouseUtil","type":0,"sectionRef":"#","url":"/libraries/api/clientMouseUtil","content":"","keywords":"","version":null},{"title":"Functions​","type":1,"pageTitle":"clientMouseUtil","url":"/libraries/api/clientMouseUtil#functions","content":" ","version":null,"tagName":"h2"},{"title":"registerMouseHoverStart​","type":1,"pageTitle":"clientMouseUtil","url":"/libraries/api/clientMouseUtil#registerMouseHoverStart","content":"&lt;/&gt; clientMouseUtil.registerMouseHoverStart( callback: ( instance: Instance , mousePosition: Vector2 ) → (), minActivationDistance: number?, maxActivationDistance: number? ) → Connection Registers the given callback which is called whenever the player hovers over a 3D instance.  ","version":null,"tagName":"h3"},{"title":"registerMouseHoverEnd​","type":1,"pageTitle":"clientMouseUtil","url":"/libraries/api/clientMouseUtil#registerMouseHoverEnd","content":"&lt;/&gt; clientMouseUtil.registerMouseHoverEnd(callback: ( instance: Instance , mousePosition: Vector2 ) → ()) → Connection Registers the given callback which is called whenever the player no hovers over a 3D instance. ","version":null,"tagName":"h3"},{"title":"clientMovementInputUtil","type":0,"sectionRef":"#","url":"/libraries/api/clientMovementInputUtil","content":"","keywords":"","version":null},{"title":"Functions​","type":1,"pageTitle":"clientMovementInputUtil","url":"/libraries/api/clientMovementInputUtil#functions","content":" ","version":null,"tagName":"h2"},{"title":"thumbstickMoveVector​","type":1,"pageTitle":"clientMovementInputUtil","url":"/libraries/api/clientMovementInputUtil#thumbstickMoveVector","content":"&lt;/&gt; clientMovementInputUtil.thumbstickMoveVector() → Vector3  Returns the thumbstick move vector.  ","version":null,"tagName":"h3"},{"title":"enableControls​","type":1,"pageTitle":"clientMovementInputUtil","url":"/libraries/api/clientMovementInputUtil#enableControls","content":"&lt;/&gt; clientMovementInputUtil.enableControls() → () Enables player controls.  ","version":null,"tagName":"h3"},{"title":"disableControls​","type":1,"pageTitle":"clientMovementInputUtil","url":"/libraries/api/clientMovementInputUtil#disableControls","content":"&lt;/&gt; clientMovementInputUtil.disableControls() → () Disables player controls. ","version":null,"tagName":"h3"},{"title":"badgeServiceUtil","type":0,"sectionRef":"#","url":"/libraries/api/badgeServiceUtil","content":"","keywords":"","version":null},{"title":"Types​","type":1,"pageTitle":"badgeServiceUtil","url":"/libraries/api/badgeServiceUtil#types","content":" ","version":null,"tagName":"h2"},{"title":"DEFAULT_BADGE_INFO​","type":1,"pageTitle":"badgeServiceUtil","url":"/libraries/api/badgeServiceUtil#DEFAULT_BADGE_INFO","content":"Constant &lt;/&gt; interface DEFAULT_BADGE_INFO { Name: &quot;&quot; Description: &quot;&quot; IconImageId: &quot;&quot; IsEnabled: false }  Not Accessible Constant, not accesible within badgeServiceUtil. ","version":null,"tagName":"h3"},{"title":"Functions​","type":1,"pageTitle":"badgeServiceUtil","url":"/libraries/api/badgeServiceUtil#functions","content":" ","version":null,"tagName":"h2"},{"title":"badgeInfoPromise​","type":1,"pageTitle":"badgeServiceUtil","url":"/libraries/api/badgeServiceUtil#badgeInfoPromise","content":"&lt;/&gt; badgeServiceUtil.badgeInfoPromise(badgeId: number) → Promise&lt;BadgeInfo&gt; ","version":null,"tagName":"h3"},{"title":"Types","type":1,"pageTitle":"badgeServiceUtil","url":"/libraries/api/badgeServiceUtil##","content":"","version":null,"tagName":"h3"},{"title":"​","type":1,"pageTitle":"badgeServiceUtil","url":"/libraries/api/badgeServiceUtil#BadgeInfo","content":"interface BadgeInfo { Name: string Description: string IconImageId: string IsEnabled: boolean }  Returns a promise which is resolved wih the badge info of the given badge id. This is just a wrapper over BadgeService:GetBadgeInfoAsync. If the promise rejects, it will reject with a shallow copy of DEFAULT_BADGE_INFO (for badgeInfo) and an error message. badgeServiceUtil.badgeInfoPromise(badgeId):andThen(function(badgeInfo) end):catch(function(defaultBadgeInfo, errorMessage) end)   ","version":null,"tagName":"h3"},{"title":"checkPlayerBadgesPromise​","type":1,"pageTitle":"badgeServiceUtil","url":"/libraries/api/badgeServiceUtil#checkPlayerBadgesPromise","content":"&lt;/&gt; badgeServiceUtil.checkPlayerBadgesPromise( playerUserId: number, badgeIds: {number} ) → Promise&lt;{number}&gt; Returns a promise which is resolved wih an array of badge ids the given player owns. This is just a wrapper over BadgeService:GetBadgeInfoAsync. If the promise rejects, it will reject with an empty table (for playerOwnedBadgeIds) and an error message. badgeServiceUtil.checkPlayerBadgesPromise(playerUserId, badgeIds):andThen(function(playerOwnedBadgeIds) end):catch(function(playerOwnedBadgeIds, errorMessage) -- `playerOwnedBadgeIds` will be an empty array end)   ","version":null,"tagName":"h3"},{"title":"playerHasBadgePromise​","type":1,"pageTitle":"badgeServiceUtil","url":"/libraries/api/badgeServiceUtil#playerHasBadgePromise","content":"&lt;/&gt; badgeServiceUtil.playerHasBadgePromise( playerUserId: number, badgeId: number ) → Promise&lt;boolean&gt; Returns a promise which is resolved wih a boolean indicating whether or not the given player has the specified badge or not. This is just a wrapper over BadgeService:UserHasBadgeAsync. If the promise rejects, it will reject with false (for playerHasBadge) and an error message. badgeServiceUtil.playerHasBadgePromise(playerUserId, badgeId):andThen(function(playerHasBadge) end):catch(function(playerHasBadge, errorMessage) -- `playerHasBadge` will always be `false` here end)   ","version":null,"tagName":"h3"},{"title":"awardBadgeToPlayerPromise​","type":1,"pageTitle":"badgeServiceUtil","url":"/libraries/api/badgeServiceUtil#awardBadgeToPlayerPromise","content":"&lt;/&gt; badgeServiceUtil.awardBadgeToPlayerPromise( playerUserId: number, badgeId: number ) → Promise&lt;boolean&gt; Returns a promise which is resolved once the given player has being successfully awarded with the given badge. This is just a wrapper over BadgeService:AwardBadge. badgeServiceUtil.awardBadgeToPlayerPromise(playerUserId, badgeId):andThen(function(playerWasAwardedBadge) end):catch(function(playerWasAwardedBadge, errorMessage) -- `playerWasAwardedBadge` will always be `false` here end) If the promise rejects, it will reject with false (for playerWasAwardedBadge) and an error message. ","version":null,"tagName":"h3"},{"title":"colorSequenceUtil","type":0,"sectionRef":"#","url":"/libraries/api/colorSequenceUtil","content":"","keywords":"","version":null},{"title":"Functions​","type":1,"pageTitle":"colorSequenceUtil","url":"/libraries/api/colorSequenceUtil#functions","content":" ","version":null,"tagName":"h2"},{"title":"colorFromKeyPointsPercentage​","type":1,"pageTitle":"colorSequenceUtil","url":"/libraries/api/colorSequenceUtil#colorFromKeyPointsPercentage","content":"&lt;/&gt; colorSequenceUtil.colorFromKeyPointsPercentage( percentage: number, colorSequenceKeyPoints: {ColorSequenceKeypoint } ) → () Returns a color based on where the percentage lies in the specified color sequence key points. (Credits; ToldFable) ","version":null,"tagName":"h3"},{"title":"ClientRemoteSignal","type":0,"sectionRef":"#","url":"/libraries/api/ClientRemoteSignal","content":"","keywords":"","version":null},{"title":"Types​","type":1,"pageTitle":"ClientRemoteSignal","url":"/libraries/api/ClientRemoteSignal#types","content":" ","version":null,"tagName":"h2"},{"title":"ClientRemoteSignal​","type":1,"pageTitle":"ClientRemoteSignal","url":"/libraries/api/ClientRemoteSignal#ClientRemoteSignal","content":"&lt;/&gt; type ClientRemoteSignal = ClientRemoteSignal  ","version":null,"tagName":"h3"},{"title":"Functions​","type":1,"pageTitle":"ClientRemoteSignal","url":"/libraries/api/ClientRemoteSignal#functions","content":" ","version":null,"tagName":"h2"},{"title":"is​","type":1,"pageTitle":"ClientRemoteSignal","url":"/libraries/api/ClientRemoteSignal#is","content":"&lt;/&gt; ClientRemoteSignal.is(self: any) → boolean Returns a boolean indicating if self is a client remote signal or not.  ","version":null,"tagName":"h3"},{"title":"connect​","type":1,"pageTitle":"ClientRemoteSignal","url":"/libraries/api/ClientRemoteSignal#connect","content":"ClientRemoteSignal instance &lt;/&gt; ClientRemoteSignal:connect(callback: (...any) → ()) → RBXScriptConnection  Connects callback to the client remote signal so that it is called whenever the remote signal dispatches some data to the client. Additionally, callback will be passed all the arguments sent by the server.  ","version":null,"tagName":"h3"},{"title":"once​","type":1,"pageTitle":"ClientRemoteSignal","url":"/libraries/api/ClientRemoteSignal#once","content":"ClientRemoteSignal instance &lt;/&gt; ClientRemoteSignal:once(callback: (...any) → ()) → RBXScriptConnection  Works almost exactly the same as ClientRemoteSignal:connect, except the connection returned is disconnected immediately upon callback being called.  ","version":null,"tagName":"h3"},{"title":"fireServer​","type":1,"pageTitle":"ClientRemoteSignal","url":"/libraries/api/ClientRemoteSignal#fireServer","content":"ClientRemoteSignal instance &lt;/&gt; ClientRemoteSignal:fireServer(...: any) → () Fires ... arguments to the remote signal.  ","version":null,"tagName":"h3"},{"title":"wait​","type":1,"pageTitle":"ClientRemoteSignal","url":"/libraries/api/ClientRemoteSignal#wait","content":"ClientRemoteSignal instance yields &lt;/&gt; ClientRemoteSignal:wait() → ...any Yields the current thread until the remote signal dispatches some data to the client. The yielded thread is resumed once the server fires some data to the client, with the arguments sent by the server. -- Server remoteSignal:fireAllClients(&quot;Hi&quot;) -- Client print(clientRemoteSignal:wait()) --&gt; &quot;Hi&quot;   ","version":null,"tagName":"h3"},{"title":"destroy​","type":1,"pageTitle":"ClientRemoteSignal","url":"/libraries/api/ClientRemoteSignal#destroy","content":"ClientRemoteSignal instance &lt;/&gt; ClientRemoteSignal:destroy() → () Destroys the client remote signal and renders it unusable. ","version":null,"tagName":"h3"},{"title":"Connection","type":0,"sectionRef":"#","url":"/libraries/api/Connection","content":"","keywords":"","version":null},{"title":"Properties​","type":1,"pageTitle":"Connection","url":"/libraries/api/Connection#properties","content":" ","version":null,"tagName":"h2"},{"title":"Connected​","type":1,"pageTitle":"Connection","url":"/libraries/api/Connection#Connected","content":"Connection Instance &lt;/&gt; Connection.Connected: boolean  ","version":null,"tagName":"h3"},{"title":"Functions​","type":1,"pageTitle":"Connection","url":"/libraries/api/Connection#functions","content":" ","version":null,"tagName":"h2"},{"title":"new​","type":1,"pageTitle":"Connection","url":"/libraries/api/Connection#new","content":"&lt;/&gt; Connection.new(cleanupCallback: () → ()) → Connection ","version":null,"tagName":"h3"},{"title":"Types","type":1,"pageTitle":"Connection","url":"/libraries/api/Connection##","content":"","version":null,"tagName":"h3"},{"title":"​","type":1,"pageTitle":"Connection","url":"/libraries/api/Connection#Connection","content":"type Connection = Connection  Creates and returns a new connection object.  ","version":null,"tagName":"h3"},{"title":"Disconnect​","type":1,"pageTitle":"Connection","url":"/libraries/api/Connection#Disconnect","content":"&lt;/&gt; Connection:Disconnect() → () Disconnects the connection and renders it unusuable. ","version":null,"tagName":"h3"},{"title":"colorUtil","type":0,"sectionRef":"#","url":"/libraries/api/colorUtil","content":"","keywords":"","version":null},{"title":"Functions​","type":1,"pageTitle":"colorUtil","url":"/libraries/api/colorUtil#functions","content":" ","version":null,"tagName":"h2"},{"title":"darkenColor​","type":1,"pageTitle":"colorUtil","url":"/libraries/api/colorUtil#darkenColor","content":"&lt;/&gt; colorUtil.darkenColor( color: Color3 , delta: number ) → Color3  Returns a darker version of the given color. delta is the amount by which the given color should be darkened.  ","version":null,"tagName":"h3"},{"title":"clampColor​","type":1,"pageTitle":"colorUtil","url":"/libraries/api/colorUtil#clampColor","content":"&lt;/&gt; colorUtil.clampColor( colorOrColorSequence: Color3 | ColorSequence , clampComponents: { minH: number, maxH: number, minS: number, maxS: number, minV: number, maxV: number, } ) → Color3 | ColorSequence  Returns a clamped version of the given colorOrColorSequence. ","version":null,"tagName":"h3"},{"title":"ClientRemoteProperty","type":0,"sectionRef":"#","url":"/libraries/api/ClientRemoteProperty","content":"","keywords":"","version":null},{"title":"Types​","type":1,"pageTitle":"ClientRemoteProperty","url":"/libraries/api/ClientRemoteProperty#types","content":" ","version":null,"tagName":"h2"},{"title":"ClientRemoteProperty​","type":1,"pageTitle":"ClientRemoteProperty","url":"/libraries/api/ClientRemoteProperty#ClientRemoteProperty","content":"&lt;/&gt; type ClientRemoteProperty = ClientRemoteProperty  ","version":null,"tagName":"h3"},{"title":"Properties​","type":1,"pageTitle":"ClientRemoteProperty","url":"/libraries/api/ClientRemoteProperty#properties","content":" ","version":null,"tagName":"h2"},{"title":"onUpdate​","type":1,"pageTitle":"ClientRemoteProperty","url":"/libraries/api/ClientRemoteProperty#onUpdate","content":"Read only Signal ClientRemoteProperty instance &lt;/&gt; ClientRemoteProperty.onUpdate: Signal&lt;newValue: any,oldValue: any&gt; A signal which is fired, whenever the value of the remote property (or the value of the client stored in the remote property) is updated. Incase the client has a specific value set for them in the remote property, then this signal will only fire if that value has been updated. ","version":null,"tagName":"h3"},{"title":"Functions​","type":1,"pageTitle":"ClientRemoteProperty","url":"/libraries/api/ClientRemoteProperty#functions","content":" ","version":null,"tagName":"h2"},{"title":"is​","type":1,"pageTitle":"ClientRemoteProperty","url":"/libraries/api/ClientRemoteProperty#is","content":"&lt;/&gt; ClientRemoteProperty.is(self: any) → boolean Returns a boolean indicating if self is a client remote property or not.  ","version":null,"tagName":"h3"},{"title":"get​","type":1,"pageTitle":"ClientRemoteProperty","url":"/libraries/api/ClientRemoteProperty#get","content":"ClientRemoteProperty instance &lt;/&gt; ClientRemoteProperty:get() → T Returns the value of the client stored in the remote property. If there is no value stored specifically for the client, then the remote property's current value will be returned instead.  ","version":null,"tagName":"h3"},{"title":"observe​","type":1,"pageTitle":"ClientRemoteProperty","url":"/libraries/api/ClientRemoteProperty#observe","content":"ClientRemoteProperty instance &lt;/&gt; ClientRemoteProperty:observe(callback: ( newValue: T, oldValue: T? ) → ()) → () Observes the value of the client remote property. clientRemoteProperty:observe(function(newValue, oldValue) end)   ","version":null,"tagName":"h3"},{"title":"valuePromise​","type":1,"pageTitle":"ClientRemoteProperty","url":"/libraries/api/ClientRemoteProperty#valuePromise","content":"ClientRemoteProperty instance &lt;/&gt; ClientRemoteProperty:valuePromise(valuePredicate: (( newValue: T, oldValue: T? ) → boolean)?) → () Returns a promise which is resolved with a non-nil value of the client remote property, given that valuePredicate is not passed as an argument. clientRemoteProperty:valuePromise():andThen(function(value) print(value) end) valuePredicate can ALSO be passed, which allows you to filter out values. If it returns exactly true, only then will the promise resolve with the new value. clientRemoteProperty:valuePromise(function(newValue, oldValue) print(newValue, oldValue) return oldValue == 1 end):andThen(function(value) print(value) end) clientRemoteProperty:set(1) clientRemoteProperty:set(2) -- Output: -- 1, nil -- 2, 1 -- 2   ","version":null,"tagName":"h3"},{"title":"set​","type":1,"pageTitle":"ClientRemoteProperty","url":"/libraries/api/ClientRemoteProperty#set","content":"ClientRemoteProperty instance Deprecated &lt;/&gt; ClientRemoteProperty:set(value: T) → () Invokes the remote property, to set the value for the client to value. Possible rate limit It is possible that the client may be rate limited by the server (see RemoteProperty:setRateLimitForClientSettingValue), and thus requests to the server to set the value for the client can possibly be ignored by the server. -- Server remoteProperty:setRateLimitForClientSettingValue(client, 30) -- 30 seconds -- Client clientRemoteProperty.onUpdate:Connect(function(newValue) print(newValue) end) -- Spam the setting of value for the client, so we ought for the value of the -- client stored in the remote property (finally) to be `100`, but instead -- it will be `1`, as subsequent calls after the first one will be ignored -- due to the rate limit imposed. for index = 1, 100 do clientRemoteProperty:set(index) end --&gt; 1 Possible Value Set Request Rejection From Server The server can decline the client's request of setting the value for the client in the remote property. This behavior will be seen by default, if the remote property has no clientSet middleware - see DefaultRemotePropertyMiddleware and RemotePropertyMiddleware for more info.  ","version":null,"tagName":"h3"},{"title":"setPromise​","type":1,"pageTitle":"ClientRemoteProperty","url":"/libraries/api/ClientRemoteProperty#setPromise","content":"ClientRemoteProperty instance Deprecated &lt;/&gt; ClientRemoteProperty:setPromise(value: T) → Promise&lt;T&gt; Works the same as ClientRemoteProperty:set, but returns a promise which is resolved when the server has set the value for the client to value, or else rejects with a nil value. Additionally, the returned promise resolves with the value that was set. If this method is called againand the returned promise had not yet finished, then the old promise returned will be cancelled. Precaution This method performs a shallow check (self:get() == value) before informing the server to actually set the value. This is an attempt to avoid sending unnecessary requests to the server. For e.g: local thisValue = {1,2,3} clientRemoteProperty:setPromise(thisValue):expect() -- Assuming this is successful.... warn(clientRemoteProperty:setPromise(thisValue):expect()) -- Does not inform the server, immediately returns a resolved promise! Possible Promise rejection This promise can also be rejected with a nil value if the server declines the client's request of setting the value for the client in the remote property. This behavior will be seen by default, if the remote property has no clientSet middleware - see DefaultRemotePropertyMiddleware and RemotePropertyMiddleware for more info. -- Client clientRemoteProperty:setPromise(10):andThen(function(newValue) -- Success! print(newValue) --&gt; 10 end):catch(function() -- Server rejected the request end)   ","version":null,"tagName":"h3"},{"title":"destroy​","type":1,"pageTitle":"ClientRemoteProperty","url":"/libraries/api/ClientRemoteProperty#destroy","content":"ClientRemoteProperty instance &lt;/&gt; ClientRemoteProperty:destroy() → () Destroys the client remote property and renders it unusable. ","version":null,"tagName":"h3"},{"title":"coreGuiUtil","type":0,"sectionRef":"#","url":"/libraries/api/coreGuiUtil","content":"","keywords":"","version":null},{"title":"Functions​","type":1,"pageTitle":"coreGuiUtil","url":"/libraries/api/coreGuiUtil#functions","content":" ","version":null,"tagName":"h2"},{"title":"setCorePromise​","type":1,"pageTitle":"coreGuiUtil","url":"/libraries/api/coreGuiUtil#setCorePromise","content":"&lt;/&gt; coreGuiUtil.setCorePromise( coreGuiName: string, ...: any ) → Promise&lt;&gt; Returns a promise which is resolved once StarterGui:SetCore has successfully executed. coreGuiUtil.setCorePromise(&quot;AvatarContextMenuTheme&quot;, { BackgroundImage = &quot;&quot;, BackgroundTransparency = 0.5, BackgroundColor = Color3.fromRGB(111, 145, 242), NameTagColor = Color3.fromRGB(0, 0, 200), NameUnderlineColor = Color3.fromRGB(213, 233, 255), ButtonFrameColor = Color3.fromRGB(15, 24, 65), ButtonFrameTransparency = 0.2, ButtonUnderlineColor = Color3.fromRGB(213, 233, 255), Font = Enum.Font.SciFi }):andThen(function() print(&quot;Successfully set core AvatarContextMenuTheme&quot;) end)  ","version":null,"tagName":"h3"},{"title":"contextActionServiceUtil","type":0,"sectionRef":"#","url":"/libraries/api/contextActionServiceUtil","content":"","keywords":"","version":null},{"title":"Functions​","type":1,"pageTitle":"contextActionServiceUtil","url":"/libraries/api/contextActionServiceUtil#functions","content":" ","version":null,"tagName":"h2"},{"title":"bindActionNoInputSink​","type":1,"pageTitle":"contextActionServiceUtil","url":"/libraries/api/contextActionServiceUtil#bindActionNoInputSink","content":"&lt;/&gt; contextActionServiceUtil.bindActionNoInputSink( actionName: string, actionCallback: ( actionName: string, inputState: Enum.UserInputState, inputObject: InputObject ) → (), createTouchButton: boolean, ...: Enum.UserInputType | Enum.KeyCode ) → () Works almost exactly the same as ContextActionService:BindAction, except that a custom handler is passed as the 2nd argument, which then calls actionCallbackbut returns Enum.ContextActionResult.Pass so the handler never sinks any inputs. You can think of the custom handler like this: function(...) actionCallback(...) return Enum.ContextActionResult.Pass end contextActionServiceUtil.bindActionNoInputSink( &quot;Input&quot;, function(_, inputState: Enum.UserInputState, inputObject: InputObject) print(&quot;User pressed Enum.Keycode.A&quot;) end, false, Enum.Keycode.A )  ","version":null,"tagName":"h3"},{"title":"ContentProviderQueue","type":0,"sectionRef":"#","url":"/libraries/api/ContentProviderQueue","content":"","keywords":"","version":null},{"title":"Types​","type":1,"pageTitle":"ContentProviderQueue","url":"/libraries/api/ContentProviderQueue#types","content":" ","version":null,"tagName":"h2"},{"title":"ContentProviderQueue​","type":1,"pageTitle":"ContentProviderQueue","url":"/libraries/api/ContentProviderQueue#ContentProviderQueue","content":"&lt;/&gt; type ContentProviderQueue = ContentProviderQueue  ","version":null,"tagName":"h3"},{"title":"Properties​","type":1,"pageTitle":"ContentProviderQueue","url":"/libraries/api/ContentProviderQueue#properties","content":" ","version":null,"tagName":"h2"},{"title":"onInstancePreloaded​","type":1,"pageTitle":"ContentProviderQueue","url":"/libraries/api/ContentProviderQueue#onInstancePreloaded","content":"Read only Signal ContentProviderQueue Instance &lt;/&gt; ContentProviderQueue.onInstancePreloaded: Signal&lt;instance: Instance, contentProviderId: string,deltaTime: number,status: Enum.AssetFetchStatus&gt; A signal which is fired whenever an instance in the content provider queue has been preloaded. deltaTime is the amount of time the instance took to be preloaded.  ","version":null,"tagName":"h3"},{"title":"onInstancePreloading​","type":1,"pageTitle":"ContentProviderQueue","url":"/libraries/api/ContentProviderQueue#onInstancePreloading","content":"Read only Signal ContentProviderQueue Instance &lt;/&gt; ContentProviderQueue.onInstancePreloading: Signal&lt;instance: Instance &gt; A signal which is fired whenever an instance in the content provider queue is being preloaded.  ","version":null,"tagName":"h3"},{"title":"onInstanceAdded​","type":1,"pageTitle":"ContentProviderQueue","url":"/libraries/api/ContentProviderQueue#onInstanceAdded","content":"Read only Signal ContentProviderQueue Instance &lt;/&gt; ContentProviderQueue.onInstanceAdded: Signal&lt;instance: Instance &gt; A signal which is fired whenever an instance is added to the content provider queue.  ","version":null,"tagName":"h3"},{"title":"onInstanceRemoved​","type":1,"pageTitle":"ContentProviderQueue","url":"/libraries/api/ContentProviderQueue#onInstanceRemoved","content":"Read only Signal ContentProviderQueue Instance &lt;/&gt; ContentProviderQueue.onInstanceRemoved: Signal&lt;instance: Instance &gt; A signal which is fired whenever an instance is removed from the content provider queue. ","version":null,"tagName":"h3"},{"title":"Functions​","type":1,"pageTitle":"ContentProviderQueue","url":"/libraries/api/ContentProviderQueue#functions","content":" ","version":null,"tagName":"h2"},{"title":"new​","type":1,"pageTitle":"ContentProviderQueue","url":"/libraries/api/ContentProviderQueue#new","content":"&lt;/&gt; ContentProviderQueue.new(initialUpdateInterval: number?) → ContentProviderQueue Creates a new content preloader queue. An initialUpdateInterval argument can be passed as the initial update interval of the queue.  ","version":null,"tagName":"h3"},{"title":"is​","type":1,"pageTitle":"ContentProviderQueue","url":"/libraries/api/ContentProviderQueue#is","content":"&lt;/&gt; ContentProviderQueue.is(self: any) → boolean Returns a boolean indicating whether or not self is a ContentProviderQueue object or not.  ","version":null,"tagName":"h3"},{"title":"setUpdateInterval​","type":1,"pageTitle":"ContentProviderQueue","url":"/libraries/api/ContentProviderQueue#setUpdateInterval","content":"&lt;/&gt; ContentProviderQueue:setUpdateInterval(updateInterval: number) → () Sets the update interval of the queue, i.e the interval at which the queue will preload each asset.  ","version":null,"tagName":"h3"},{"title":"add​","type":1,"pageTitle":"ContentProviderQueue","url":"/libraries/api/ContentProviderQueue#add","content":"&lt;/&gt; ContentProviderQueue:add(instance: Instance ) → () Adds the given instance to the content provider queue. If the given instance already exists, then the instance will not be readded again.  ","version":null,"tagName":"h3"},{"title":"addInstances​","type":1,"pageTitle":"ContentProviderQueue","url":"/libraries/api/ContentProviderQueue#addInstances","content":"&lt;/&gt; ContentProviderQueue:addInstances(instances: {Instance }) → () Adds all instances in instances to the content provider queue, via ContentProviderQueue:add.  ","version":null,"tagName":"h3"},{"title":"remove​","type":1,"pageTitle":"ContentProviderQueue","url":"/libraries/api/ContentProviderQueue#remove","content":"&lt;/&gt; ContentProviderQueue:remove(instance: Instance ) → () Removes the instance from the given queue, if the instance was being preloaded, then it will be disregarded by the content provider queue. local contentProviderQueue = ... contentProviderQueue:add(sound1) print(#contentProviderQueue:pendingInstances()) --&gt; 1 contentProviderQueue:remove(sound1) print(pendingInstancescontentProviderQueue:pendingInstances()) --&gt; 0   ","version":null,"tagName":"h3"},{"title":"progress​","type":1,"pageTitle":"ContentProviderQueue","url":"/libraries/api/ContentProviderQueue#progress","content":"&lt;/&gt; ContentProviderQueue:progress() → number Returns a number from 0 to 1 indicating the progress of the content provider queue (i.e ratio of how many instances have been preloaded versus how many instances are yet to be preloaded).  ","version":null,"tagName":"h3"},{"title":"fullyProgressed​","type":1,"pageTitle":"ContentProviderQueue","url":"/libraries/api/ContentProviderQueue#fullyProgressed","content":"&lt;/&gt; ContentProviderQueue:fullyProgressed() → Promise&lt;&gt; Returns a promise which is resolved once the content provider queue has fully progressed, i.e there are no more instances to preload.  ","version":null,"tagName":"h3"},{"title":"paused​","type":1,"pageTitle":"ContentProviderQueue","url":"/libraries/api/ContentProviderQueue#paused","content":"&lt;/&gt; ContentProviderQueue:paused() → boolean Returns a boolean indicating if the content provider queue is paused or not.  ","version":null,"tagName":"h3"},{"title":"resume​","type":1,"pageTitle":"ContentProviderQueue","url":"/libraries/api/ContentProviderQueue#resume","content":"&lt;/&gt; ContentProviderQueue:resume() → () Resumes the content provider queue.  ","version":null,"tagName":"h3"},{"title":"pause​","type":1,"pageTitle":"ContentProviderQueue","url":"/libraries/api/ContentProviderQueue#pause","content":"&lt;/&gt; ContentProviderQueue:pause() → () Pauses the content provider queue. If any more instances are to be preloaded, they won't be until the content provider object is resumed back.  ","version":null,"tagName":"h3"},{"title":"removeAll​","type":1,"pageTitle":"ContentProviderQueue","url":"/libraries/api/ContentProviderQueue#removeAll","content":"&lt;/&gt; ContentProviderQueue:removeAll() → () Clears all instances to be preloaded from the content provider queue, via ContentProviderQueue:remove.  ","version":null,"tagName":"h3"},{"title":"pendingInstances​","type":1,"pageTitle":"ContentProviderQueue","url":"/libraries/api/ContentProviderQueue#pendingInstances","content":"&lt;/&gt; ContentProviderQueue:pendingInstances() → {Instance } Returns a read only array of all instances, yet to be preloaded in the content provider queue.  ","version":null,"tagName":"h3"},{"title":"destroy​","type":1,"pageTitle":"ContentProviderQueue","url":"/libraries/api/ContentProviderQueue#destroy","content":"&lt;/&gt; ContentProviderQueue:destroy() → () Destroys the content provider queue, empties it through ContentProviderQueue:empty and renders it unusable. ","version":null,"tagName":"h3"},{"title":"dateUtil","type":0,"sectionRef":"#","url":"/libraries/api/dateUtil","content":"","keywords":"","version":null},{"title":"Functions​","type":1,"pageTitle":"dateUtil","url":"/libraries/api/dateUtil#functions","content":" ","version":null,"tagName":"h2"},{"title":"yearIsLeapYear​","type":1,"pageTitle":"dateUtil","url":"/libraries/api/dateUtil#yearIsLeapYear","content":"&lt;/&gt; dateUtil.yearIsLeapYear(year: number) → boolean Returns a boolean indicating whether or not the given year is a leap year. print(dateUtil.yearIsLeapYear(2024)) --&gt; true   ","version":null,"tagName":"h3"},{"title":"stringifiedMonth​","type":1,"pageTitle":"dateUtil","url":"/libraries/api/dateUtil#stringifiedMonth","content":"&lt;/&gt; dateUtil.stringifiedMonth(month: number) → string Returns a stringified month. print(dateUtil.stringifiedMonth(3)) --&gt; &quot;March&quot;   ","version":null,"tagName":"h3"},{"title":"daysInMonth​","type":1,"pageTitle":"dateUtil","url":"/libraries/api/dateUtil#daysInMonth","content":"&lt;/&gt; dateUtil.daysInMonth( year: number, month: number ) → number Returns the number of days in the given month. print(dateUtil.daysInMonth(2023, 6)) --&gt; 30  ","version":null,"tagName":"h3"},{"title":"evLightning","type":0,"sectionRef":"#","url":"/libraries/api/evLightning","content":"evLightning Evaera's evLighning module ported to wally.","keywords":"","version":null},{"title":"CustomAnimator","type":0,"sectionRef":"#","url":"/libraries/api/CustomAnimator","content":"","keywords":"","version":null},{"title":"Types​","type":1,"pageTitle":"CustomAnimator","url":"/libraries/api/CustomAnimator#types","content":" ","version":null,"tagName":"h2"},{"title":"CustomAnimator​","type":1,"pageTitle":"CustomAnimator","url":"/libraries/api/CustomAnimator#CustomAnimator","content":"&lt;/&gt; type CustomAnimator = CustomAnimator  ","version":null,"tagName":"h3"},{"title":"Properties​","type":1,"pageTitle":"CustomAnimator","url":"/libraries/api/CustomAnimator#properties","content":" ","version":null,"tagName":"h2"},{"title":"onAnimationLoaded​","type":1,"pageTitle":"CustomAnimator","url":"/libraries/api/CustomAnimator#onAnimationLoaded","content":"CustomAnimator Instance &lt;/&gt; CustomAnimator.onAnimationLoaded: Signal&lt;animation: Animation, animationTrack: AnimationTrack &gt; A signal which is fired whenever a new animation is loaded through CustomAnimator:loadAnimation. ","version":null,"tagName":"h3"},{"title":"Functions​","type":1,"pageTitle":"CustomAnimator","url":"/libraries/api/CustomAnimator#functions","content":" ","version":null,"tagName":"h2"},{"title":"new​","type":1,"pageTitle":"CustomAnimator","url":"/libraries/api/CustomAnimator#new","content":"&lt;/&gt; CustomAnimator.new(animator: Animator | AnimationController ) → CustomAnimator Creates and returns a new custom animator object.  ","version":null,"tagName":"h3"},{"title":"animationTrack​","type":1,"pageTitle":"CustomAnimator","url":"/libraries/api/CustomAnimator#animationTrack","content":"CustomAnimator instance &lt;/&gt; CustomAnimator:animationTrack(animation: Animation ) → AnimationTrack?  Returns the given loaded animation track from the animation, if found.  ","version":null,"tagName":"h3"},{"title":"onAnimationLoadPromise​","type":1,"pageTitle":"CustomAnimator","url":"/libraries/api/CustomAnimator#onAnimationLoadPromise","content":"CustomAnimator instance &lt;/&gt; CustomAnimator:onAnimationLoadPromise(animation: Animation ) → Promise&lt;AnimationTrack &gt; Returns a promise which is resolved once the given animation is loaded via CustomAnimator:loadAnimation. Automatic promise cancellation The returned promise will be cancelled if the animator object or the animation controller object this custom animator is connected to, is destroyed.  ","version":null,"tagName":"h3"},{"title":"loadAnimation​","type":1,"pageTitle":"CustomAnimator","url":"/libraries/api/CustomAnimator#loadAnimation","content":"CustomAnimator instance &lt;/&gt; CustomAnimator:loadAnimation(animation: Animation ) → AnimationTrack  Loads in the given animation.  ","version":null,"tagName":"h3"},{"title":"tryPlayAnimation​","type":1,"pageTitle":"CustomAnimator","url":"/libraries/api/CustomAnimator#tryPlayAnimation","content":"CustomAnimator instance &lt;/&gt; CustomAnimator:tryPlayAnimation( animation: Animation , priority: Enum.AnimationPriority?, fadeTime: number?, weight: number?, speed: number? ) → AnimationTrack?  Tries to play the given animation, if it has been loaded into the custom animator via CustomAnimator:loadAnimation. This method will return the animation track of the loaded animation upon successfully playing it, else it'll return nil. TIP You can also setup attributes for fadeTime, weight, and speed in animation, which will be used incase the arguments for them aren't specified. Attribute Argument &quot;AnimationPlayFadeTime&quot; fadeTime &quot;AnimationPlayWeight&quot; weight &quot;AnimationPlaySpeed&quot; speed   ","version":null,"tagName":"h3"},{"title":"scheduleAnimationToPlayOnLoadPromise​","type":1,"pageTitle":"CustomAnimator","url":"/libraries/api/CustomAnimator#scheduleAnimationToPlayOnLoadPromise","content":"CustomAnimator instance &lt;/&gt; CustomAnimator:scheduleAnimationToPlayOnLoadPromise( animation: Animation , priority: Enum.AnimationPriority?, fadeTime: number?, weight: number?, speed: number? ) → Promise&lt;&gt; Plays the given animation as soon as it is loaded into the custom animator. Returns a promise which is resolved once the given animation has finished playing. Additionally, you can cancel the returned promise which in turn will also stop the animation from playing any further. Automatic promise cancellation If this method is called again for the same animation while the previous promise has not yet finished, then the previous promise will be cancelled. The returned promise will be cancelled if the animator object or the animation controller object this custom animator is connected to, is destroyed.   ","version":null,"tagName":"h3"},{"title":"tryStopAnimation​","type":1,"pageTitle":"CustomAnimator","url":"/libraries/api/CustomAnimator#tryStopAnimation","content":"CustomAnimator instance &lt;/&gt; CustomAnimator:tryStopAnimation( animation: Animation , fadeTime: number? ) → () Tries to stop the given animation, if it is loaded. Also cancels the promise returned by CustomAnimator:scheduleAnimationPlayOnLoadPromise for the given animation, if found.  ","version":null,"tagName":"h3"},{"title":"stopAll​","type":1,"pageTitle":"CustomAnimator","url":"/libraries/api/CustomAnimator#stopAll","content":"CustomAnimator instance &lt;/&gt; CustomAnimator:stopAll(fadeTime: number?) → () Stops all loaded animations by calling CustomAnimator:tryStopAnimation on each one of them.  ","version":null,"tagName":"h3"},{"title":"all​","type":1,"pageTitle":"CustomAnimator","url":"/libraries/api/CustomAnimator#all","content":"CustomAnimator instance &lt;/&gt; CustomAnimator:all() → {[Animation ]: AnimationTrack } Returns a read only copy dictionary of all animations loaded into the animator object.  ","version":null,"tagName":"h3"},{"title":"cleanupAnimation​","type":1,"pageTitle":"CustomAnimator","url":"/libraries/api/CustomAnimator#cleanupAnimation","content":"CustomAnimator instance &lt;/&gt; CustomAnimator:cleanupAnimation(animation: Animation ) → () Destroys the animation track of the given animation if loaded, and removes it from the custom animator.  ","version":null,"tagName":"h3"},{"title":"animator​","type":1,"pageTitle":"CustomAnimator","url":"/libraries/api/CustomAnimator#animator","content":"CustomAnimator instance &lt;/&gt; CustomAnimator:animator() → Animator  Returns the animator associated to the animator object.  ","version":null,"tagName":"h3"},{"title":"destroy​","type":1,"pageTitle":"CustomAnimator","url":"/libraries/api/CustomAnimator#destroy","content":"CustomAnimator instance &lt;/&gt; CustomAnimator:destroy() → () Destroys the custom animator object and renders it unusuable. Additionally, CustomAnimator:cleanupAnimationTrack is called on all loaded animation tracks too. ","version":null,"tagName":"h3"},{"title":"debugLoggerUtil","type":0,"sectionRef":"#","url":"/libraries/api/debugLoggerUtil","content":"","keywords":"","version":null},{"title":"Functions​","type":1,"pageTitle":"debugLoggerUtil","url":"/libraries/api/debugLoggerUtil#functions","content":" ","version":null,"tagName":"h2"},{"title":"toggleLoggingEnabledGlobal​","type":1,"pageTitle":"debugLoggerUtil","url":"/libraries/api/debugLoggerUtil#toggleLoggingEnabledGlobal","content":"&lt;/&gt; debugLoggerUtil.toggleLoggingEnabledGlobal(toggle: boolean) → () Toggles if logging is enabled or not globally. debugLoggerUtil.toggleLoggingEnabledGlobal(false) debugLoggerUtil.log(warn, &quot;test&quot;) -- Doesn't do anything   ","version":null,"tagName":"h3"},{"title":"toggleLoggingEnabled​","type":1,"pageTitle":"debugLoggerUtil","url":"/libraries/api/debugLoggerUtil#toggleLoggingEnabled","content":"&lt;/&gt; debugLoggerUtil.toggleLoggingEnabled(toggle: boolean) → () Toggles if logging is enabled or not for the script. debugLoggerUtil.toggleLoggingEnabled(false) debugLoggerUtil.log(warn, &quot;test&quot;) -- Doesn't do anything -- In another script.. debugLoggerUtil.log(warn, &quot;123&quot;) -- Works   ","version":null,"tagName":"h3"},{"title":"log​","type":1,"pageTitle":"debugLoggerUtil","url":"/libraries/api/debugLoggerUtil#log","content":"&lt;/&gt; debugLoggerUtil.log( logFunction: (...any) → (), ...: any ) → () Calls logFunction passing in ... to it -- if logging is not enabled, nothing happens. NOTE If logging is toggled off for the script (in which this method is called in) or logging is toggled off globally, then this method will not anything. ","version":null,"tagName":"h3"},{"title":"Component","type":0,"sectionRef":"#","url":"/libraries/api/Component","content":"","keywords":"","version":null},{"title":"Types​","type":1,"pageTitle":"Component","url":"/libraries/api/Component#types","content":" ","version":null,"tagName":"h2"},{"title":"ExtensionFn​","type":1,"pageTitle":"Component","url":"/libraries/api/Component#ExtensionFn","content":"&lt;/&gt; type ExtensionFn = (component) → ()   ","version":null,"tagName":"h3"},{"title":"ExtensionShouldFn​","type":1,"pageTitle":"Component","url":"/libraries/api/Component#ExtensionShouldFn","content":"&lt;/&gt; type ExtensionShouldFn = (component) → boolean   ","version":null,"tagName":"h3"},{"title":"Extension​","type":1,"pageTitle":"Component","url":"/libraries/api/Component#Extension","content":"&lt;/&gt; interface Extension { shouldExtend: ExtensionShouldFn? shouldConstruct: ExtensionShouldFn? constructing: ExtensionFn? constructed: ExtensionFn? starting: ExtensionFn? started: ExtensionFn? stopping: ExtensionFn? stopped: ExtensionFn? } An extension allows the ability to extend the behavior of components. This is useful for adding injection systems or extending the behavior of components by wrapping around component lifecycle methods. The shouldConstruct function can be used to indicate if the component should actually be created. This must return true or false. A component with multiple shouldConstruct extension functions must have them all return true in order for the component to be constructed. The shouldConstruct function runs before all other extension functions and component lifecycle methods. The shouldExtend function can be used to indicate if the extension itself should be used. This can be used in order to toggle an extension on/off depending on whatever logic is appropriate. If no shouldExtend function is provided, the extension will always be used if provided as an extension to the component. As an example, an extension could be created to simply log when the various lifecycle stages run on the component: local Logger = {} function Logger.constructing(component, componentClass) print(&quot;constructing&quot;, component) end function Logger.constructed(component, componentClass) print(&quot;constructed&quot;, component) end function Logger.starting(component, componentClass) print(&quot;starting&quot;, component) end function Logger.started(component, componentClass) print(&quot;started&quot;, component) end function Logger.stopping(component, componentClass) print(&quot;stopping&quot;, component) end function Logger.stopped(component, componentClass) print(&quot;stopped&quot;, component) end local MyComponent = Component.new({tag = &quot;MyComponent&quot;, extensions = {Logger}}) Sometimes it is useful for an extension to control whether or not a component should be constructed. For instance, if a component on the client should only be instantiated for the local player, an extension might look like this, assuming the instance has an attribute linking it to the player's UserId: local player = game:GetService(&quot;Players&quot;).LocalPlayer local OnlyLocalPlayer = {} function OnlyLocalPlayer.shouldConstruct(component) local ownerId = component.instance:GetAttribute(&quot;OwnerId&quot;) return ownerId == player.UserId end local MyComponent = Component.new({tag = &quot;MyComponent&quot;, extensions = {OnlyLocalPlayer}}) It can also be useful for an extension itself to turn on/off depending on various contexts. For example, let's take the Logger from the first example, and only use that extension if the bound instance has a Log attribute set to true: function Logger.shouldExtend(component) return component.instance:GetAttribute(&quot;Log&quot;) == true end   ","version":null,"tagName":"h3"},{"title":"ComponentConfig​","type":1,"pageTitle":"Component","url":"/libraries/api/Component#ComponentConfig","content":"&lt;/&gt; interface ComponentConfig { tag: string-- CollectionService tag to use ancestors: {Instance }?-- Optional array of ancestors in which components will be started extensions: {Extension}?-- Optional array of extension objects } Component configuration passed to Component.new. If no ancestors option is included, it defaults to {workspace, game.Players}. If no extensions option is included, it defaults to a blank table {}. ","version":null,"tagName":"h3"},{"title":"Properties​","type":1,"pageTitle":"Component","url":"/libraries/api/Component#properties","content":" ","version":null,"tagName":"h2"},{"title":"started​","type":1,"pageTitle":"Component","url":"/libraries/api/Component#started","content":"Event Component Class &lt;/&gt; Component.started: Signal Fired when a new instance of a component is started. local MyComponent = Component.new({tag = &quot;MyComponent&quot;}) MyComponent.started:Connect(function(component) end)   ","version":null,"tagName":"h3"},{"title":"stopped​","type":1,"pageTitle":"Component","url":"/libraries/api/Component#stopped","content":"Event Component Class &lt;/&gt; Component.stopped: Signal Fired when an instance of a component is stopped. local MyComponent = Component.new({tag = &quot;MyComponent&quot;}) MyComponent.stopped:Connect(function(component) end)   ","version":null,"tagName":"h3"},{"title":"instance​","type":1,"pageTitle":"Component","url":"/libraries/api/Component#instance","content":"Component Instance &lt;/&gt; Component.instance: Instance  A reference back to the Roblox instance from within a component instance. When a component instance is created, it is bound to a specific Roblox instance, which will always be present through the Instance property. MyComponent.started:Connect(function(component) local robloxInstance: Instance = component.instance print(&quot;Component is bound to &quot; .. robloxInstance:GetFullName()) end)  ","version":null,"tagName":"h3"},{"title":"Functions​","type":1,"pageTitle":"Component","url":"/libraries/api/Component#functions","content":" ","version":null,"tagName":"h2"},{"title":"new​","type":1,"pageTitle":"Component","url":"/libraries/api/Component#new","content":"Component &lt;/&gt; Component.new(config: ComponentConfig) → ComponentClass Create a new custom Component class. local MyComponent = Component.new({tag = &quot;MyComponent&quot;}) A full example might look like this: local MyComponent = Component.new({ tag = &quot;MyComponent&quot;, ancestors = {workspace}, extensions = {Logger}, -- See Logger example within the example for the Extension type }) local AnotherComponent = require(somewhere.AnotherComponent) -- Optional if UpdateRenderStepped should use BindToRenderStep: MyComponent.renderPriority = Enum.renderPriority.Camera.Value function MyComponent:construct() self.MyData = &quot;Hello&quot; end function MyComponent:start() local another = self:component(AnotherComponent) another:DoSomething() end function MyComponent:stop() self.MyData = &quot;Goodbye&quot; end function MyComponent:heartbeatUpdate(dt) end function MyComponent:steppedUpdate(time, dt) end function MyComponent:renderSteppedUpdate(dt) end   ","version":null,"tagName":"h3"},{"title":"fromTag​","type":1,"pageTitle":"Component","url":"/libraries/api/Component#fromTag","content":"Component &lt;/&gt; Component.fromTag(tag: string) → ComponentClass? Returns the component class bound to the given tag, if found.  ","version":null,"tagName":"h3"},{"title":"fromTagPromise​","type":1,"pageTitle":"Component","url":"/libraries/api/Component#fromTagPromise","content":"Component &lt;/&gt; Component.fromTagPromise(tag: string) → Promise Promisified version of Component.fromTag.  ","version":null,"tagName":"h3"},{"title":"heartbeatUpdate​","type":1,"pageTitle":"Component","url":"/libraries/api/Component#heartbeatUpdate","content":"Component Class &lt;/&gt; Component.heartbeatUpdate(dt: number) → () If this method is present on a component, then it will be automatically connected to RunService.Heartbeat. TIP Component will only ever hook up 1 heartbeat connection for every single component instance. As of writing, in sleitnick's variant, a heartbeat connection is hooked up for each component instance, which is not scalable for large scale operations. Method This is a method, not a function. This is a limitation of the documentation tool which should be fixed soon. local MyComponent = Component.new({tag = &quot;MyComponent&quot;}) function MyComponent:heartbeatUpdate(dt) end   ","version":null,"tagName":"h3"},{"title":"steppedUpdate​","type":1,"pageTitle":"Component","url":"/libraries/api/Component#steppedUpdate","content":"Component Class &lt;/&gt; Component.steppedUpdate( time: number, dt: number ) → () If this method is present on a component, then it will be automatically connected to RunService.Stepped. TIP Component will only ever hook up 1 stepped connection for every single component instance. As of writing, in sleitnick's variant, a stepped connection is hooked up for each component instance, which is not scalable for large scale operations. Method This is a method, not a function. This is a limitation of the documentation tool which should be fixed soon. local MyComponent = Component.new({tag = &quot;MyComponent&quot;}) function MyComponent:steppedUpdate(time, dt) end   ","version":null,"tagName":"h3"},{"title":"renderSteppedUpdate​","type":1,"pageTitle":"Component","url":"/libraries/api/Component#renderSteppedUpdate","content":"This item only works when running on the client. Client Component Class &lt;/&gt; Component.renderSteppedUpdate(dt: number) → () If this method is present on a component, then it will be automatically connected to RunService.RenderStepped. If the [Component].renderPriority field is found, then the component will instead use RunService:BindToRenderStep() to bind the function. TIP Component will only ever hook up 1 render stepped connection for every single component instance. As of writing, in sleitnick's variant, a render stepped connection is hooked up for each component instance , which is not scalable for large scale operations. However, if renderPriority is specified, then a new render stepped connection will be hooked up for the component instance. Method This is a method, not a function. This is a limitation of the documentation tool which should be fixed soon. -- Example that uses `RunService.RenderStepped` automatically: local MyComponent = Component.new({tag = &quot;MyComponent&quot;}) function MyComponent:renderSteppedUpdate(dt) end -- Example that uses `RunService:BindToRenderStep` automatically: local MyComponent = Component.new({tag = &quot;MyComponent&quot;}) -- Defining a renderPriority will force the component to use BindToRenderStep instead MyComponent.renderPriority = Enum.renderPriority.Camera.Value function MyComponent:renderSteppedUpdate(dt) end   ","version":null,"tagName":"h3"},{"title":"all​","type":1,"pageTitle":"Component","url":"/libraries/api/Component#all","content":"Component Class &lt;/&gt; Component:all() → {Component} Gets a copy table array of all existing component objects. For example, if there was a component class linked to the &quot;MyComponent&quot; tag, and three Roblox instances in your game had that same tag, then calling all would return the three component instances. local MyComponent = Component.new({tag = &quot;MyComponent&quot;}) -- ... local components = MyComponent:all() for _,component in components do component:DoSomethingHere() end   ","version":null,"tagName":"h3"},{"title":"fromInstance​","type":1,"pageTitle":"Component","url":"/libraries/api/Component#fromInstance","content":"Component Class &lt;/&gt; Component:fromInstance(instance: Instance ) → Component? Gets an instance of a component class from the given Roblox instance. Returns nil if not found. local MyComponent = require(somewhere.MyComponent) local myComponentInstance = MyComponent:fromInstance(workspace.SomeInstance)   ","version":null,"tagName":"h3"},{"title":"fromInstancePromise​","type":1,"pageTitle":"Component","url":"/libraries/api/Component#fromInstancePromise","content":"Component Class &lt;/&gt; Component:fromInstancePromise( instance: Instance , timeout: number? ) → Promise&lt;ComponentInstance&gt; Resolves a promise once the component instance is present on a given Roblox instance. An optional timeout can be provided to reject the promi se if it takes more than timeout seconds to resolve. If no timeout is supplied, timeout defaults to 60 seconds. local MyComponent = require(somewhere.MyComponent) MyComponent:fromInstancePromise(workspace.SomeInstance):andThen(function(myComponentInstance) -- Do something with the component class end)   ","version":null,"tagName":"h3"},{"title":"construct​","type":1,"pageTitle":"Component","url":"/libraries/api/Component#construct","content":"Component Class &lt;/&gt; Component:construct() → () construct is called before the component is started, and should be used to construct the component instance. WARNING You should handle any potential data loading (or any code that needs to yield) in theconstruct method, as the component will not be started unless all other components bound to the same instance have been constructed. This addresses Issue 127. A warn will be outputted in the console after about 10 seconds if there are still other pending components not yet fully constructed, while this component is awaiting to be started. You should ensure all your components construct within reasonable amount of time! Cancellation If this method has not yet finished when the component instance is stopped, then it will be forcefully stopped. local MyComponent = Component.new({tag = &quot;MyComponent&quot;}) function MyComponent:construct() self.SomeData = 32 self.OtherStuff = &quot;HelloWorld&quot; end   ","version":null,"tagName":"h3"},{"title":"start​","type":1,"pageTitle":"Component","url":"/libraries/api/Component#start","content":"Component Class &lt;/&gt; Component:start() → () start is called when the component is started, and all other component instances of the instance bound to the component are ready. At this point in time, it is safe to grab other components also bound to the same instance. Cancellation If this method has not yet finished when the component instance is stopped, then it will be forcefully stopped. local MyComponent = Component.new({tag = &quot;MyComponent&quot;}) local AnotherComponent = require(somewhere.AnotherComponent) function MyComponent:start() -- e.g., grab another component: local another = self:component(AnotherComponent) end   ","version":null,"tagName":"h3"},{"title":"stop​","type":1,"pageTitle":"Component","url":"/libraries/api/Component#stop","content":"Component Class &lt;/&gt; Component:stop() → () stop is called when the component is stopped. This occurs either when the bound instance is removed from one of the whitelisted ancestors or when the matching tag is removed from the instance. This also means that the instance might be destroyed, and thus it is not safe to continue using the bound instance (e.g. self.instance) any longer. This should be used to clean up the component. local MyComponent = Component.new({tag = &quot;MyComponent&quot;}) function MyComponent:stop() self.SomeStuff:destroy() end   ","version":null,"tagName":"h3"},{"title":"component​","type":1,"pageTitle":"Component","url":"/libraries/api/Component#component","content":"Component Instance &lt;/&gt; Component:component(componentClass: ComponentClass) → Component? Retrieves another component instance bound to the same Roblox instance. local MyComponent = Component.new({tag = &quot;MyComponent&quot;}) local AnotherComponent = require(somewhere.AnotherComponent) function MyComponent:start() local another = self:component(AnotherComponent) end  ","version":null,"tagName":"h3"},{"title":"infoTypeUtil","type":0,"sectionRef":"#","url":"/libraries/api/infoTypeUtil","content":"","keywords":"","version":null},{"title":"Functions​","type":1,"pageTitle":"infoTypeUtil","url":"/libraries/api/infoTypeUtil#functions","content":" ","version":null,"tagName":"h2"},{"title":"transformedInfoTypeName​","type":1,"pageTitle":"infoTypeUtil","url":"/libraries/api/infoTypeUtil#transformedInfoTypeName","content":"&lt;/&gt; infoTypeUtil.transformedInfoTypeName(infoType: Enum.InfoType) → () Returns the transformed info type name from the given infoType or else infoType.Name. ","version":null,"tagName":"h3"},{"title":"guiObjectFadeUtil","type":0,"sectionRef":"#","url":"/libraries/api/guiObjectFadeUtil","content":"","keywords":"","version":null},{"title":"Functions​","type":1,"pageTitle":"guiObjectFadeUtil","url":"/libraries/api/guiObjectFadeUtil#functions","content":" ","version":null,"tagName":"h2"},{"title":"fadeIn​","type":1,"pageTitle":"guiObjectFadeUtil","url":"/libraries/api/guiObjectFadeUtil#fadeIn","content":"&lt;/&gt; guiObjectFadeUtil.fadeIn( guiObject: GuiObject , fadeTime: number ) → () Fades in the given guiObject.  ","version":null,"tagName":"h3"},{"title":"fadeOut​","type":1,"pageTitle":"guiObjectFadeUtil","url":"/libraries/api/guiObjectFadeUtil#fadeOut","content":"&lt;/&gt; guiObjectFadeUtil.fadeOut( guiObject: GuiObject , fadeTime: number, override: number? ) → () Fades out the given guiObject. ","version":null,"tagName":"h3"},{"title":"Hover","type":0,"sectionRef":"#","url":"/libraries/api/Hover","content":"","keywords":"","version":null},{"title":"Types​","type":1,"pageTitle":"Hover","url":"/libraries/api/Hover#types","content":" ","version":null,"tagName":"h2"},{"title":"Hover​","type":1,"pageTitle":"Hover","url":"/libraries/api/Hover#Hover","content":"&lt;/&gt; type Hover = Hover  ","version":null,"tagName":"h3"},{"title":"Functions​","type":1,"pageTitle":"Hover","url":"/libraries/api/Hover#functions","content":" ","version":null,"tagName":"h2"},{"title":"new​","type":1,"pageTitle":"Hover","url":"/libraries/api/Hover#new","content":"&lt;/&gt; Hover.new( x: number?, y: number?, z: number? ) → Hover Constructs a new hover object, with forces x, y and z which can only be 0 and 1. These forces determine on which axis the hover effect is applied to - e.g if x is 1, then the hover effect will be applied on the X axis and if y is 1, then the hover effect will be applied on the Y axis. NOTE x and z will both default to 0 if not specified but y will default to 1 if not specified - which means by default, the hover effect will always be applied on the Y axis.  ","version":null,"tagName":"h3"},{"title":"pause​","type":1,"pageTitle":"Hover","url":"/libraries/api/Hover#pause","content":"&lt;/&gt; Hover:pause() → () Pauses the hover effect.  ","version":null,"tagName":"h3"},{"title":"resume​","type":1,"pageTitle":"Hover","url":"/libraries/api/Hover#resume","content":"&lt;/&gt; Hover:resume() → () Resumes the hover effect.  ","version":null,"tagName":"h3"},{"title":"update​","type":1,"pageTitle":"Hover","url":"/libraries/api/Hover#update","content":"&lt;/&gt; Hover:update( deltaTime: number, speed: number, hoverAmplitude: number ) → () Updates the hover effect. deltaTime is a measure of how fast the hover effect is updated per frame, along with speed. hoverAmplitude is a measure of how much the hover effect is applied on each axis. NOTE If the hover effect is paused, then this method will not do anything.  ","version":null,"tagName":"h3"},{"title":"setForces​","type":1,"pageTitle":"Hover","url":"/libraries/api/Hover#setForces","content":"&lt;/&gt; Hover:setForces( x: number?, y: number?, z: number? ) → () Sets the forces of the hover object to x, y and z.  ","version":null,"tagName":"h3"},{"title":"vector​","type":1,"pageTitle":"Hover","url":"/libraries/api/Hover#vector","content":"&lt;/&gt; Hover:vector() → Vector3  Returns the vector used in implementing the actual hover effect. NOTE If the hover effect is paused, then this method will return Vector3.zero. local hover = Hover.new(0, 1, 0) local originalPosition = part.Position RunService.Stepped:Connect(function(_, deltaTime) hover:update(deltaTime, 0.5, 1) part.Position = originalPosition + hover:vector() end)   ","version":null,"tagName":"h3"},{"title":"destroy​","type":1,"pageTitle":"Hover","url":"/libraries/api/Hover#destroy","content":"&lt;/&gt; Hover:destroy() → () Destroys the hover object and renders it unusable. ","version":null,"tagName":"h3"},{"title":"InstanceDataHolder","type":0,"sectionRef":"#","url":"/libraries/api/InstanceDataHolder","content":"","keywords":"","version":null},{"title":"Functions​","type":1,"pageTitle":"InstanceDataHolder","url":"/libraries/api/InstanceDataHolder#functions","content":" ","version":null,"tagName":"h2"},{"title":"new​","type":1,"pageTitle":"InstanceDataHolder","url":"/libraries/api/InstanceDataHolder#new","content":"&lt;/&gt; InstanceDataHolder.new() → () Creates and returns a new instance data holder.  ","version":null,"tagName":"h3"},{"title":"is​","type":1,"pageTitle":"InstanceDataHolder","url":"/libraries/api/InstanceDataHolder#is","content":"&lt;/&gt; InstanceDataHolder.is(self: any) → boolean Returns true if the given object is a InstanceDataHolder.  ","version":null,"tagName":"h3"},{"title":"instanceData​","type":1,"pageTitle":"InstanceDataHolder","url":"/libraries/api/InstanceDataHolder#instanceData","content":"&lt;/&gt; InstanceDataHolder:instanceData(instance: Instance ) → {[any]: any} Returns the data of the given instance stored in the instance data holder. If it does not exist, then a new one (an empty table) will be created for it and returned instead. Automatic cleanup When instance is destroyed, the data stored for it will be automatically cleaned up. WARNING instance must not be parented to nil - if so, then this method will throw an error.  ","version":null,"tagName":"h3"},{"title":"cleanupForInstance​","type":1,"pageTitle":"InstanceDataHolder","url":"/libraries/api/InstanceDataHolder#cleanupForInstance","content":"&lt;/&gt; InstanceDataHolder:cleanupForInstance(instance: Instance ) → () Cleans up the given instance's data stored in the instance data holder, if it exists. TIP Usually you don't really have to call this method as stored instance data are automatically cleaned up once the instances are destroyed, but this method exists to give the developer more control.  ","version":null,"tagName":"h3"},{"title":"cleanupForAll​","type":1,"pageTitle":"InstanceDataHolder","url":"/libraries/api/InstanceDataHolder#cleanupForAll","content":"&lt;/&gt; InstanceDataHolder:cleanupForAll() → () Cleans up all instance data stored in the instance data holder.  ","version":null,"tagName":"h3"},{"title":"destroy​","type":1,"pageTitle":"InstanceDataHolder","url":"/libraries/api/InstanceDataHolder#destroy","content":"&lt;/&gt; InstanceDataHolder:destroy() → () Calls InstanceDataHolder:cleanupForAll and destroys the instance data holder, rendering it unusable. ","version":null,"tagName":"h3"},{"title":"instancePropertyUtil","type":0,"sectionRef":"#","url":"/libraries/api/instancePropertyUtil","content":"","keywords":"","version":null},{"title":"Functions​","type":1,"pageTitle":"instancePropertyUtil","url":"/libraries/api/instancePropertyUtil#functions","content":" ","version":null,"tagName":"h2"},{"title":"setInstanceProperties​","type":1,"pageTitle":"instancePropertyUtil","url":"/libraries/api/instancePropertyUtil#setInstanceProperties","content":"&lt;/&gt; instancePropertyUtil.setInstanceProperties( instance: Instance , properties: {[string]: any}, tweenInfo: TweenInfo? ) → Tween?  Sets the properties of instance from the properties table. instancePropertyUtil.setInstanceProperties(workspace.Baseplate, {Transparency = 1}) print(workspace.Baseplate.Transparency) --&gt; 1 local tween = instancePropertyUtil.setInstanceProperties(workspace.Baseplate, {Transparency = 0}, TweenInfo.new(5)) tween.Completed:Wait()   ","version":null,"tagName":"h3"},{"title":"observeProperty​","type":1,"pageTitle":"instancePropertyUtil","url":"/libraries/api/instancePropertyUtil#observeProperty","content":"&lt;/&gt; instancePropertyUtil.observeProperty( instance: Instance , property: string, observer: ( newValue: any, oldValue: any ) → () ) → RBXScriptConnection  Observes the given property of the instance. observer will be called initially, being passed the current value of the property. As the property updates, observer will be called being passed both the new value of the property and the old value. instancePropertyUtil.observeProperty(workspace.Baseplate, &quot;Anchored&quot;, function(newPropertyValue, oldPropertyValue) print(newPropertyValue, oldPropertyValue) end)  ","version":null,"tagName":"h3"},{"title":"instanceTagUtil","type":0,"sectionRef":"#","url":"/libraries/api/instanceTagUtil","content":"","keywords":"","version":null},{"title":"Functions​","type":1,"pageTitle":"instanceTagUtil","url":"/libraries/api/instanceTagUtil#functions","content":" ","version":null,"tagName":"h2"},{"title":"observe​","type":1,"pageTitle":"instanceTagUtil","url":"/libraries/api/instanceTagUtil#observe","content":"&lt;/&gt; instanceTagUtil.observe( tag: string, tagAddedCallback: (instanceWithTheTag: Instance ) → (), tagRemovedCallback: ((instanceThatHadTheTag: Instance ) → ())? ) → Connection Observes the given CollectionService tag. tagAddedCallback will be automatically called on all instances with the given tag, and tagRemovedCallback (if specified) will be automatically called, being passed the instance that no no longer has the given tag. instanceTagUtil.observe(&quot;SomeTag&quot;, function(instanceWithTheTag) end, function(instanceThatHadTheTag) end)   ","version":null,"tagName":"h3"},{"title":"instanceTagPromise​","type":1,"pageTitle":"instanceTagUtil","url":"/libraries/api/instanceTagUtil#instanceTagPromise","content":"&lt;/&gt; instanceTagUtil.instanceTagPromise( instance: Instance , tag: string ) → () Returns a promise which is resolved when the given instance has the given tag. NOTE The returned promise will be cancelled if instance is destroyed. instanceTagUtil.instanceTagPromise(instance, &quot;SomeTag&quot;, function() print(instance.Name, &quot;now has the tag 'SomeTag'&quot;) end)   ","version":null,"tagName":"h3"},{"title":"addTagsToInstance​","type":1,"pageTitle":"instanceTagUtil","url":"/libraries/api/instanceTagUtil#addTagsToInstance","content":"&lt;/&gt; instanceTagUtil.addTagsToInstance( instance: Instance , tags: {string} ) → () Adds all tags in tags to the given instance. instanceTagUtil.addTagsToInstance(workspace.Baseplate, {&quot;Test&quot;}) print(CollectionService:HasTag(workspace.Baseplate, &quot;Test&quot;)) --&gt; true   ","version":null,"tagName":"h3"},{"title":"removeTagsFromInstance​","type":1,"pageTitle":"instanceTagUtil","url":"/libraries/api/instanceTagUtil#removeTagsFromInstance","content":"&lt;/&gt; instanceTagUtil.removeTagsFromInstance( instance: Instance , tags: {string} ) → () Removes all tags in tags from the given instance. instanceTagUtil.addTagsToInstance(workspace.Baseplate, {&quot;Test&quot;}) print(CollectionService:HasTag(workspace.Baseplate, &quot;Test&quot;)) --&gt; true instanceTagUtil.removeTagsFromInstance(workspace.Baseplate, {&quot;Test&quot;}) print(CollectionService:HasTag(workspace.Baseplate, &quot;Test&quot;)) --&gt; false   ","version":null,"tagName":"h3"},{"title":"observeMany​","type":1,"pageTitle":"instanceTagUtil","url":"/libraries/api/instanceTagUtil#observeMany","content":"&lt;/&gt; instanceTagUtil.observeMany( instance: Instance , tagsToObserve: {string}, observer: ( newTags: {string}, oldTags: {string}? ) → () ) → Connection Works similar to instanceTagUtil.observe, but observes an array of tags instead of a single tag. observer will initially be immediately called being passed an array of all the tags (in tagsToObserve) that the given instance has at that time, and then called again everytime a tag (that exists in tagsToObserve) is added or removed from the given instance. oldTags will be initially nil the first time observer is called. However whenever the observer is called again, oldTags will be be an array representing the tags the instance had during the time when observer was previously called. instanceTagUtil.observeMany(workspace.Part, {&quot;Number1&quot;, &quot;Number2&quot;}, function(newTags, oldTags) print(`newTags: {newTags}, oldTags: {oldTags}`) end) workspace.Part:AddTag(&quot;Number1&quot;) workspace.Part:AddTag(&quot;Number2&quot;) -- OUTPUT: --&gt; {}, nil --&gt; {&quot;Number1&quot;, &quot;Number2&quot;}, {}  ","version":null,"tagName":"h3"},{"title":"instanceNetworkOwnerUtil","type":0,"sectionRef":"#","url":"/libraries/api/instanceNetworkOwnerUtil","content":"","keywords":"","version":null},{"title":"Functions​","type":1,"pageTitle":"instanceNetworkOwnerUtil","url":"/libraries/api/instanceNetworkOwnerUtil#functions","content":" ","version":null,"tagName":"h2"},{"title":"safeSetInstanceNetworkOwner​","type":1,"pageTitle":"instanceNetworkOwnerUtil","url":"/libraries/api/instanceNetworkOwnerUtil#safeSetInstanceNetworkOwner","content":"&lt;/&gt; instanceNetworkOwnerUtil.safeSetInstanceNetworkOwner( instance: BasePart , networkOwner: Player? ) → () Sets the network owner of instance to networkOwner safely. Safe to call This method should be preferred over directly setting the network owner of instance via SetNetworkOwner, as it won't error in cases where the network ownership API cannot be used on instance.  ","version":null,"tagName":"h3"},{"title":"safeInstanceNetworkOwner​","type":1,"pageTitle":"instanceNetworkOwnerUtil","url":"/libraries/api/instanceNetworkOwnerUtil#safeInstanceNetworkOwner","content":"&lt;/&gt; instanceNetworkOwnerUtil.safeInstanceNetworkOwner(instance: BasePart ) → Player?  Returns the network owner of instance safely. Safe to call This method should be preferred over directly getting the network owner of instance via GetNetworkOwner, as it will safely return nil (instead of erroring) in cases where the network ownership API cannot be used on instance! ","version":null,"tagName":"h3"},{"title":"instanceTranslationUtil","type":0,"sectionRef":"#","url":"/libraries/api/instanceTranslationUtil","content":"","keywords":"","version":null},{"title":"Functions​","type":1,"pageTitle":"instanceTranslationUtil","url":"/libraries/api/instanceTranslationUtil#functions","content":" ","version":null,"tagName":"h2"},{"title":"tweenInstanceToCFrame​","type":1,"pageTitle":"instanceTranslationUtil","url":"/libraries/api/instanceTranslationUtil#tweenInstanceToCFrame","content":"&lt;/&gt; instanceTranslationUtil.tweenInstanceToCFrame( instance: BasePart | Model , tweenInfo: TweenInfo , result: CFrame ) → Tween  Tweens the CFrame of the given instance to result CFrame, using Instance:PivotTo. instanceTranslationUtil.tweenInstanceToCFrame(someModel, TweenInfo.new(1), {CFrame = CFrame.new(0,100,0)}) https://devforum.roblox.com/t/is-there-any-way-i-can-tween-pivotto/1918057/2 ","version":null,"tagName":"h3"},{"title":"instanceTroveUtil","type":0,"sectionRef":"#","url":"/libraries/api/instanceTroveUtil","content":"","keywords":"","version":null},{"title":"Functions​","type":1,"pageTitle":"instanceTroveUtil","url":"/libraries/api/instanceTroveUtil#functions","content":" ","version":null,"tagName":"h2"},{"title":"instanceTrove​","type":1,"pageTitle":"instanceTroveUtil","url":"/libraries/api/instanceTroveUtil#instanceTrove","content":"&lt;/&gt; instanceTroveUtil.instanceTrove(instance: Instance ) → Trove Returns the given instance's trove. If one does not exist, it'll be created for the given instance. This trove will be automatically cleaned up once instance is destroyed. WARNING This method will throw an error if instance is not present in game. ","version":null,"tagName":"h3"},{"title":"instanceAttributeUtil","type":0,"sectionRef":"#","url":"/libraries/api/instanceAttributeUtil","content":"","keywords":"","version":null},{"title":"Functions​","type":1,"pageTitle":"instanceAttributeUtil","url":"/libraries/api/instanceAttributeUtil#functions","content":" ","version":null,"tagName":"h2"},{"title":"all​","type":1,"pageTitle":"instanceAttributeUtil","url":"/libraries/api/instanceAttributeUtil#all","content":"&lt;/&gt; instanceAttributeUtil.all( instanceTree: Instance , targetAttribute: string ) → {Instance } Returns a read only array of all descendants in instanceTree which have the targetAttribute attribute.  ","version":null,"tagName":"h3"},{"title":"observeMany​","type":1,"pageTitle":"instanceAttributeUtil","url":"/libraries/api/instanceAttributeUtil#observeMany","content":"&lt;/&gt; instanceAttributeUtil.observeMany( instance: Instance , attributesToObserve: {string}, observer: ( newAttributes: {[string]: any}, oldAttributeValue: {[string]: any}? ) → () ) → RBXScriptConnection  Works similar to instanceAttributeUtil.observe, but observes an array of attributes instead of a single attribute. instanceAttributeUtil.observeMany(workspace.Part, {&quot;Number1&quot;, &quot;Number2&quot;}, function(newAttributes, oldAttributes) print(newAttributes.Number1 + newAttributes.Number2) end)   ","version":null,"tagName":"h3"},{"title":"observeDescendantAdding​","type":1,"pageTitle":"instanceAttributeUtil","url":"/libraries/api/instanceAttributeUtil#observeDescendantAdding","content":"&lt;/&gt; instanceAttributeUtil.observeDescendantAdding( instanceTree: Instance , targetAttribute: string, descendantAddedCallback: (descendant: Instance ) → () ) → RBXScriptConnection  Sets up an event connection which listens to any descendant added to instanceTree, if it has the targetAttribute atribute, then targetAttribute will be called. This method will also capture the initial descendants of the given instanceTree as well. instanceAttributeUtil.observeDescendantAdding(workspace, &quot;Test&quot;, function(instance) print(instance) end)   ","version":null,"tagName":"h3"},{"title":"observeDescendantRemoving​","type":1,"pageTitle":"instanceAttributeUtil","url":"/libraries/api/instanceAttributeUtil#observeDescendantRemoving","content":"&lt;/&gt; instanceAttributeUtil.observeDescendantRemoving( instanceTree: Instance , targetAttribute: string, callback: (descendant: Instance ) → () ) → RBXScriptConnection  Sets up an event connection which listens to any descendant removed from instanceTree, if it has the targetAttribute atribute, then callback will be called. Returns a RBXScriptConnection object. instanceAttributeUtil.observeDescendantRemoving(workspace, &quot;Test&quot;, function(instance) print(instance) end)   ","version":null,"tagName":"h3"},{"title":"observe​","type":1,"pageTitle":"instanceAttributeUtil","url":"/libraries/api/instanceAttributeUtil#observe","content":"&lt;/&gt; instanceAttributeUtil.observe( instance: Instance , targetAttribute: string, observer: ( newAttributeValue: any, oldAttributeValue: any ) → () ) → RBXScriptConnection  Observes the value of the attribute targetAttribute in instance. observer will initially be immediately called if targetAttribute exists in instance, being passed the attribute value as the only argument (newAttributeValue), whereas oldAttributeValue will be nil during this time. Additionally from this point onwards, everytime targetAttribute in instance is updated, the observer will be called being passed the new attribute value (as newValue) and the old attribute value during the time when the observer was previously called, as (oldValue). Returns a RBXScriptConnection object. instanceAttributeUtil.observe(workspace, &quot;SomeAttribute&quot;, function(newValue, oldValue) ... end)   ","version":null,"tagName":"h3"},{"title":"instanceAttributePromise​","type":1,"pageTitle":"instanceAttributeUtil","url":"/libraries/api/instanceAttributeUtil#instanceAttributePromise","content":"&lt;/&gt; instanceAttributeUtil.instanceAttributePromise( instance: Instance , attribute: string, predicate: (( newValue: any, oldValue: any ) → boolean)? ) → Promise&lt;value: any&gt; Returns a promise which is resolved when the given instance has the given attribute. instanceAttributeUtil.instanceAttributePromise(instance, &quot;SomeAttribute&quot;):andThen(function(value) print(value) --&gt; 5 end) instance:SetAttribute(&quot;SomeAttribute&quot;, 5) predicate can also be passed, which should return a boolean value. It is passed the new attribute value of the instance, and the old attribute value of the instance. The promise will only resolve when predicate returns true for the new attribute value of the instance. The returned promise will be cancelled if instance is destroyed. instanceAttributeUtil.instanceAttributePromise(instance, &quot;SomeAttribute&quot;, function(newValue, oldValue) return newValue == 2 and oldValue == 1 end):andThen(function(value) print(value) --&gt; 2 end) instance:SetAttribute(&quot;SomeAttribute&quot;, 1) instance:SetAttribute(&quot;SomeAttribute&quot;, 2)   ","version":null,"tagName":"h3"},{"title":"instanceAttributesPromise​","type":1,"pageTitle":"instanceAttributeUtil","url":"/libraries/api/instanceAttributeUtil#instanceAttributesPromise","content":"&lt;/&gt; instanceAttributeUtil.instanceAttributesPromise( instance: Instance , attributes: {string} ) → Promise&lt;&gt; Calls instanceAttributeUtil.instanceAttributePromise for every attribute in attributes. Returns a promise that is resolved once attributes in instance are non-nil. instanceAttributeUtil.instanceAttributesPromise(workspace.Part, {&quot;Effect&quot;, &quot;Target&quot;}):andThen(function() print(workspace.Part:GetAttribute(&quot;Effect&quot;)) --&gt; &quot;Fire&quot; print(workspace.Part:GetAttribute(&quot;Target&quot;)) --&gt; &quot;Player1&quot; end) workspace.Part:SetAttribute(&quot;Effect&quot;, &quot;Fire&quot;) workspace.Part:SetAttribute(&quot;Target&quot;, &quot;Player1&quot;)   ","version":null,"tagName":"h3"},{"title":"setInstanceAttributes​","type":1,"pageTitle":"instanceAttributeUtil","url":"/libraries/api/instanceAttributeUtil#setInstanceAttributes","content":"&lt;/&gt; instanceAttributeUtil.setInstanceAttributes( instance: Instance , attributes: {[string]: any} ) → () Sets the attributes of instance from the attributes table. instanceAttributeUtil.setInstanceAttributes(workspace.Baseplate, {IsMayoSauce = true, Test = 123}) print(workspace.Baseplate:GetAttributes()) --&gt; {IsMayoSauce = true, Test = 123}  ","version":null,"tagName":"h3"},{"title":"Matcher","type":0,"sectionRef":"#","url":"/libraries/api/Matcher","content":"Matcher 7kayoh's matcher module ported to wally.","keywords":"","version":null},{"title":"lightingUtil","type":0,"sectionRef":"#","url":"/libraries/api/lightingUtil","content":"","keywords":"","version":null},{"title":"Functions​","type":1,"pageTitle":"lightingUtil","url":"/libraries/api/lightingUtil#functions","content":" ","version":null,"tagName":"h2"},{"title":"setSky​","type":1,"pageTitle":"lightingUtil","url":"/libraries/api/lightingUtil#setSky","content":"&lt;/&gt; lightingUtil.setSky(sky: Sky ) → () Sets the sky of Lighting by first destroying all Sky objects in it and then cloning sky into it. ","version":null,"tagName":"h3"},{"title":"network","type":0,"sectionRef":"#","url":"/libraries/api/network","content":"","keywords":"","version":null},{"title":"Types​","type":1,"pageTitle":"network","url":"/libraries/api/network#types","content":" ","version":null,"tagName":"h2"},{"title":"RemoteProperty​","type":1,"pageTitle":"network","url":"/libraries/api/network#RemoteProperty","content":"&lt;/&gt; type RemoteProperty = RemoteProperty   ","version":null,"tagName":"h3"},{"title":"RemoteSignal​","type":1,"pageTitle":"network","url":"/libraries/api/network#RemoteSignal","content":"&lt;/&gt; type RemoteSignal = RemoteSignal   ","version":null,"tagName":"h3"},{"title":"ClientRemoteProperty​","type":1,"pageTitle":"network","url":"/libraries/api/network#ClientRemoteProperty","content":"&lt;/&gt; type ClientRemoteProperty = ClientRemoteProperty   ","version":null,"tagName":"h3"},{"title":"ClientRemoteSignal​","type":1,"pageTitle":"network","url":"/libraries/api/network#ClientRemoteSignal","content":"&lt;/&gt; type ClientRemoteSignal = ClientRemoteSignal   ","version":null,"tagName":"h3"},{"title":"NetworkServer​","type":1,"pageTitle":"network","url":"/libraries/api/network#NetworkServer","content":"&lt;/&gt; type NetworkServer = NetworkServer  ","version":null,"tagName":"h3"},{"title":"Properties​","type":1,"pageTitle":"network","url":"/libraries/api/network#properties","content":" ","version":null,"tagName":"h2"},{"title":"Server​","type":1,"pageTitle":"network","url":"/libraries/api/network#Server","content":"Read only &lt;/&gt; network.Server: NetworkServer   ","version":null,"tagName":"h3"},{"title":"client​","type":1,"pageTitle":"network","url":"/libraries/api/network#client","content":"Read only &lt;/&gt; network.client: networkClient  ","version":null,"tagName":"h3"},{"title":"matrixUtil","type":0,"sectionRef":"#","url":"/libraries/api/matrixUtil","content":"","keywords":"","version":null},{"title":"Functions​","type":1,"pageTitle":"matrixUtil","url":"/libraries/api/matrixUtil#functions","content":" ","version":null,"tagName":"h2"},{"title":"matchingRowsValue​","type":1,"pageTitle":"matrixUtil","url":"/libraries/api/matrixUtil#matchingRowsValue","content":"&lt;/&gt; matrixUtil.matchingRowsValue( matrix: {{T}}, depth: number? ) → T? Searches matrix row-wise, and returns a value in a row that matches with the rest of the values of that row. E.g: local matrix = { {1, 1, 1}, {5, 5, 2}, {0, 0, 2}, } print(matrixUtil.matchingRowsValue(matrix)) --&gt; 1 (The first row is equally matched (all 1s)) Additionally, you can specify depth if you want to control how far the method should check each row. For e.g: local matrix = { {1, 2, 3, 4}, {5, 6, 7, 8}, {1, 1, 1, 0}, } print(matrixUtil.matchingRowsValue(matrix, 3)) --&gt; 1 (The last row's first 3 values (1s) are equally matched) print(matrixUtil.matchingRowsValue(matrix, 4)) --&gt; nil (No row's first 4 values are equally matched)   ","version":null,"tagName":"h3"},{"title":"matchingDiagonalColumnsValue​","type":1,"pageTitle":"matrixUtil","url":"/libraries/api/matrixUtil#matchingDiagonalColumnsValue","content":"&lt;/&gt; matrixUtil.matchingDiagonalColumnsValue( matrix: {{T}}, depth: number? ) → T? Searches matrix diagonally, and returns a value that matches with the rest of the values of the arrays in matrix. E.g: local matrix = { {5, 0, 0}, {0, 5, 0}, {0, 0, 5}, } print(matrixUtil.matchingDiagonalColumnsValue(matrix)) --&gt; 1 (A column has matching values diagonally (just 5s)) Additionally, you can specify depth if you want to control how far the method should search matrix diagonally. For e.g: local matrix = { {2, 0, 0, 0}, {0, 2, 0, 0}, {0, 0, 2, 0}, {0, 0, 0, 0}, } print(matrix.matchingDiagonalColumnsValue(matrix, 3)) --&gt; 2 (A column has FIRST 3 matching values diagonally (just 2s))   ","version":null,"tagName":"h3"},{"title":"matchingColumnsValue​","type":1,"pageTitle":"matrixUtil","url":"/libraries/api/matrixUtil#matchingColumnsValue","content":"&lt;/&gt; matrixUtil.matchingColumnsValue( matrix: {{T}}, depth: number? ) → T? Searches matrix column-wise and returns a value of a column that matches with the rest of the values of that column. E.g: local matrix = { {5, 0, 0}, {5, 1, 0}, {5, 0, 1}, } print(matrixUtil.matchingColumnsValue(matrix)) --&gt; 5 (A column has ALL equally matching values (just 5s)) Additionally, you can specify depth if you want to control how far the method should check each column. For e.g: local matrix = { {5, 0, 0}, {5, 0, 0}, {2, 1, 1}, } print(matrixUtil.matchingColumnsValue(matrix, 2)) --&gt; 5 (A column has FIRST 2 matching values (just 5s))  ","version":null,"tagName":"h3"},{"title":"networkClient","type":0,"sectionRef":"#","url":"/libraries/api/networkClient","content":"","keywords":"","version":null},{"title":"Properties​","type":1,"pageTitle":"networkClient","url":"/libraries/api/networkClient#properties","content":" ","version":null,"tagName":"h2"},{"title":"ClientRemoteProperty​","type":1,"pageTitle":"networkClient","url":"/libraries/api/networkClient#ClientRemoteProperty","content":"Read only &lt;/&gt; networkClient.ClientRemoteProperty: ClientRemoteProperty   ","version":null,"tagName":"h3"},{"title":"ClientRemoteSignal​","type":1,"pageTitle":"networkClient","url":"/libraries/api/networkClient#ClientRemoteSignal","content":"Read only &lt;/&gt; networkClient.ClientRemoteSignal: ClientRemoteSignal  ","version":null,"tagName":"h3"},{"title":"Functions​","type":1,"pageTitle":"networkClient","url":"/libraries/api/networkClient#functions","content":" ","version":null,"tagName":"h2"},{"title":"allFromParent​","type":1,"pageTitle":"networkClient","url":"/libraries/api/networkClient#allFromParent","content":"&lt;/&gt; networkClient.allFromParent(parent: Instance ) → {[string]: {[string]: any}} Returns an array of all networks dispatched to parent. -- Server local Workspace = game:GetService(&quot;Workspace&quot;) local network1 = network.Server.new(&quot;Test1&quot;, Workspace) network1:append(&quot;status&quot;, &quot;not good mate&quot;) network1:dispatch(Workspace) local network2 = network.Server.new(&quot;Test2&quot;, Workspace) network2:append(&quot;status&quot;, &quot;good mate!&quot;) network2:dispatch(Workspace) -- Client local Workspace = game:GetService(&quot;Workspace&quot;) for _, networkObject in Network.client.fromParent(Workspace) do print(networkObject.status) end --&gt; &quot;not good mate&quot; --&gt; &quot;good mate!&quot;   ","version":null,"tagName":"h3"},{"title":"fromParent​","type":1,"pageTitle":"networkClient","url":"/libraries/api/networkClient#fromParent","content":"&lt;/&gt; networkClient.fromParent( name: string, parent: Instance , timeout: number? ) → Promise&lt;DispatchedNetwork: {[string]: any}&gt; Returns a promise which is resolved once a network with the name of name, is dispatched to parent. If a network with the name of name is already dispatched to parent, the promise will immediately resolve. For e.g: -- Server local ReplicatedStorage = game:GetService(&quot;ReplicatedStorage&quot;) local Workspace = game:GetService(&quot;Workspace&quot;) local network = require(ReplicatedStorage.Packages.network) local testNetwork = Network.Server.new(&quot;Test&quot;) testNetwork:append(&quot;method&quot;, function(player) return string.format(&quot;hi, %s!&quot;, player.Name) end) -- Dispatch the network to workspace: testNetwork:dispatch(Workspace) -- Client local Workspace = game:GetService(&quot;Workspace&quot;) -- Get the network of name &quot;Test&quot;, dispatched to workspace local testNetwork = network.client.fromParent(&quot;Test&quot;, Workspace):expect() print(testNetwork.method()) --&gt; &quot;hi, bubshurb!&quot; You can also pass in timeout which will result in the promise to be rejected (if it hasn't resolved in time). timeout will default to 20 seconds. ","version":null,"tagName":"h3"},{"title":"marketPlaceServiceUtil","type":0,"sectionRef":"#","url":"/libraries/api/marketPlaceServiceUtil","content":"","keywords":"","version":null},{"title":"Functions​","type":1,"pageTitle":"marketPlaceServiceUtil","url":"/libraries/api/marketPlaceServiceUtil#functions","content":" ","version":null,"tagName":"h2"},{"title":"productInfoPromise​","type":1,"pageTitle":"marketPlaceServiceUtil","url":"/libraries/api/marketPlaceServiceUtil#productInfoPromise","content":"&lt;/&gt; marketPlaceServiceUtil.productInfoPromise( assetId: number, infoType: Enum.InfoType? ) → Promise&lt;ProductInfo&gt; Returns a promise which is resolved wih the product info of the given place id.  ","version":null,"tagName":"h3"},{"title":"userOwnsGamepassPromise​","type":1,"pageTitle":"marketPlaceServiceUtil","url":"/libraries/api/marketPlaceServiceUtil#userOwnsGamepassPromise","content":"&lt;/&gt; marketPlaceServiceUtil.userOwnsGamepassPromise( userId: number, gamepassId: number ) → Promise&lt;boolean&gt; Returns a promise which is resolved with a boolean indicating if the user owns the specified gamepass or not. Incase the operation fails, the promise will reject with an additional value i.e the error message. local wasSucessfull, userOwnsGamepass, errorMessage = marketPlaceServiceUtil.userOwnsGamepassPromise(123, 45678123):await() if wasSucessfull then print(userOwnsGamepass) else print(userOwnsGamepass) --&gt; false print(errorMessage) end   ","version":null,"tagName":"h3"},{"title":"playerOwnsAssetPromise​","type":1,"pageTitle":"marketPlaceServiceUtil","url":"/libraries/api/marketPlaceServiceUtil#playerOwnsAssetPromise","content":"&lt;/&gt; marketPlaceServiceUtil.playerOwnsAssetPromise( player: Player , assetId: number ) → Promise&lt;boolean&gt; Returns a promise which is resolved with a boolean indicating if the player owns the specified asset or not. Incase the operation fails, the promise will reject with an additional value i.e the error message. local wasSucessfull, playerOwnsAsset, errorMessage = marketPlaceServiceUtil.playerOwnsAssetPromise(123, 45678123):await() if wasSucessfull then print(playerOwnsAsset) else print(playerOwnsAsset) --&gt; false print(errorMessage) end   ","version":null,"tagName":"h3"},{"title":"playerOwnsBundlePromise​","type":1,"pageTitle":"marketPlaceServiceUtil","url":"/libraries/api/marketPlaceServiceUtil#playerOwnsBundlePromise","content":"&lt;/&gt; marketPlaceServiceUtil.playerOwnsBundlePromise( player: Player , bundleId: number ) → Promise&lt;boolean&gt; Returns a promise which is resolved with a boolean indicating if the player owns the specified bundle or not. Incase the operation fails, the promise will reject with an additional value i.e the error message. local wasSucessfull, playerOwnsBundle, errorMessage = marketPlaceServiceUtil.playerOwnsBundlePromise(123, 45678123):await() if wasSucessfull then print(playerOwnsBundle) else print(playerOwnsBundle) --&gt; false print(errorMessage) end   ","version":null,"tagName":"h3"},{"title":"subscriptionInfoProductPromise​","type":1,"pageTitle":"marketPlaceServiceUtil","url":"/libraries/api/marketPlaceServiceUtil#subscriptionInfoProductPromise","content":"&lt;/&gt; marketPlaceServiceUtil.subscriptionInfoProductPromise(subscriptionId: string) → Promise&lt;SubscriptionInfo&gt; Returns a promise which is resolved with the info of the given subscription id. local wasSucessfull, subscriptionInfo = marketPlaceServiceUtil.subscriptionInfoProductPromise(subscriptionId):await() if wasSucessfull then print(subscriptionInfo) else print(tostring(subscriptionInfo)) -- Error end   ","version":null,"tagName":"h3"},{"title":"userSubscriptionDetailsPromise​","type":1,"pageTitle":"marketPlaceServiceUtil","url":"/libraries/api/marketPlaceServiceUtil#userSubscriptionDetailsPromise","content":"&lt;/&gt; marketPlaceServiceUtil.userSubscriptionDetailsPromise( player: Player , subscriptionId: string ) → Promise&lt;UserSubscriptionDetails&gt; Returns a promise which is resolved with the user subscription details. local wasSucessfull, userSubscriptionDetails = marketPlaceServiceUtil.userSubscriptionDetailsPromise(player, subscriptionId):await() if wasSucessfull then print(userSubscriptionDetails) else print(tostring(userSubscriptionDetails)) -- Error end   ","version":null,"tagName":"h3"},{"title":"userSubscriptionPaymentHistoryPromise​","type":1,"pageTitle":"marketPlaceServiceUtil","url":"/libraries/api/marketPlaceServiceUtil#userSubscriptionPaymentHistoryPromise","content":"&lt;/&gt; marketPlaceServiceUtil.userSubscriptionPaymentHistoryPromise( player: Player , subscriptionId: string ) → Promise&lt;UserSubscriptionPaymentHistory&gt; Returns a promise which is resolved with the user subscription payment history. local wasSucessfull, userSubscriptionPaymentHistory = marketPlaceServiceUtil.userSubscriptionPaymentHistoryPromise(player, subscriptionId):await() if wasSucessfull then print(userSubscriptionPaymentHistory) else print(tostring(userSubscriptionPaymentHistory)) -- Error end   ","version":null,"tagName":"h3"},{"title":"userSubscriptionStatusPromise​","type":1,"pageTitle":"marketPlaceServiceUtil","url":"/libraries/api/marketPlaceServiceUtil#userSubscriptionStatusPromise","content":"&lt;/&gt; marketPlaceServiceUtil.userSubscriptionStatusPromise( player: Player , subscriptionId: string ) → Promise&lt;UserSubscriptionStatus&gt; Returns a promise which is resolved with the user subscription payment history. local wasSucessfull, userSubscriptionStatus = marketPlaceServiceUtil.userSubscriptionStatusPromise(player, subscriptionId):await() if wasSucessfull then print(userSubscriptionStatus) else print(tostring(userSubscriptionStatus)) -- Error end   ","version":null,"tagName":"h3"},{"title":"activeAssetProductInfoWhichPlayerOwnsPromise​","type":1,"pageTitle":"marketPlaceServiceUtil","url":"/libraries/api/marketPlaceServiceUtil#activeAssetProductInfoWhichPlayerOwnsPromise","content":"&lt;/&gt; marketPlaceServiceUtil.activeAssetProductInfoWhichPlayerOwnsPromise( playerUserId: number, assetId: number ) → () Retrieves the asset product info that belongs to a player of userid playerUserId. ","version":null,"tagName":"h3"},{"title":"instanceTrackerUtil","type":0,"sectionRef":"#","url":"/libraries/api/instanceTrackerUtil","content":"","keywords":"","version":null},{"title":"Types​","type":1,"pageTitle":"instanceTrackerUtil","url":"/libraries/api/instanceTrackerUtil#types","content":" ","version":null,"tagName":"h2"},{"title":"TransformerBinder​","type":1,"pageTitle":"instanceTrackerUtil","url":"/libraries/api/instanceTrackerUtil#TransformerBinder","content":"&lt;/&gt; interface TransformerBinder { property: Property, transformer: ( newValue: any, oldValue: any? ) → any, __propertyTransformer: true, }  ","version":null,"tagName":"h3"},{"title":"Functions​","type":1,"pageTitle":"instanceTrackerUtil","url":"/libraries/api/instanceTrackerUtil#functions","content":" ","version":null,"tagName":"h2"},{"title":"track​","type":1,"pageTitle":"instanceTrackerUtil","url":"/libraries/api/instanceTrackerUtil#track","content":"&lt;/&gt; instanceTrackerUtil.track( instance: Instance , cleanupCallback: ((instance: Instance ) → ())? ) → () Starts tracking the given instance so that the utility can easily cleanup once this instance is untracked. ThecleanupCallback is called instanceTrackerUtil.untrack is called on the instance. instanceTrackerUtil.track(screenGui.Frame, function(frame) frame:TweenPosition(UDim2.fromScale(1, 0)) end)   ","version":null,"tagName":"h3"},{"title":"bind​","type":1,"pageTitle":"instanceTrackerUtil","url":"/libraries/api/instanceTrackerUtil#bind","content":"&lt;/&gt; instanceTrackerUtil.bind( property: Property.Property, transformer: ( newValue: any, oldValue: any? ) → any ) → TransformerBinder Returns a transformer binder, to be used by instanceTrackerUtil.setProps, the value of property is wrapped onto transformer.  ","version":null,"tagName":"h3"},{"title":"bindToInstanceProperty​","type":1,"pageTitle":"instanceTrackerUtil","url":"/libraries/api/instanceTrackerUtil#bindToInstanceProperty","content":"&lt;/&gt; instanceTrackerUtil.bindToInstanceProperty( instance: Instance , instanceProperty: string, transformer: ( newValue: any, oldValue: any? ) → any ) → TransformerBinder Returns a transformer binder, to be used by instanceTrackerUtil.setProps, the value of property of instance is wrapped onto transformer. local name = Property.new(&quot;newText&quot;) instanceTrackerUtil.setProps(textLabel, { Text = instanceTrackerUtil.bindToInstanceProperty(Workspace.Baseplate, &quot;Transparency&quot;, function(newTransparency, oldTransparency) return tostring(newTransparency) end) }) Workspace.Baseplate.Transparency = 1 task.defer(function() print(textLabel.Text) --&gt; &quot;1&quot; end)   ","version":null,"tagName":"h3"},{"title":"bindToInstanceAttribute​","type":1,"pageTitle":"instanceTrackerUtil","url":"/libraries/api/instanceTrackerUtil#bindToInstanceAttribute","content":"&lt;/&gt; instanceTrackerUtil.bindToInstanceAttribute( instance: Instance , attribute: string, transformer: ( newValue: any, oldValue: any? ) → any ) → TransformerBinder Returns a transformer binder, to be used by instanceTrackerUtil.setProps, the attribute (attribute)ofinstanceis wrapped ontotransformer`. local name = Property.new(&quot;newText&quot;) instanceTrackerUtil.setProps(textLabel, { Text = instanceTrackerUtil.bindToInstanceAttribute(Workspace.Baseplate, &quot;SomeAttribute&quot;, function(newAttributeValue, oldAttributeValue) return newAttributeValue end) }) Workspace.Baseplate:SetAttribute(&quot;SomeAttribute&quot;, &quot;TestText&quot;) task.defer(function() print(textLabel.Text) --&gt; &quot;TestText&quot; end)   ","version":null,"tagName":"h3"},{"title":"setProps​","type":1,"pageTitle":"instanceTrackerUtil","url":"/libraries/api/instanceTrackerUtil#setProps","content":"&lt;/&gt; instanceTrackerUtil.setProps( instance: Instance , props: {[string]: any} ) → Connection Initializes the given instance with props. If properties are specified in props, the instance property will be bind to the *value of the property. Returns a cleanup function which when called, will destroy all properties bound to the instance. local textProp = Property.new(&quot;someText&quot;) local nameProp = Property.new(&quot;test&quot;) instanceTrackerUtil.setProps(textLabel, { Text = textProp, TextStrokeTransparency = 1, -- Bind the &quot;Name&quot; property of the textlabel to a callback -- which will be called every time the &quot;name&quot; property's value -- changes (and is called initially), you can return a new value -- from the callback using the given property value, which'll be -- applied to the instance's property itself. Name = instanceTrackerUtil.bind(nameProp, function(name) return name .. &quot;_Cool&quot; end) }) print(textLabel.Name) --&gt; &quot;test_Cool&quot; nameProp:set(&quot;nope&quot;) print(textLabel.Name) --&gt; &quot;nope_Cool&quot; text:set(&quot;eyes&quot;) print(textLabel.Text) --&gt; &quot;eyes&quot; You can also treat the bound function as a higher order function and return another function from it which will be calledindefinitely until it returns an explicit nil value or the prop reupdates. The function is just passed the latest value of the property and the old value of the property, and it's return value is used as the new value of the property. NOTE The property is updated to the non-nil return value of the function, however it is bulk updated so no on update signals are fired (which effectively prevents the higher order function from being unnecessarily recalled). You can use this to implement cool animations, for e.g a type writer effect: -- Example type writer effect local nameProp = Property.new(&quot;newText&quot;) instanceTrackerUtil.setProps(textLabel, { Name = instanceTrackerUtil.bind(nameProp, function(name) local goalLength = string.len(name) local timeToTake = goalLength / 30 local accumulated = 0 return function(updatedName) -- We are done with the time writer effect, let's return a nil value to stop -- this function from being called. if timeToTake &lt; accumulated then return nil end accumulated += RunService.Heartbeat:Wait() return string.sub(name, 1, math.floor((accumulated / timeToTake) * goalLength)) end end) }) Tweening: local GOAL_TRANSPARENCY = 1 local transparencyProp = Property.new(0) local function lerp(n, g, a) return n + (g - n) * a end local function close(n, g) return (n - g) &lt; 0.001 end instanceTrackerUtil.setProps(Workspace.Baseplate, { Transparency = instanceTrackerUtil.bind(transparencyProp, function() return function(updatedTransparency) if close(updatedTransparency, GOAL_TRANSPARENCY) then return nil end return lerp(updatedTransparency, GOAL_TRANSPARENCY, RunService.Heartbeat:Wait() * 2) end end) })   ","version":null,"tagName":"h3"},{"title":"untrack​","type":1,"pageTitle":"instanceTrackerUtil","url":"/libraries/api/instanceTrackerUtil#untrack","content":"&lt;/&gt; instanceTrackerUtil.untrack(instance: Instance ) → () Cleans up the given instance and untracks it, if it was previously being tracked. If a cleanup callback for the given instance exists, it will be called. Additionally, all property objects used for the properties of the descendants of the given instance will have their connections cleaned up. local myPart = workspace.MyPart local brickColor = Property.new(BrickColor.Red()) local transparency = Property.new(0) -- Bind the &quot;BrickColor&quot; property of myPart to the above property: instanceTrackerUtil.setProps(myPart, {BrickColor = brickColor}) -- Bind the &quot;Transparency&quot; property of myPart.SomeOtherPart to the above property: instanceTrackerUtil.setProps(myPart.SomeOtherPart, {Transparency = transparency}) -- Track myPart: instanceTrackerUtil.track(myPart, function() -- the transparency and brickColor property will soon have their connections cleaned up, so allow -- them to be set to their default values (myPart's brick color will now turn white -- and myPart.SomeOtherPart's transparency will now be set to 0) brickColor:set(BrickColor.White()) transparency:set(0) end) task.wait(5) instanceTrackerUtil.untrack(myPart)  ","version":null,"tagName":"h3"},{"title":"numberFormatUtil","type":0,"sectionRef":"#","url":"/libraries/api/numberFormatUtil","content":"","keywords":"","version":null},{"title":"Functions​","type":1,"pageTitle":"numberFormatUtil","url":"/libraries/api/numberFormatUtil#functions","content":" ","version":null,"tagName":"h2"},{"title":"numberToTuple​","type":1,"pageTitle":"numberFormatUtil","url":"/libraries/api/numberFormatUtil#numberToTuple","content":"&lt;/&gt; numberFormatUtil.numberToTuple(number: number) → string? Returns the given number's tuple, if any. Supports up to 57 tuples! print(numberFormatUtil.numberToTuple(2)) --&gt; &quot;Double&quot; print(numberFormatUtil.numberToTuple(3)) --&gt; &quot;Triple&quot; print(numberFormatUtil.numberToTuple(4)) --&gt; &quot;Quadruple&quot;   ","version":null,"tagName":"h3"},{"title":"ordinal​","type":1,"pageTitle":"numberFormatUtil","url":"/libraries/api/numberFormatUtil#ordinal","content":"&lt;/&gt; numberFormatUtil.ordinal(number: number) → string Returns the given number in ordinal format. print(numberFormatUtil.ordinal(24)) --&gt; &quot;24th&quot;   ","version":null,"tagName":"h3"},{"title":"spsToMph​","type":1,"pageTitle":"numberFormatUtil","url":"/libraries/api/numberFormatUtil#spsToMph","content":"&lt;/&gt; numberFormatUtil.spsToMph(sps: number) → number Formats sps (studs per second) to mph (miles per second). print(numberFormatUtil.spsToMph(100, 50, 25)) --&gt; 0.75   ","version":null,"tagName":"h3"},{"title":"suffix​","type":1,"pageTitle":"numberFormatUtil","url":"/libraries/api/numberFormatUtil#suffix","content":"&lt;/&gt; numberFormatUtil.suffix(number: number) → string Return a string as the formatted version of number. Cannot format extremely large numbers This method will struggle to format numbers larger than approximately 10^68. print(numberFormatUtil.suffix(10^70)) --&gt; 10 (no formatting...) print(numberFormatUtil.suffix(1650)) --&gt; &quot;1.65K&quot; Additionally, if number is lower than 1, then this method will just return number (stringified).  ","version":null,"tagName":"h3"},{"title":"commas​","type":1,"pageTitle":"numberFormatUtil","url":"/libraries/api/numberFormatUtil#commas","content":"&lt;/&gt; numberFormatUtil.commas(target: number) → string Returns a number stringified, formatted with commas. print(numberFormatUtil.commas(15000)) --&gt; 15,000   ","version":null,"tagName":"h3"},{"title":"toHMS​","type":1,"pageTitle":"numberFormatUtil","url":"/libraries/api/numberFormatUtil#toHMS","content":"&lt;/&gt; numberFormatUtil.toHMS(seconds: number) → string Returns the given seconds formatted in HMS format as a string. print(numberFormatUtil.toHMS(3600)) --&gt; &quot;01:00:00&quot;   ","version":null,"tagName":"h3"},{"title":"toMS​","type":1,"pageTitle":"numberFormatUtil","url":"/libraries/api/numberFormatUtil#toMS","content":"&lt;/&gt; numberFormatUtil.toMS(seconds: number) → string Returns the given seconds formatted in MS format as a string. print(numberFormatUtil.toHMS(60)) --&gt; &quot;01:00&quot;   ","version":null,"tagName":"h3"},{"title":"toS​","type":1,"pageTitle":"numberFormatUtil","url":"/libraries/api/numberFormatUtil#toS","content":"&lt;/&gt; numberFormatUtil.toS(seconds: number) → string Returns the given seconds formatted in S format as a string. print(numberFormatUtil.toHMS(60)) --&gt; &quot;1:00&quot;  ","version":null,"tagName":"h3"},{"title":"playerCharacterUtil","type":0,"sectionRef":"#","url":"/libraries/api/playerCharacterUtil","content":"","keywords":"","version":null},{"title":"Functions​","type":1,"pageTitle":"playerCharacterUtil","url":"/libraries/api/playerCharacterUtil#functions","content":" ","version":null,"tagName":"h2"},{"title":"setCharacterTransparency​","type":1,"pageTitle":"playerCharacterUtil","url":"/libraries/api/playerCharacterUtil#setCharacterTransparency","content":"&lt;/&gt; playerCharacterUtil.setCharacterTransparency( playerCharacter: Model , transparency: number ) → () Set's the transparency of all descendants (Baseparts and decals) in playerCharacter to transparency, except for the primary part.  ","version":null,"tagName":"h3"},{"title":"distanceFromCharacter​","type":1,"pageTitle":"playerCharacterUtil","url":"/libraries/api/playerCharacterUtil#distanceFromCharacter","content":"&lt;/&gt; playerCharacterUtil.distanceFromCharacter( playerCharacter: Model? , position: Vector3 ) → number Returns the distance from the playerCharacter's primary part to position. If playerCharacter is nil or if the primary part doesn't exist, then this method will return math.huge. ","version":null,"tagName":"h3"},{"title":"playerEventsUtil","type":0,"sectionRef":"#","url":"/libraries/api/playerEventsUtil","content":"","keywords":"","version":null},{"title":"Functions​","type":1,"pageTitle":"playerEventsUtil","url":"/libraries/api/playerEventsUtil#functions","content":" ","version":null,"tagName":"h2"},{"title":"usePlayerAdded​","type":1,"pageTitle":"playerEventsUtil","url":"/libraries/api/playerEventsUtil#usePlayerAdded","content":"&lt;/&gt; playerEventsUtil.usePlayerAdded(callback: (player: Player ) → ()) → () A simple wrapper for the PlayerAdded event. This method additionally captures current players in game; during the time of the execution of this method, as well. playerUtil.usePlayerAdded(function(player) print(player.Name, &quot; joined the game!&quot;) end)   ","version":null,"tagName":"h3"},{"title":"usePlayerCharacterAdded​","type":1,"pageTitle":"playerEventsUtil","url":"/libraries/api/playerEventsUtil#usePlayerCharacterAdded","content":"&lt;/&gt; playerEventsUtil.usePlayerCharacterAdded( player: Player , callback: (newPlayerCharacter: Model ) → () ) → () A wrapper over the player.CharacterAdded event. Also runs the given callback initially if player.Character is a truthy value, passing in newCharacter (while oldCharacter = nil). playerEventsUtil.usePlayerCharacterAdded(player, function(newCharacter) end)  ","version":null,"tagName":"h3"},{"title":"playerCharacterAccessoryUtil","type":0,"sectionRef":"#","url":"/libraries/api/playerCharacterAccessoryUtil","content":"","keywords":"","version":null},{"title":"Functions​","type":1,"pageTitle":"playerCharacterAccessoryUtil","url":"/libraries/api/playerCharacterAccessoryUtil#functions","content":" ","version":null,"tagName":"h2"},{"title":"accessories​","type":1,"pageTitle":"playerCharacterAccessoryUtil","url":"/libraries/api/playerCharacterAccessoryUtil#accessories","content":"&lt;/&gt; playerCharacterAccessoryUtil.accessories( playerCharacter: Model , accessoryType: Enum.AccessoryType ) → {Accessory } Returns an array of all accessories of type accesstoryType in playerCharacter. ","version":null,"tagName":"h3"},{"title":"playerPolicyInfoUtil","type":0,"sectionRef":"#","url":"/libraries/api/playerPolicyInfoUtil","content":"","keywords":"","version":null},{"title":"Types​","type":1,"pageTitle":"playerPolicyInfoUtil","url":"/libraries/api/playerPolicyInfoUtil#types","content":" ","version":null,"tagName":"h2"},{"title":"PlayerPolicyInfo​","type":1,"pageTitle":"playerPolicyInfoUtil","url":"/libraries/api/playerPolicyInfoUtil#PlayerPolicyInfo","content":"&lt;/&gt; interface PlayerPolicyInfo { ArePaidRandomItemsRestricted: boolean AllowedExternalLinkReferences: {string} IsPaidItemTradingAllowed: boolean IsSubjectToChinaPolicies: boolean }   ","version":null,"tagName":"h3"},{"title":"DEFAULT_PLAYER_POLICY_INFO​","type":1,"pageTitle":"playerPolicyInfoUtil","url":"/libraries/api/playerPolicyInfoUtil#DEFAULT_PLAYER_POLICY_INFO","content":"Constant &lt;/&gt; interface DEFAULT_PLAYER_POLICY_INFO { ArePaidRandomItemsRestricted: false AllowedExternalLinkReferences: {} IsPaidItemTradingAllowed: false IsSubjectToChinaPolicies: false }  WARNING Constant, not accessible within playerPolicyInfoUtil. ","version":null,"tagName":"h3"},{"title":"Functions​","type":1,"pageTitle":"playerPolicyInfoUtil","url":"/libraries/api/playerPolicyInfoUtil#functions","content":" ","version":null,"tagName":"h2"},{"title":"playerPolicyInfoPromise​","type":1,"pageTitle":"playerPolicyInfoUtil","url":"/libraries/api/playerPolicyInfoUtil#playerPolicyInfoPromise","content":"&lt;/&gt; playerPolicyInfoUtil.playerPolicyInfoPromise(player: Player ) → Promise&lt;PlayerPolicyInfo&gt; Returns a promise which is resolved with a read only policy info dictionary for the given player. If the promise rejects, then the promise will reject with a read only copy of DEFAULT_PLAYER_POLICY_INFO and an error message. playerPolicyInfoUtil.playerPolicyInfoPromise(somePlayer):andThen(function(policyInfo) print(policyInfo.ArePaidRandomItemsRestricted) end):catch(function(defaultPlayerPolicyInfo, errorMessage) warn(defaultPlayerPolicyInfo, tostring(errorMessage)) end) Read only policy info The policy info table will be read-only, through table.freeze. ","version":null,"tagName":"h3"},{"title":"NetworkServer","type":0,"sectionRef":"#","url":"/libraries/api/NetworkServer","content":"","keywords":"","version":null},{"title":"Types​","type":1,"pageTitle":"NetworkServer","url":"/libraries/api/NetworkServer#types","content":" ","version":null,"tagName":"h2"},{"title":"DefaultNetworkServerConfig​","type":1,"pageTitle":"NetworkServer","url":"/libraries/api/NetworkServer#DefaultNetworkServerConfig","content":"&lt;/&gt; interface DefaultNetworkServerConfig { automaticArgumentSerializationAndDeserializationEnabled: true promisifyCallbacks: true }   ","version":null,"tagName":"h3"},{"title":"DefaultNetworkServerMiddleware​","type":1,"pageTitle":"NetworkServer","url":"/libraries/api/NetworkServer#DefaultNetworkServerMiddleware","content":"&lt;/&gt; interface DefaultNetworkServerMiddleware { methodCallInbound: {} methodCallOutbound: {} valueDispatch: {} }   ","version":null,"tagName":"h3"},{"title":"NetworkServerConfig​","type":1,"pageTitle":"NetworkServer","url":"/libraries/api/NetworkServer#NetworkServerConfig","content":"&lt;/&gt; interface NetworkServerConfig { automaticArgumentSerializationAndDeserializationEnabled: boolean-- determines whether or not values sent to clients by the remote signal be internally serialized/deserialized or not. promisifyCallbacks: boolean-- determines whether or not a promise is returned to the client (resolved with the return values of the callback) whenever they call a serverside exposed callback }  Remote Signal and Remote Property not subject to automatic serialization / deserialization! RemoteSignal and RemoteProperty objects sent across the network by the network object will never be serialized or deserialized, regardless of automaticArgumentSerializationAndDeserializationEnabled. They're handled internally to ensure they are properly replicated across the network. automaticArgumentSerializationAndDeserializationEnabled -&gt; true Arguments and values sent across the network by the network object will be automatically serialized and deserialized respectively, with the help of an internal library, i.e serializerUtil. ::note Serialization and deserialization limitations! While the serializer utility used to accomplish this supports a variety of data types, do keep in mind that not all data types can be supported on the go for serialization and deserialization - check the above hyperlink to the serializer utility on how many data types it supports. :::: See the type of the value of abc being TweenInfo on the client: -- Server local Workspace = game:GetService(&quot;Workspace&quot;) local testNetwork = network.Server.new(&quot;TestNetwork&quot;, nil, { automaticArgumentSerializationAndDeserializationEnabled = true }) testNetwork:append(&quot;abc&quot;, TweenInfo.new()) -- By default, TweenInfos -- are not replicated properlty across the network, but watch the magic! testNetwork:dispatch(Workspace) -- Client local Workspace = game:GetService(&quot;Workspace&quot;) local testNetwork = network.client.fromParent(&quot;TestNetwork&quot;, Workspace):expect() print(typeof(testNetwork.abc)) --&gt; &quot;TweenInfo&quot; automaticArgumentSerializationAndDeserializationEnabled -&gt; false Arguments and values sent across the network will not be internally serialized and deserialized. Using the same example as above: See the type of the value of abc being table on the client instead of TweenInfo: -- Server local Workspace = game:GetService(&quot;Workspace&quot;) local testNetwork = network.Server.new(&quot;TestNetwork&quot;, nil, { automaticArgumentSerializationAndDeserializationEnabled = false }) testNetwork:append(&quot;abc&quot;, TweenInfo.new()) testNetwork:dispatch(Workspace) -- Client local Workspace = game:GetService(&quot;Workspace&quot;) local testNetwork = network.client.fromParent(&quot;abc&quot;, Workspace):expect() print(typeof(testNetwork.abc)) --&gt; &quot;table&quot; promisifyCallbacks -&gt; true: Serverside exposed callback called on the client will immediately return a promise which will be resolved with the return values of the callback. -- Server local Workspace = game:GetService(&quot;Workspace&quot;) local testNetwork = network.Server.new(&quot;TestNetwork&quot;, nil, { promisifyCallbacks = true }) testNetwork:append(&quot;method&quot;, function() return task.wait(5) end) testNetwork:dispatch(Workspace) -- Client local Workspace = game:GetService(&quot;Workspace&quot;) local testNetwork = network.client.fromParent(&quot;abc&quot;, Workspace):expect() testNetwork.method():andThen(function(deltaTime) print(typeof(deltaTime)) --&gt; &quot;number&quot; end) promisifyCallbacks -&gt; false: Serverside exposed callback called on the client will not return a promise and instead will yield the given thread until the callback has returned back to the caller. -- Server local Workspace = game:GetService(&quot;Workspace&quot;) local testNetwork = network.Server.new(&quot;TestNetwork&quot;, nil, { promisifyCallbacks = false }) testNetwork:append(&quot;method&quot;, function() return task.wait(5) end) testNetwork:dispatch(Workspace) -- Client local Workspace = game:GetService(&quot;Workspace&quot;) local testNetwork = network.client.fromParent(&quot;abc&quot;, Workspace):expect() print(typeof(testNetwork.method())) --&gt; &quot;number&quot; (Thread is yielded for approx 5 seconds)   ","version":null,"tagName":"h3"},{"title":"NetworkServer​","type":1,"pageTitle":"NetworkServer","url":"/libraries/api/NetworkServer#NetworkServer","content":"&lt;/&gt; type NetworkServer = NetworkServer   ","version":null,"tagName":"h3"},{"title":"NetworkServerMiddleware​","type":1,"pageTitle":"NetworkServer","url":"/libraries/api/NetworkServer#NetworkServerMiddleware","content":"&lt;/&gt; interface NetworkServerMiddleware { methodCallInbound: ( methodName: string, client: Player , args: {any} ) → boolean-- Before a callback runs. methodCallOutbound: ( methodName: string, client: Player , args: {any}, methodResponse: any ) → any-- After a callback has finished running. valueDispatch: ( client: Player , value: any ) → any-- Affects the return value of the callbacks (to the clients) after they've run. }  Yielding in middleware callbacks is not allowed Middleware callbacks aren't allowed to yield. If they do so, their thread will be closed viacoroutine.close and an error will be outputted in the console. Yielding, (especially in network-related code) results in weird bugs and behavior which can be hard to track down! methodCallInbound Callbacks in methodCallInbound are called whenever a client tries to call any of the appended methods of the network. The first argument passed to each callback is the name of the method (the client called), and the second argument, i.e the arguments sent by the client, which are packed into an array. local methodCallInboundCallbacks = { function (methodName, client: Player, arguments) print(client:IsA(&quot;Player&quot;)) --&gt; true print(typeof(arguments)) --&gt; &quot;table&quot; end } --- More control If any of the callbacks return an explicit false value, then the method which the client tried to call, will not be called. This is useful as you can implement for e.g, implementing rate limits! Additionally, you can modify the arguments table which will be reflected in the method, for e.g: -- Server local Workspace = game:GetService(&quot;Workspace&quot;) local testNetwork = network.Server.new(&quot;TestNetwork&quot;, {methodCallInbound = { function(_, _, arguments) arguments[2] = &quot;test&quot; end }}) testNetwork:append(&quot;method&quot;, function(player, a) print(a) --&gt; &quot;test&quot; (a ought to be 1, but the middleware modified it!) end) testNetwork:dispatch(Workspace) -- Client local Workspace = game:GetService(&quot;Workspace&quot;) local testNetwork = network.client.fromParent(&quot;TestNetwork&quot;, Workspace):expect() testNetwork.method(1) methodCallOutbound Callbacks in methodCallOutbound are called whenever a method (appended to the network) is called by the client, and has finished running. The first argument passed to each callback is the name of the method (client called), and the second argument, i.e the arguments sent by the client, which are packed into an array. A third argument i.e methodResponse is passed to each callback as well, which is just the response of the method called. local methodCallOutboundCallbacks = { function (methodName, client: Player, arguments, methodResponse) print(client:IsA(&quot;Player&quot;)) --&gt; true print(typeof(arguments)) --&gt; &quot;table&quot; end } --- Additionally, these callbacks can return a value that overrides the actual result of the method (which will be sent back to the client). For e.g: -- Server: local Workspace = game:GetService(&quot;Workspace&quot;) local middleware = { { function (methodName, arguments, methodResponse) print(methodResponse) --&gt; &quot;this&quot; return 50 end } } local testNetwork = network.Server.new(&quot;TestNetwork&quot;, middleware) testNetwork:append(&quot;someMethod&quot;, function() return &quot;this&quot; end) testNetwork:dispatch(Workspace) -- Client: local Workspace = game:GetService(&quot;Workspace&quot;) local testNetwork = network.fromParent(&quot;TestNetwork&quot;, Workspace):expect() print(testNetwork.someMethod()) --&gt; 50 Additionally, if more than 1 callback returns a value, then all those returned values will be packed into an array and then sent back to the client. This is by design, as it isn't ideal to disregard all returned values for just 1. For e.g: -- Server: local Workspace = game:GetService(&quot;Workspace&quot;) local middleware = { { function (methodName, arguments, response) return 1 end, function (methodName, arguments, response) return 2 end, function (methodName, arguments, response) return 3 end } } local testNetwork = network.server.new(&quot;TestNetwork&quot;, middleware) testNetwork:append(&quot;someMethod&quot;, function() return &quot;this&quot; end) testNetwork:dispatch(Workspace) -- Client: local Workspace = game:GetService(&quot;Workspace&quot;) local testNetwork = network.client.fromParent(&quot;TestNetwork&quot;, Workspace):expect() print(testNetwork.someMethod()) --&gt; {1, 2, 3} valueDispatch Callbacks in valueDispatch are called whenever the network object replicates a value (specifically a non function and not a remote signal and not a remote property), e.g a table, number, string, etc. The first argument passed to each callback is the client itself whom the value is going to replicate to, and the value. local valueDispatchCallbacks = { function (client, value) --- end, } --- The return value of the callback will be used in favour of the original value. If more than 1 callback returns a value, all of them will be packed into an array and then sent. local Workspace = game:GetService(&quot;Workspace&quot;) -- Server local valueDispatchCallbacks = { function (client, value) return { test = 1 } end, } local testNetwork = network.Server.new(&quot;TestNetwork&quot;, {valueDispatch = valueDispatchCallbacks}) testNetwork:append(&quot;someValue&quot;, 5) testNetwork:dispatch(Workspace) -- Client local Workspace = game:GetService(&quot;Workspace&quot;) local testNetwork = network.client.fromParent(&quot;TestNetwork&quot;, Workspace):expect() print(testNetwork.someValue) --&gt; {test = 1} (this thought to be 5, but the middleware returned a table instead) -- Server local Workspace = game:GetService(&quot;Workspace&quot;) local valueDispatchCallbacks = { function (client, value) print(value) --&gt; 5 return 1 end, function (client, value) print(value) --&gt; 5 return 2 end } local testNetwork = network.Server.new(&quot;TestNetwork&quot;, {valueDispatch = valueDispatchCallbacks}) testNetwork:append(&quot;someValue&quot;, 5) testNetwork:dispatch(Workspace) -- Client local Workspace = game:GetService(&quot;Workspace&quot;) local testNetwork = network.client.fromParent(&quot;TestNetwork&quot;, Workspace):expect() print(testNetwork.someValue) --&gt; {1, 2} --- More control If any of the callbacks return a nil value, then the value will not be replicated to the client. For e.g: local Workspace = game:GetService(&quot;Workspace&quot;) -- Server local valueDispatchCallbacks = { function (client, value) return nil end, } local testNetwork = network.Server.new(&quot;TestNetwork&quot;, {valueDispatch = valueDispatchCallbacks}) testNetwork:append(&quot;someValue&quot;, 5) testNetwork:dispatch(Workspace) -- Client local Workspace = game:GetService(&quot;Workspace&quot;) local testNetwork = network.client.fromParent(&quot;TestNetwork&quot;, Workspace):expect() print(testNetwork.someValue) --&gt; nil (this thought to be 5, but the middleware returned a nil value instead)  ","version":null,"tagName":"h3"},{"title":"Properties​","type":1,"pageTitle":"NetworkServer","url":"/libraries/api/NetworkServer#properties","content":" ","version":null,"tagName":"h2"},{"title":"RemoteProperty​","type":1,"pageTitle":"NetworkServer","url":"/libraries/api/NetworkServer#RemoteProperty","content":"Read only &lt;/&gt; NetworkServer.RemoteProperty: RemoteProperty   ","version":null,"tagName":"h3"},{"title":"RemoteProperty​","type":1,"pageTitle":"NetworkServer","url":"/libraries/api/NetworkServer#RemoteProperty","content":"Read only &lt;/&gt; NetworkServer.RemoteProperty: RemoteProperty  ","version":null,"tagName":"h3"},{"title":"Functions​","type":1,"pageTitle":"NetworkServer","url":"/libraries/api/NetworkServer#functions","content":" ","version":null,"tagName":"h2"},{"title":"new​","type":1,"pageTitle":"NetworkServer","url":"/libraries/api/NetworkServer#new","content":"&lt;/&gt; NetworkServer.new( name: string, middleware: NetworkServerMiddleware?, networkServerConfig: NetworkServerConfig? ) → NetworkServer Creates and returns a new network object of name. -- Server: local network = NetworkServer.new(&quot;Test&quot;) network:append(&quot;key&quot;, &quot;some value&quot;) network:dispatch(game:GetService(&quot;ReplicatedStorage&quot;)) -- Client: local network = network.Client.fromParent(&quot;Test&quot;, game:GetService(&quot;ReplicatedStorage&quot;)):expect() print(network.key) --&gt; &quot;some value&quot; If the 2nd parameter middleware is not specified, then it will default to DefaultNetworkServerMiddleware instead. If the 3rd parameter networkServerConfig is not specified, then it will default to DefaultNetworkServerConfig instead. Network object will initially not be accessible to the client! The network object will initially not be accessible to the client. You need to call NetworkServer:dispatch to render the network object accessible to the client!  ","version":null,"tagName":"h3"},{"title":"fromName​","type":1,"pageTitle":"NetworkServer","url":"/libraries/api/NetworkServer#fromName","content":"&lt;/&gt; NetworkServer.fromName(name: string) → NetworkServer? Returns a network of the given name, if found. -- Script 1: local network = NetworkServer.new(&quot;Test&quot;) network:append(&quot;key&quot;, &quot;some value&quot;) network:dispatch(game:GetService(&quot;ReplicatedStorage&quot;)) -- Script 2: local testNetwork = NetworkServer.fromName(&quot;Test&quot;)   ","version":null,"tagName":"h3"},{"title":"fromNamePromise​","type":1,"pageTitle":"NetworkServer","url":"/libraries/api/NetworkServer#fromNamePromise","content":"&lt;/&gt; NetworkServer.fromNamePromise(name: string) → Promise&lt;NetworkServer&gt; RemotePromisified version of NetworkServer.fromName. -- Script 1: local network = NetworkServer.new(&quot;Test&quot;) network:append(&quot;key&quot;, &quot;some value&quot;) network:dispatch(game:GetService(&quot;ReplicatedStorage&quot;)) -- Script 2: NetworkServer.fromNamePromise(&quot;Test&quot;):andThen(function(testNetwork) print(testNetwork:dispatch()) end)   ","version":null,"tagName":"h3"},{"title":"is​","type":1,"pageTitle":"NetworkServer","url":"/libraries/api/NetworkServer#is","content":"&lt;/&gt; NetworkServer.is(self: any) → boolean Returns a boolean indicating if self is a network object or not.  ","version":null,"tagName":"h3"},{"title":"dispatched​","type":1,"pageTitle":"NetworkServer","url":"/libraries/api/NetworkServer#dispatched","content":"NetworkServer instance &lt;/&gt; NetworkServer:dispatched() → boolean Returns a boolean indicating if the network object is dispatched to the client or not.  ","version":null,"tagName":"h3"},{"title":"append​","type":1,"pageTitle":"NetworkServer","url":"/libraries/api/NetworkServer#append","content":"NetworkServer instance &lt;/&gt; NetworkServer:append( key: string, value: string | number | {number} | {[string]: any} | RemoteProperty.RemoteProperty | RemoteSignal.RemoteSignal ) → () Appends a key-value pair, key and value, to the network object, so that it is available to the client once the network object is dispatched. For e.g: -- Server local Workspace = game:GetService(&quot;Workspace&quot;) local testNetwork = network.Server.new(&quot;TestNetwork&quot;) testNetwork:append(&quot;key&quot;, &quot;the value!&quot;) testNetwork:dispatch(Workspace) -- Client local testNetwork = Network.client.fromParent(&quot;TestNetwork&quot;, Workspace):expect() print(testNetwork.key) --&gt; &quot;the value!&quot; More support You can also append a RemoteSignal and a RemoteProperty as well, they'll be represented as a ClientRemoteSignal and a ClientRemoteProperty to the client respectively! Precaution! If the network object does not have a default middleware (AutomaticArgumentSerializationAndDeserialization specifically) set, then argument limitations will apply, as remote functions are internally used the key-value pairs accessible to the clients. WARNING This method will error if the network object is dispatched to the client. Always make sure to append keys and values before you dispatch the network object. You can check if a network object is dispatched to the client or not through NetworkServer:dispatched.  ","version":null,"tagName":"h3"},{"title":"dispatch​","type":1,"pageTitle":"NetworkServer","url":"/libraries/api/NetworkServer#dispatch","content":"NetworkServer instance &lt;/&gt; NetworkServer:dispatch(parent: Instance ) → () Dispatches the network folder of the network object to parent, rendering the network object accessible to the client now. -- Server local ReplicatedStorage = game:GetService(&quot;ReplicatedStorage&quot;) local Workspace = game:GetService(&quot;Workspace&quot;) local network = require(ReplicatedStorage.Packages.network) local testNetwork = Network.Server.new(&quot;Test&quot;) testNetwork:append(&quot;method&quot;, function(player) return string.format(&quot;hi, %s!&quot;, player.Name) end) -- Dispatch the network to workspace: testNetwork:dispatch(Workspace) -- Client local Workspace = game:GetService(&quot;Workspace&quot;) local testNetwork = network.client.fromParent(&quot;Test&quot;, Workspace):expect() print(testNetwork.method()) --&gt; &quot;hi, bubshurb!&quot;   ","version":null,"tagName":"h3"},{"title":"destroy​","type":1,"pageTitle":"NetworkServer","url":"/libraries/api/NetworkServer#destroy","content":"NetworkServer instance &lt;/&gt; NetworkServer:destroy() → () Destroys the network object and all appended remote properties &amp; remote signals within the network object, and renders the network object useless. ","version":null,"tagName":"h3"},{"title":"playerHumanoidUtil","type":0,"sectionRef":"#","url":"/libraries/api/playerHumanoidUtil","content":"","keywords":"","version":null},{"title":"Functions​","type":1,"pageTitle":"playerHumanoidUtil","url":"/libraries/api/playerHumanoidUtil#functions","content":" ","version":null,"tagName":"h2"},{"title":"playerHumanoid​","type":1,"pageTitle":"playerHumanoidUtil","url":"/libraries/api/playerHumanoidUtil#playerHumanoid","content":"&lt;/&gt; playerHumanoidUtil.playerHumanoid(player: Player ) → Humanoid?  Attempts to return the given player's humanoid, if found. This method is sugar for: local function playerHumanoid(player: Player) return if player.Character ~= nil then player.Character:FindFirstChildWhichIsA(&quot;Humanoid&quot;) else nil end   ","version":null,"tagName":"h3"},{"title":"playerHumanoidPromise​","type":1,"pageTitle":"playerHumanoidUtil","url":"/libraries/api/playerHumanoidUtil#playerHumanoidPromise","content":"&lt;/&gt; playerHumanoidUtil.playerHumanoidPromise(player: Player ) → Promise&lt;Humanoid &gt; Promisfied verison of playerHumanoidUtil.playerHumanoid. Automatic promise cancellation The returned promise will be cancelled automatically once player is no longer in game!  ","version":null,"tagName":"h3"},{"title":"trySeatPlayerPromise​","type":1,"pageTitle":"playerHumanoidUtil","url":"/libraries/api/playerHumanoidUtil#trySeatPlayerPromise","content":"&lt;/&gt; playerHumanoidUtil.trySeatPlayerPromise( player: Player , seat: VehicleSeat | Seat ) → Promise&lt;Seat | VehicleSeat &gt; Attempts to seat the given player's humanoid to seat. Additionally, if the player's humanoid is already seated on some other seat, then the humanoid will be unseated through humanoid.Sit = false before being seated to seat. WARNING This method will throw an error if player is not preset in game. On the client, this method will throw an error if player is not the local player. If the given seat already has an Occupant which is not the player's humanoid, then the returned promise will reject. Automatic promise cancellation The returned promise will be cancelled automatically once player is no longer in game!  ","version":null,"tagName":"h3"},{"title":"forceSeatPlayerPromise​","type":1,"pageTitle":"playerHumanoidUtil","url":"/libraries/api/playerHumanoidUtil#forceSeatPlayerPromise","content":"&lt;/&gt; playerHumanoidUtil.forceSeatPlayerPromise( player: Player , seat: VehicleSeat | Seat ) → Promise&lt;Seat | VehicleSeat &gt; Works almost exactly the same as playerHumanoidUtil.trySeatPlayerPromise, but unlike the former method, this method will try to unseat the seat's occupant (if any) through humanoid.Sit = false. WARNING This method will throw an error if player is not preset in game. On the client, this method will throw an error if player is not the local player. If the given seat already has an Occupant which is not the player's humanoid, then the returned promise will reject. Automatic promise cancellation The returned promise will be cancelled automatically once player is no longer in game!  ","version":null,"tagName":"h3"},{"title":"playerHumanoidSeatPartObserver​","type":1,"pageTitle":"playerHumanoidUtil","url":"/libraries/api/playerHumanoidUtil#playerHumanoidSeatPartObserver","content":"&lt;/&gt; playerHumanoidUtil.playerHumanoidSeatPartObserver( player: Player , observerSeated: ((seatPlayerIsSittingOn: Seat | VehicleSeat ) → ())?, observerUnseated: ((seatPlayerIsNoLongerSittingOn: (Seat | VehicleSeat )?) → ())? ) → Connection playerHumanoidUtil.playerHumanoidSeatPartObserver(player, function(seatPlayerIsSittingOn) print(player.Name .. &quot; sat on seat &quot; ..tostring(newSeatPlayerIsSittingOn.Name)) end, function(seatPlayerIsNoLongerSittingOn) if newSeatPlayerIsNoLongerSittingOn ~= nil then print(player.Name .. &quot; left seat &quot; ..tostring(newSeatPlayerIsNoLongerSittingOn.Name)) end end) Observes the given player's humanoid.SeatPart, but also accounting for cases where the player's humanoid has not being loaded yet or if the player's humanoid is updated (for e.g on character respawn). ","version":null,"tagName":"h3"},{"title":"playersUtil","type":0,"sectionRef":"#","url":"/libraries/api/playersUtil","content":"","keywords":"","version":null},{"title":"Functions​","type":1,"pageTitle":"playersUtil","url":"/libraries/api/playersUtil#functions","content":" ","version":null,"tagName":"h2"},{"title":"playerThumbnailPromise​","type":1,"pageTitle":"playersUtil","url":"/libraries/api/playersUtil#playerThumbnailPromise","content":"&lt;/&gt; playersUtil.playerThumbnailPromise( userId: number, thumbnailType: Enum.ThumbnailType, thumbnailSize: Enum.ThumbnailSize ) → Promise&lt;string&gt; Returns a promise wrapped over Players:GetUserThumbnailAsync. local PLACE_HOLDER_IMAGE = &quot;rbxassetid://0&quot; playersUtil.playerThumbnailPromise(userId, Enum.ThumbnailType.HeadShot, Enum.ThumbnailSize.Size420x420):andThen(function(content) print(content) end):catch(function(errorMessage) print(PLACE_HOLDER_IMAGE) end)   ","version":null,"tagName":"h3"},{"title":"playerFromInstance​","type":1,"pageTitle":"playersUtil","url":"/libraries/api/playersUtil#playerFromInstance","content":"&lt;/&gt; playersUtil.playerFromInstance(instance: Instance ) → Player?  Returns a player from the given instance, if found. This is an efficient wrapper over Players:GetPlayerFromCharacter as it allows you to get the player object even if the given instance is a deep descendant of some player's character. laser.Touched:Connect(function(hit) local player = playerUtil.playerFromInstance(hit) if player ~= nil then -- Damage the player end end)   ","version":null,"tagName":"h3"},{"title":"nameFromUserId​","type":1,"pageTitle":"playersUtil","url":"/libraries/api/playersUtil#nameFromUserId","content":"&lt;/&gt; playersUtil.nameFromUserId(userId: number) → Promise&lt;string&gt; Returns a promise which is resolved with the user name associated to the user id. Caching behavior This method will immediately cache in the name (retrieved from the given user id), so calls for the same user id will return in cached user name immediately. playersUtil.nameFromUserId(2981707497):andThen(function(username) print(username) --&gt; &quot;bubshurb&quot; end)   ","version":null,"tagName":"h3"},{"title":"userIdFromName​","type":1,"pageTitle":"playersUtil","url":"/libraries/api/playersUtil#userIdFromName","content":"&lt;/&gt; playersUtil.userIdFromName(username: string) → Promise&lt;number&gt; Returns a promise which is resolved with the user id associated to the username. Caching behavior This method will immediately cache in the user id (retrieved from the given username), so calls for the same username will return in cached user id immediately. playersUtil.userIdFromName(&quot;bubshurb&quot;):andThen(function(userId) print(userId) --&gt; 2981707497 end)   ","version":null,"tagName":"h3"},{"title":"friendsPromise​","type":1,"pageTitle":"playersUtil","url":"/libraries/api/playersUtil#friendsPromise","content":"&lt;/&gt; playersUtil.friendsPromise(userid: number) → Promise&lt;number&gt; Returns a promise which is resolved with an array of the player's friend's data. If the returned promise rejects, it will reject with an empty table (for friends) along with the error message. playersUtil.friendsPromise(2981707497):andThen(function(friends) -- `friends` will be an array of friends pages! for _, friendData in friends do print(friendData.Username) print(friendData.DisplayName) print(friendData.Id) end end):catch(function(friends, errorMessage) -- `friends` will be an empty array print(friends, tostring(errorMessage)) end)   ","version":null,"tagName":"h3"},{"title":"characterAppearanceInfoPromise​","type":1,"pageTitle":"playersUtil","url":"/libraries/api/playersUtil#characterAppearanceInfoPromise","content":"&lt;/&gt; playersUtil.characterAppearanceInfoPromise(userid: number) → Promise&lt;{[string]: any}&gt; Returns a promise which is wrapped around Players:GetCharacterAppearanceInfoAsync.  ","version":null,"tagName":"h3"},{"title":"banHistoryPromise​","type":1,"pageTitle":"playersUtil","url":"/libraries/api/playersUtil#banHistoryPromise","content":"&lt;/&gt; playersUtil.banHistoryPromise(userid: number) → Promise&lt;{...}&gt; Returns a promise which is wrapped around Players:GetBanHistoryAsync. playersUtil.banHistoryPromise(2981707497):andThen(function(banHistory) -- `banHistory` will be an array of ban history pages! for _, banData in banHistory do print(banData.Ban) print(banData.Duration) print(banData.StartTime) -- and more, etc.. end end):catch(function(banHistory, errorMessage) -- `banHistory` will be an empty array print(banHistory, tostring(errorMessage)) end) If the returned promise rejects, it will reject with an empty table (for banHistory) along with the error message.  ","version":null,"tagName":"h3"},{"title":"banPromise​","type":1,"pageTitle":"playersUtil","url":"/libraries/api/playersUtil#banPromise","content":"&lt;/&gt; playersUtil.banPromise(config: { UserIds: {number}, ApplyToUniverse: boolean, Duration: number, DisplayReason: string, PrivateReason: string, ExcludeAltAccounts: boolean, }) → Promise&lt;&gt; Returns a promise which is wrapped around Players:BanAsync.  ","version":null,"tagName":"h3"},{"title":"unbanPromise​","type":1,"pageTitle":"playersUtil","url":"/libraries/api/playersUtil#unbanPromise","content":"&lt;/&gt; playersUtil.unbanPromise(config: { UserIds: {number}, ApplyToUniverse: boolean, }) → Promise&lt;&gt; Returns a promise which is wrapped around Players:UnbanAsync.  ","version":null,"tagName":"h3"},{"title":"humanoidDescriptionFromOutfitIdPromise​","type":1,"pageTitle":"playersUtil","url":"/libraries/api/playersUtil#humanoidDescriptionFromOutfitIdPromise","content":"&lt;/&gt; playersUtil.humanoidDescriptionFromOutfitIdPromise(outfitId: number) → Promise&lt;&gt; Returns a promise which is wrapped around Players:GetHumanoidDescriptionFromOutfitId.  ","version":null,"tagName":"h3"},{"title":"humanoidDescriptionFromUserIdPromise​","type":1,"pageTitle":"playersUtil","url":"/libraries/api/playersUtil#humanoidDescriptionFromUserIdPromise","content":"&lt;/&gt; playersUtil.humanoidDescriptionFromUserIdPromise(userId: number) → Promise&lt;&gt; Returns a promise which is wrapped around Players:GetHumanoidDescriptionFromUserId.  ","version":null,"tagName":"h3"},{"title":"createHumanoidModelFromDescriptionPromise​","type":1,"pageTitle":"playersUtil","url":"/libraries/api/playersUtil#createHumanoidModelFromDescriptionPromise","content":"&lt;/&gt; playersUtil.createHumanoidModelFromDescriptionPromise( description: HumanoidDescription , rigType: Enum.HumanoidRigType, assetTypeVerification: Enum.AssetTypeVerification ) → Promise&lt;Model &gt; Returns a promise which is wrapped around Players:CreateHumanoidModelFromDescription.  ","version":null,"tagName":"h3"},{"title":"createHumanoidModelFromUserIdPromise​","type":1,"pageTitle":"playersUtil","url":"/libraries/api/playersUtil#createHumanoidModelFromUserIdPromise","content":"&lt;/&gt; playersUtil.createHumanoidModelFromUserIdPromise(userId: number) → Promise&lt;Model &gt; Returns a promise which is wrapped around Players:CreateHumanoidModelFromUserId. ","version":null,"tagName":"h3"},{"title":"positionUtil","type":0,"sectionRef":"#","url":"/libraries/api/positionUtil","content":"","keywords":"","version":null},{"title":"Functions​","type":1,"pageTitle":"positionUtil","url":"/libraries/api/positionUtil#functions","content":" ","version":null,"tagName":"h2"},{"title":"randomPosition​","type":1,"pageTitle":"positionUtil","url":"/libraries/api/positionUtil#randomPosition","content":"&lt;/&gt; positionUtil.randomPosition( position: Vector3 , size: Vector3 , specifiedRandom: Random? ) → () Returns a random position from the given position and the size. A third argument (specifiedRandom) can be passed which will be used in calculating the random position. ","version":null,"tagName":"h3"},{"title":"numberUtil","type":0,"sectionRef":"#","url":"/libraries/api/numberUtil","content":"","keywords":"","version":null},{"title":"Properties​","type":1,"pageTitle":"numberUtil","url":"/libraries/api/numberUtil#properties","content":" ","version":null,"tagName":"h2"},{"title":"e​","type":1,"pageTitle":"numberUtil","url":"/libraries/api/numberUtil#e","content":"Read only &lt;/&gt; numberUtil.e: number&lt;2.7182818284590&gt; A mathematical constant, also known as Euler's number.  ","version":null,"tagName":"h3"},{"title":"phi​","type":1,"pageTitle":"numberUtil","url":"/libraries/api/numberUtil#phi","content":"Read only &lt;/&gt; numberUtil.phi: number&lt;1.618033988749895&gt; A mathematical constant, also known as the golden ratio.  ","version":null,"tagName":"h3"},{"title":"tau​","type":1,"pageTitle":"numberUtil","url":"/libraries/api/numberUtil#tau","content":"Read only &lt;/&gt; numberUtil.tau: number&lt;6.283185307179586&gt; A mathematical constant, it is the circle constant representing the ratio between circumference and radius.  ","version":null,"tagName":"h3"},{"title":"g​","type":1,"pageTitle":"numberUtil","url":"/libraries/api/numberUtil#g","content":"Read only &lt;/&gt; numberUtil.g: number&lt;6.6743e-11&gt; A mathematical constant, used in calculating the gravitational attraction between two objects.  ","version":null,"tagName":"h3"},{"title":"ga​","type":1,"pageTitle":"numberUtil","url":"/libraries/api/numberUtil#ga","content":"Read only &lt;/&gt; numberUtil.ga: number&lt;137.5&gt; A mathematical constant (the golden angle), which is the smaller of the two angles created by sectioning the circumference of a circle.  ","version":null,"tagName":"h3"},{"title":"ec​","type":1,"pageTitle":"numberUtil","url":"/libraries/api/numberUtil#ec","content":"Read only &lt;/&gt; numberUtil.ec: number&lt;0.577215664901&gt; A mathematical constant (also known as Euler's constant - not to be confused with Euler's number i.e e which approximately equals to 2.718). ","version":null,"tagName":"h3"},{"title":"Functions​","type":1,"pageTitle":"numberUtil","url":"/libraries/api/numberUtil#functions","content":" ","version":null,"tagName":"h2"},{"title":"to24H​","type":1,"pageTitle":"numberUtil","url":"/libraries/api/numberUtil#to24H","content":"&lt;/&gt; numberUtil.to24H( hour: number, preset: &quot;am&quot; | &quot;pm&quot; ) → number Returns the given hour formatted to the 12 hour clock. print(numberUtil.to24H(12, &quot;am&quot;)) --&gt; 0 print(numberUtil.to24H(5, &quot;pm&quot;)) --&gt; 17 print(numberUtil.to24H(12, &quot;pm&quot;)) --&gt; 12 print(numberUtil.to24H(11, &quot;pm&quot;)) --&gt; 23 print(numberUtil.to24H(11, &quot;am&quot;)) --&gt; 11   ","version":null,"tagName":"h3"},{"title":"to12H​","type":1,"pageTitle":"numberUtil","url":"/libraries/api/numberUtil#to12H","content":"&lt;/&gt; numberUtil.to12H(hour: number) → number Returns the given hour formatted to the 12 hour clock. print(numberUtil.to12H(24)) --&gt; 12 print(numberUtil.to12H(17)) --&gt; 5   ","version":null,"tagName":"h3"},{"title":"sphericalLerp​","type":1,"pageTitle":"numberUtil","url":"/libraries/api/numberUtil#sphericalLerp","content":"&lt;/&gt; numberUtil.sphericalLerp( t: number, w0: number, x0: number, y0: number, z0: number, w1: number, x1: number, y1: number, z1: number, d: number ) → number Returns a result on based on spherical linear interpolation.  ","version":null,"tagName":"h3"},{"title":"secant​","type":1,"pageTitle":"numberUtil","url":"/libraries/api/numberUtil#secant","content":"&lt;/&gt; numberUtil.secant(number: number) → number The ratio of the hypotenuse to the shorter side adjacent to an acute angle (in a right-angled triangle); the reciprocal of a cosine. print(numberUtil.secant(1)) --&gt; 1.8508157176809255   ","version":null,"tagName":"h3"},{"title":"root​","type":1,"pageTitle":"numberUtil","url":"/libraries/api/numberUtil#root","content":"&lt;/&gt; numberUtil.root( number: number, numberRoot: number ) → number Returns the root of number. print(numberUtil.root(2, 3)) --&gt; 1.2599210498948732 (same as cube root of 2) print(numberUtil.root(2, 2)) --&gt; 1.4142135623730951 (same as square root of 2)   ","version":null,"tagName":"h3"},{"title":"quadraticLerp​","type":1,"pageTitle":"numberUtil","url":"/libraries/api/numberUtil#quadraticLerp","content":"&lt;/&gt; numberUtil.quadraticLerp( number: number, goal: number, alpha: number ) → number Quadraticly interpolates number to goal, with alpha being the multiplier. print(numberUtil.quadraticLerp(2, 5, 0.7)) --&gt; 4.1   ","version":null,"tagName":"h3"},{"title":"quadraticBezier​","type":1,"pageTitle":"numberUtil","url":"/libraries/api/numberUtil#quadraticBezier","content":"&lt;/&gt; numberUtil.quadraticBezier( t: number, p0: number, p1: number, p2: number ) → number Returns the quadratic bezier from the arguments. print(numberUtil.quadraticBezier(0, 0.5, 3, 5)) --&gt; 0.5   ","version":null,"tagName":"h3"},{"title":"nextOrder​","type":1,"pageTitle":"numberUtil","url":"/libraries/api/numberUtil#nextOrder","content":"&lt;/&gt; numberUtil.nextOrder() → () → number Returns a function which returns a numerical value, which is always incremented by 1. local nextOrder = numberUtil.nextOrder() print(nextOrder()) --&gt; 1 print(nextOrder()) --&gt; 2 print(nextOrder()) --&gt; 3   ","version":null,"tagName":"h3"},{"title":"nan​","type":1,"pageTitle":"numberUtil","url":"/libraries/api/numberUtil#nan","content":"&lt;/&gt; numberUtil.nan(number: number) → boolean Returns a boolean indicating if number is NaN (Not A Number). print(numberUtil.nan(0 / 0)) --&gt; true   ","version":null,"tagName":"h3"},{"title":"mode​","type":1,"pageTitle":"numberUtil","url":"/libraries/api/numberUtil#mode","content":"&lt;/&gt; numberUtil.mode(...: number) → number? From a set of numbers ..., returns the number which is the most frequent. print(numberUtil.mode(1, 2, 3, 3)) --&gt; 3 print(numberUtil.mode(1, 2, 3)) --&gt; nil (no numbers repeat)   ","version":null,"tagName":"h3"},{"title":"median​","type":1,"pageTitle":"numberUtil","url":"/libraries/api/numberUtil#median","content":"&lt;/&gt; numberUtil.median(...: number) → number Returns the median of the set of numbers .... print(numberUtil.median(2, 2)) --&gt; 4   ","version":null,"tagName":"h3"},{"title":"mean​","type":1,"pageTitle":"numberUtil","url":"/libraries/api/numberUtil#mean","content":"&lt;/&gt; numberUtil.mean(...: number) → number Returns the mean of the set of numbers .... print(numberUtil.mean(3, 5)) --&gt; 2   ","version":null,"tagName":"h3"},{"title":"logarithmicLerp​","type":1,"pageTitle":"numberUtil","url":"/libraries/api/numberUtil#logarithmicLerp","content":"&lt;/&gt; numberUtil.logarithmicLerp( number: number, goal: number, alpha: number ) → number Logarithmicly lerps number to goal, with alpha being the multiplier. print(numberUtil.logarithmicLerp(1, 2, 3)) --&gt; 0.125   ","version":null,"tagName":"h3"},{"title":"lerp​","type":1,"pageTitle":"numberUtil","url":"/libraries/api/numberUtil#lerp","content":"&lt;/&gt; numberUtil.lerp( number: number, goal: number, alpha: number ) → number Interpolates number to goal, with alpha being the multiplier. print(numberUtil.lerp(2, 5, 0.7)) --&gt; 4.1   ","version":null,"tagName":"h3"},{"title":"inverseLerp​","type":1,"pageTitle":"numberUtil","url":"/libraries/api/numberUtil#inverseLerp","content":"&lt;/&gt; numberUtil.inverseLerp( min: number, max: number, alpha: number ) → number Inverse lerp is the inverse operation of the lerp node. It can be used to determine what the input to a lerp was based on its output. print(numberUtil.inverseLerp(2, 5, 0.7)) --&gt; -0.43333333333333335   ","version":null,"tagName":"h3"},{"title":"hms​","type":1,"pageTitle":"numberUtil","url":"/libraries/api/numberUtil#hms","content":"&lt;/&gt; numberUtil.hms(number: number) → ( number, number, number ) Returns a string which is just number formatted to the HMS (Hour, Minutes, Seconds) format. print(numberUtil.hms(21660)) --&gt; 6, 1, 0   ","version":null,"tagName":"h3"},{"title":"factors​","type":1,"pageTitle":"numberUtil","url":"/libraries/api/numberUtil#factors","content":"&lt;/&gt; numberUtil.factors(number: number) → {number} Returns a read only array of all factors of number. print(numberUtil.factors(2)) --&gt; {1, 2}   ","version":null,"tagName":"h3"},{"title":"factorial​","type":1,"pageTitle":"numberUtil","url":"/libraries/api/numberUtil#factorial","content":"&lt;/&gt; numberUtil.factorial(number: number) → number Returns the factorial of number. print(numberUtil.factorial(3)) --&gt; 6   ","version":null,"tagName":"h3"},{"title":"exponentialLerp​","type":1,"pageTitle":"numberUtil","url":"/libraries/api/numberUtil#exponentialLerp","content":"&lt;/&gt; numberUtil.exponentialLerp( number: number, goal: number, alpha: number ) → number Exponentially lerps number to goal, with alpha being the multiplier. print(numberUtil.exponentialLerp(1, 5, 3)) --&gt; 125   ","version":null,"tagName":"h3"},{"title":"cubicBezier​","type":1,"pageTitle":"numberUtil","url":"/libraries/api/numberUtil#cubicBezier","content":"&lt;/&gt; numberUtil.cubicBezier( t: number, p0: number, p1: number, p2: number, p3: number ) → number Returns the cubic bezier from the arguments. print(cubicBezier(2, 0.15, 0, 0.1, 0)) --&gt; -1.35   ","version":null,"tagName":"h3"},{"title":"cotan​","type":1,"pageTitle":"numberUtil","url":"/libraries/api/numberUtil#cotan","content":"&lt;/&gt; numberUtil.cotan(number: number) → number A trigonometric function that in a right-angled triangle is the ratio of the length of the adjacent side to that of the opposite side; the reciprocal of tangent. print(numberUtil.cotan(1)) --&gt; 0.6420926159343306   ","version":null,"tagName":"h3"},{"title":"cosec​","type":1,"pageTitle":"numberUtil","url":"/libraries/api/numberUtil#cosec","content":"&lt;/&gt; numberUtil.cosec(number: number) → number Returns the reciprocal of math.sign(number). print(numberUtil.cosec(1)) --&gt; 1.1883951057781212   ","version":null,"tagName":"h3"},{"title":"commas​","type":1,"pageTitle":"numberUtil","url":"/libraries/api/numberUtil#commas","content":"&lt;/&gt; numberUtil.commas(target: number) → string Returns a number (stringified), formatted with commas. print(numberUtil.commas(15000)) --&gt; 15,000   ","version":null,"tagName":"h3"},{"title":"comb​","type":1,"pageTitle":"numberUtil","url":"/libraries/api/numberUtil#comb","content":"&lt;/&gt; numberUtil.comb( number: number, k: number ) → number Returns the number of ways picking k unordered outcomes from number possibilities, without repetition. NOTE If the value of k is greater than number, then the method will return 0. print(numberUtil.comb(2, 1)) --&gt; 2   ","version":null,"tagName":"h3"},{"title":"close​","type":1,"pageTitle":"numberUtil","url":"/libraries/api/numberUtil#close","content":"&lt;/&gt; numberUtil.close( number: number, to: number, eplison: number? ) → boolean Returns a boolean indicating if the difference between number and to is lower than or equal to eplsion. print(numberUtil.close(0.1 + 0.2, 0.3)) --&gt; true print(numberUtil.close(0.1 + 0.2, 0.3, 0)) --&gt; false If eplison is not specified, then it will default to 1e-2.  ","version":null,"tagName":"h3"},{"title":"clampTo​","type":1,"pageTitle":"numberUtil","url":"/libraries/api/numberUtil#clampTo","content":"&lt;/&gt; numberUtil.clampTo( number: number, min: number, max: number, clamp: number ) → number Clamps number to clamp, if number is greater than max or lower than min. print(numberUtil.clampTo(1, 2, 5, 150)) --&gt; 150   ","version":null,"tagName":"h3"},{"title":"average​","type":1,"pageTitle":"numberUtil","url":"/libraries/api/numberUtil#average","content":"&lt;/&gt; numberUtil.average( sum: number, ...: number ) → number Returns the average of ... numbers against sum. print(numberUtil.average(100, 50, 25)) --&gt; 0.75  ","version":null,"tagName":"h3"},{"title":"promiseCleanupUtil","type":0,"sectionRef":"#","url":"/libraries/api/promiseCleanupUtil","content":"","keywords":"","version":null},{"title":"Functions​","type":1,"pageTitle":"promiseCleanupUtil","url":"/libraries/api/promiseCleanupUtil#functions","content":" ","version":null,"tagName":"h2"},{"title":"addPromiseAndCleanupOnFinishedRunning​","type":1,"pageTitle":"promiseCleanupUtil","url":"/libraries/api/promiseCleanupUtil#addPromiseAndCleanupOnFinishedRunning","content":"&lt;/&gt; promiseCleanupUtil.addPromiseAndCleanupOnFinishedRunning( promise: Promise, key: string, cleanupTable: {[string]: Promise} ) → () Adds the given promise to cleanupTable, indexed by key. Once the promise has finished running, it'll be safely removed from cleanupTable.  ","version":null,"tagName":"h3"},{"title":"findAndCancelPromise​","type":1,"pageTitle":"promiseCleanupUtil","url":"/libraries/api/promiseCleanupUtil#findAndCancelPromise","content":"&lt;/&gt; promiseCleanupUtil.findAndCancelPromise( key: string, cleanupTable: {[string]: any} ) → () Finds the given promise keyed by key in cleanupTable, if found, it will be cancelled and the promise will be removed from the cleanupTable.. ","version":null,"tagName":"h3"},{"title":"playerUtil","type":0,"sectionRef":"#","url":"/libraries/api/playerUtil","content":"","keywords":"","version":null},{"title":"Types​","type":1,"pageTitle":"playerUtil","url":"/libraries/api/playerUtil#types","content":" ","version":null,"tagName":"h2"},{"title":"PlayerGroupRank​","type":1,"pageTitle":"playerUtil","url":"/libraries/api/playerUtil#PlayerGroupRank","content":"&lt;/&gt; interface PlayerGroupRank { Default: 0 }   ","version":null,"tagName":"h3"},{"title":"PlayerGroupRole​","type":1,"pageTitle":"playerUtil","url":"/libraries/api/playerUtil#PlayerGroupRole","content":"&lt;/&gt; interface PlayerGroupRole { Default: &quot;Guest&quot; }  ","version":null,"tagName":"h3"},{"title":"Functions​","type":1,"pageTitle":"playerUtil","url":"/libraries/api/playerUtil#functions","content":" ","version":null,"tagName":"h2"},{"title":"playerGroupRankPromise​","type":1,"pageTitle":"playerUtil","url":"/libraries/api/playerUtil#playerGroupRankPromise","content":"&lt;/&gt; playerUtil.playerGroupRankPromise( playerUserId: number, groupId: number ) → Promise&lt;number&gt; Returns a promise which is resolved with the group rank of the player in the given group. If the group rank couldn't be retrieved, then the promise will reject with [DefaultGroupRank], along with the error message. playerUtil.playerGroupRankPromise(2981707497, 1):andThen(function(groupRank) print(groupRank) end):catch(function(defaultGroupRank, errorMessage) print(groupRank, tostring(errorMessage)) end)   ","version":null,"tagName":"h3"},{"title":"playerIsFriendsWithPromise​","type":1,"pageTitle":"playerUtil","url":"/libraries/api/playerUtil#playerIsFriendsWithPromise","content":"&lt;/&gt; playerUtil.playerIsFriendsWithPromise( player: Player , userId: number ) → Promise&lt;boolean&gt; A promisified wrapper over Player:IsFriendsWith. If the promise rejects, it will reject with (isFriends as false), along with the error message. playerUtil.playerIsFriendsWithPromise(2981707497, 27842645):andThen(function(isFriends) print(isFriends) end):catch(function(isFriends, errorMessage) print(isFriends, tostring(errorMessage)) end)   ","version":null,"tagName":"h3"},{"title":"playerFriendsOnlinePromise​","type":1,"pageTitle":"playerUtil","url":"/libraries/api/playerUtil#playerFriendsOnlinePromise","content":"&lt;/&gt; playerUtil.playerFriendsOnlinePromise( player: Player , maxFriends: number ) → Promise&lt;{[string]: any}&gt; A promisified wrapper over Player:GetFriendsOnline. If the promise rejects, it will reject with (friends as an empty array i.e {}), along with the error message. playerUtil.playerFriendsOnlinePromise(player, 15):andThen(function(friends) for _, friend in friends do print(friend.UserName) end end):catch(function(friends, errorMessage) -- `friends` will be an empty array print(friends, tostring(errorMessage)) end)   ","version":null,"tagName":"h3"},{"title":"playerGroupRolePromise​","type":1,"pageTitle":"playerUtil","url":"/libraries/api/playerUtil#playerGroupRolePromise","content":"&lt;/&gt; playerUtil.playerGroupRolePromise( playerUserId: number, groupId: number ) → Promise&lt;string&gt; Returns a promise which is resolved with the group role of the player in the given group. If the promise rejects, it will reject with (groupRole as [DefaultGroupRole]), along with the error message. playerUtil.playerGroupRolePromise(2981707497, 1):andThen(function(groupRole) print(groupRole) end):catch(function(defaultGroupRole, errorMessage) warn(tostring(errorMessage)) end)   ","version":null,"tagName":"h3"},{"title":"playerIsInGroupPromise​","type":1,"pageTitle":"playerUtil","url":"/libraries/api/playerUtil#playerIsInGroupPromise","content":"&lt;/&gt; playerUtil.playerIsInGroupPromise( playerUserId: number, groupId: number ) → Promise&lt;boolean&gt; Returns a promise which is resolved with a boolean indicating if the given player is in the given group or not. If the promise rejects, it will reject with (playerIsInGroup as false), along with the error message. playerUtil.playerIsInGroupPromise(2981707497, 1):andThen(function(playerIsInGroup) print(playerIsInGroup) end):catch(function(playerIsInGroup, errorMessage) -- playerIsInGroupPromise will always be false here print(playerIsInGroupPromise, tostring(errorMessage)) end)   ","version":null,"tagName":"h3"},{"title":"safeChatStatusPromise​","type":1,"pageTitle":"playerUtil","url":"/libraries/api/playerUtil#safeChatStatusPromise","content":"&lt;/&gt; playerUtil.safeChatStatusPromise(player: Player ) → Promise&lt;PlayerSafeChatStatus&gt; ","version":null,"tagName":"h3"},{"title":"Types","type":1,"pageTitle":"playerUtil","url":"/libraries/api/playerUtil##","content":"","version":null,"tagName":"h3"},{"title":"​","type":1,"pageTitle":"playerUtil","url":"/libraries/api/playerUtil#PlayerSafeChatStatus","content":"interface PlayerSafeChatStatus { On: &quot;On&quot; Off: &quot;Off&quot; Unknown: &quot;Unknown&quot; }  Returns a promise which is resolved with the safe chat status of the given player. If the promise rejects, it will reject with (safeChatStatus as playerUtil.PlayerSafeChatStatus.Unknown), along with the error message. playerUtil.safeChatStatusPromise(player):andThen(function(safeChatStatus) print(safeChatStatus == playerUtil.PlayerSafeChatStatus.On) end)  ","version":null,"tagName":"h3"},{"title":"Property","type":0,"sectionRef":"#","url":"/libraries/api/Property","content":"","keywords":"","version":null},{"title":"Types​","type":1,"pageTitle":"Property","url":"/libraries/api/Property#types","content":" ","version":null,"tagName":"h2"},{"title":"Property​","type":1,"pageTitle":"Property","url":"/libraries/api/Property#Property","content":"&lt;/&gt; type Property = Property  ","version":null,"tagName":"h3"},{"title":"Properties​","type":1,"pageTitle":"Property","url":"/libraries/api/Property#properties","content":" ","version":null,"tagName":"h2"},{"title":"onUpdate<T>​","type":1,"pageTitle":"Property","url":"/libraries/api/Property#onUpdate<T>","content":"This item is read only and cannot be modified. Read Only Signal Property Instance &lt;/&gt; Property.onUpdate&lt;T&gt;: Signal&lt;newValue: T,oldValue: T?&gt; A signal which is fired whenever the value of the property is set to a new one. The signal is only passed the new value as the only argument. ","version":null,"tagName":"h3"},{"title":"Functions​","type":1,"pageTitle":"Property","url":"/libraries/api/Property#functions","content":" ","version":null,"tagName":"h2"},{"title":"new​","type":1,"pageTitle":"Property","url":"/libraries/api/Property#new","content":"&lt;/&gt; Property.new(initialValue: T?) → Property A constructor method that creates a new property object, with initialValue as the current value of the property.  ","version":null,"tagName":"h3"},{"title":"is​","type":1,"pageTitle":"Property","url":"/libraries/api/Property#is","content":"&lt;/&gt; Property.is(self: any) → boolean A method that returns a boolean indicating if self is a property or not.  ","version":null,"tagName":"h3"},{"title":"clone​","type":1,"pageTitle":"Property","url":"/libraries/api/Property#clone","content":"Property Instance &lt;/&gt; Property:clone(mapper: (( newValue: T, oldValue: T? ) → any)?) → () Creates a new property and binds it to the current property, and returns the new property. The new property will operate on the value of the current property, however you may specify a mapper function for more control. The mapper function will be passed the new value and the old value of the current property (and when the current property is updated), the return value of the mapper will be the new value of the new property. The new property will be automatically destroyed once the current prpoerty is destroyed. local property = Property.new(5) local anotherProperty = property:clone(function(number) return number + 5 end) print(anotherProperty:get()) --&gt; 10 property:set(10) print(anotherProperty:get()) --&gt; 15   ","version":null,"tagName":"h3"},{"title":"bindToInstanceProperty​","type":1,"pageTitle":"Property","url":"/libraries/api/Property#bindToInstanceProperty","content":"Property Instance &lt;/&gt; Property:bindToInstanceProperty( instance: Instance , property: string ) → () Binds the property to a property of the given Roblox instance. When the instance is destroyed, the property is automatically destroyed as well. local property = Property.new() property:bindToInstanceProperty(workspace.Baseplate, &quot;Transparency&quot;) property.onUpdate:Connect(function(newTransparency, oldTransparency) print(newTransparency, oldTransparency) --&gt; 1, 0 end) print(property:get()) --&gt; 0 workspace.Baseplate.Transparency = 1 -- Deferred signal behavior: (Roblox instance-signals are not immediately fired) print(property.onUpdate:Wait()) --&gt; 1   ","version":null,"tagName":"h3"},{"title":"bindToInstanceAttribute​","type":1,"pageTitle":"Property","url":"/libraries/api/Property#bindToInstanceAttribute","content":"Property Instance &lt;/&gt; Property:bindToInstanceAttribute( instance: Instance , attribute: string ) → () Binds the property to an attribute of the given Roblox instance. When the instance is destroyed, the property is automatically destroyed as well. local property = Property.new() property:bindToInstanceAttribute(workspace.Baseplate, &quot;SomeAttribute&quot;) print(property:get()) --&gt; nil workspace.Baseplate:SetAttribute(&quot;SomeAttribute&quot;, 5) print(property:get()) --&gt; 5   ","version":null,"tagName":"h3"},{"title":"bindToInstance​","type":1,"pageTitle":"Property","url":"/libraries/api/Property#bindToInstance","content":"Property Instance &lt;/&gt; Property:bindToInstance(instance: Instance ) → () Binds the property to an instance so that once the instance is destroyed, the property will be destroyed too. local property = Property.new() property:bindToInstance(workspace.Baseplate) print(Property.is(property)) --&gt; true workspace.Baseplate:Destroy() task.wait() -- Deferred signal behavior print(Property.is(property)) --&gt; false   ","version":null,"tagName":"h3"},{"title":"set​","type":1,"pageTitle":"Property","url":"/libraries/api/Property#set","content":"Property Instance &lt;/&gt; Property:set(value: T) → () Sets the value of the property to value, if this new value isn't the same as the previous value.  ","version":null,"tagName":"h3"},{"title":"observe​","type":1,"pageTitle":"Property","url":"/libraries/api/Property#observe","content":"Property Instance &lt;/&gt; Property:observe(callback: ( newValue: T, oldValue: T? ) → ()) → () Observes the value of the property. property:observe(function(newValue, oldValue) end)   ","version":null,"tagName":"h3"},{"title":"valuePromise​","type":1,"pageTitle":"Property","url":"/libraries/api/Property#valuePromise","content":"Property Instance &lt;/&gt; Property:valuePromise(valuePredicate: (( newValue: T, oldValue: T? ) → boolean)?) → Promise Returns a promise which is resolved with a non-nil value of the property, given thatvaluePredicate is not passed as an argument. local property = Property.new() property:valuePromise():andThen(function(value) print(value) --&gt; 2 end) property:set(2) valuePredicate can also be passed, which allows you to filter out values. If it returns exactly true, only then will the promise resolve with the new value. property:valuePromise(function(newValue, oldValue) return newValue == 10 and oldValue == 1 end):andThen(function(newValue) print(newValue) end) property:set(1) property:set(10) --&gt; 10 NOTE The returned promise will be cancelled as soon as the property object is destroyed.  ","version":null,"tagName":"h3"},{"title":"forceSet​","type":1,"pageTitle":"Property","url":"/libraries/api/Property#forceSet","content":"Property Instance &lt;/&gt; Property:forceSet(value: T) → () Works the same as Property:set except that values aren't checked for equality, for e.g: local property = Property.new() property.onUpdate:Connect(function(newValue) print(newValue) end) property:forceSet(1) property:forceSet(2) property:forceSet(&quot;a&quot;) --&gt; 1 --&gt; 2 --&gt; &quot;a&quot;   ","version":null,"tagName":"h3"},{"title":"silentSet​","type":1,"pageTitle":"Property","url":"/libraries/api/Property#silentSet","content":"Property Instance &lt;/&gt; Property:silentSet(value: T) → () Works almost the same as Property:set, but never fires off the Property.onUpdate signal.  ","version":null,"tagName":"h3"},{"title":"get​","type":1,"pageTitle":"Property","url":"/libraries/api/Property#get","content":"&lt;/&gt; Property:get() → T Returns a shallow copy of the current value of the property. local property = Property.new() local t = {} property:set(t) print(property:get() == t) --&gt; false   ","version":null,"tagName":"h3"},{"title":"destroy​","type":1,"pageTitle":"Property","url":"/libraries/api/Property#destroy","content":"Property Instance &lt;/&gt; Property:destroy() → () Destroys the property and renders it unusable. ","version":null,"tagName":"h3"},{"title":"propertyUtil","type":0,"sectionRef":"#","url":"/libraries/api/propertyUtil","content":"","keywords":"","version":null},{"title":"Functions​","type":1,"pageTitle":"propertyUtil","url":"/libraries/api/propertyUtil#functions","content":" ","version":null,"tagName":"h2"},{"title":"increment​","type":1,"pageTitle":"propertyUtil","url":"/libraries/api/propertyUtil#increment","content":"&lt;/&gt; propertyUtil.increment(property: Property.Property&lt;number&gt;) → () Increments the given property's value by 1.  ","version":null,"tagName":"h3"},{"title":"decrement​","type":1,"pageTitle":"propertyUtil","url":"/libraries/api/propertyUtil#decrement","content":"&lt;/&gt; propertyUtil.decrement(property: Property.Property&lt;number&gt;) → () Decrements the given property's value by 1 though clamping the property's value such that it does not become less than 0. ","version":null,"tagName":"h3"},{"title":"rain","type":0,"sectionRef":"#","url":"/libraries/api/rain","content":"","keywords":"","version":null},{"title":"Types​","type":1,"pageTitle":"rain","url":"/libraries/api/rain#types","content":" ","version":null,"tagName":"h2"},{"title":"CollisonModeFunction​","type":1,"pageTitle":"rain","url":"/libraries/api/rain#CollisonModeFunction","content":"&lt;/&gt; type CollisonModeFunction = ((basePart: BasePart ) → boolean)? A predicate which is called automatically and is passed a base part as the only argument. If the predicate returns a truthy value, then the rain will hit the given base part. If the predicate returns a non truthy value, then the rain will NOT hit the given basepart.   ","version":null,"tagName":"h3"},{"title":"CollisionMode​","type":1,"pageTitle":"rain","url":"/libraries/api/rain#CollisionMode","content":"&lt;/&gt; interface CollisionMode { callback: 3? blacklist: 2? whitelist: 1 none: 0 }  If rain.CollisionMode.whitelist is passed as the first argument to rain.SetCollisionMode, you can pass in a base part or an array of base parts to be hit by the rain only. If rain.CollisionMode.blacklist is passed as the first argument to rain.SetCollisionMode, you can pass in a base part or an array of base parts to NOT be hit by the rain. If rain.CollisionMode.callback is passed as the first argument to rain.SetCollisionMode, you can pass in a predicate [`CollisionModeFunction`] that can return a boolean value.  ","version":null,"tagName":"h3"},{"title":"Properties​","type":1,"pageTitle":"rain","url":"/libraries/api/rain#properties","content":" ","version":null,"tagName":"h2"},{"title":"enabled​","type":1,"pageTitle":"rain","url":"/libraries/api/rain#enabled","content":"&lt;/&gt; rain.enabled: Property A Property object that contains a value on whether the rain is enabled or not. ","version":null,"tagName":"h3"},{"title":"Functions​","type":1,"pageTitle":"rain","url":"/libraries/api/rain#functions","content":" ","version":null,"tagName":"h2"},{"title":"enable​","type":1,"pageTitle":"rain","url":"/libraries/api/rain#enable","content":"&lt;/&gt; rain.enable(tweenInfo: TweenInfo? ) → () Enables the rain.  ","version":null,"tagName":"h3"},{"title":"disable​","type":1,"pageTitle":"rain","url":"/libraries/api/rain#disable","content":"&lt;/&gt; rain.disable(tweenInfo: TweenInfo? ) → () Disables the rain.  ","version":null,"tagName":"h3"},{"title":"setColor​","type":1,"pageTitle":"rain","url":"/libraries/api/rain#setColor","content":"&lt;/&gt; rain.setColor( value: Color3 , tweenInfo: TweenInfo? ) → () Sets the rain color.  ","version":null,"tagName":"h3"},{"title":"color​","type":1,"pageTitle":"rain","url":"/libraries/api/rain#color","content":"&lt;/&gt; rain.color() → () Returns the current rain color value.  ","version":null,"tagName":"h3"},{"title":"transparency​","type":1,"pageTitle":"rain","url":"/libraries/api/rain#transparency","content":"&lt;/&gt; rain.transparency() → () Returns the current rain transparency value.  ","version":null,"tagName":"h3"},{"title":"ceiling​","type":1,"pageTitle":"rain","url":"/libraries/api/rain#ceiling","content":"&lt;/&gt; rain.ceiling() → () Returns the current rain ceiling value.  ","version":null,"tagName":"h3"},{"title":"setTransparency​","type":1,"pageTitle":"rain","url":"/libraries/api/rain#setTransparency","content":"&lt;/&gt; rain.setTransparency(transparency: number) → () Sets the transparency of the rain.  ","version":null,"tagName":"h3"},{"title":"setTransparency​","type":1,"pageTitle":"rain","url":"/libraries/api/rain#setTransparency","content":"&lt;/&gt; rain.setTransparency(speedRatio: number) → () Sets the speed ratio of the rain.  ","version":null,"tagName":"h3"},{"title":"setTransparency​","type":1,"pageTitle":"rain","url":"/libraries/api/rain#setTransparency","content":"&lt;/&gt; rain.setTransparency(intensityRatio: number) → () Sets the intensity ratio of the rain.  ","version":null,"tagName":"h3"},{"title":"setTransparency​","type":1,"pageTitle":"rain","url":"/libraries/api/rain#setTransparency","content":"&lt;/&gt; rain.setTransparency(lightEmission: number) → () Sets the light emission of the rain.  ","version":null,"tagName":"h3"},{"title":"setTransparency​","type":1,"pageTitle":"rain","url":"/libraries/api/rain#setTransparency","content":"&lt;/&gt; rain.setTransparency(lightInfluence: number) → () Sets the light influence of the rain.  ","version":null,"tagName":"h3"},{"title":"setVolume​","type":1,"pageTitle":"rain","url":"/libraries/api/rain#setVolume","content":"&lt;/&gt; rain.setVolume( volume: number, tweenInfo: TweenInfo? ) → () Sets the volume of the rain sound.  ","version":null,"tagName":"h3"},{"title":"setSoundGroup​","type":1,"pageTitle":"rain","url":"/libraries/api/rain#setSoundGroup","content":"&lt;/&gt; rain.setSoundGroup(newSoundGroup: SoundGroup ) → () Sets the sound group of the rain sound by first cloning a copy of it, and then setting the cloned variant's sound group to newSoundGroup, and the old variant is destroyed.  ","version":null,"tagName":"h3"},{"title":"direction​","type":1,"pageTitle":"rain","url":"/libraries/api/rain#direction","content":"&lt;/&gt; rain.direction() → Vector3  Returns the direction of the rain.  ","version":null,"tagName":"h3"},{"title":"setDirection​","type":1,"pageTitle":"rain","url":"/libraries/api/rain#setDirection","content":"&lt;/&gt; rain.setDirection( direction: Vector3 , tweenInfo: TweenInfo? ) → () Sets the direction of the rain.  ","version":null,"tagName":"h3"},{"title":"setCeiling​","type":1,"pageTitle":"rain","url":"/libraries/api/rain#setCeiling","content":"&lt;/&gt; rain.setCeiling(ceiling: number) → () Sets the ceiling of the rain.  ","version":null,"tagName":"h3"},{"title":"setStraightTexture​","type":1,"pageTitle":"rain","url":"/libraries/api/rain#setStraightTexture","content":"&lt;/&gt; rain.setStraightTexture(asset: string) → () Sets the straight texture of the rain.  ","version":null,"tagName":"h3"},{"title":"setTopDownTexture​","type":1,"pageTitle":"rain","url":"/libraries/api/rain#setTopDownTexture","content":"&lt;/&gt; rain.setTopDownTexture(asset: string) → () Sets the top down texture of the rain.  ","version":null,"tagName":"h3"},{"title":"setSplashTexture​","type":1,"pageTitle":"rain","url":"/libraries/api/rain#setSplashTexture","content":"&lt;/&gt; rain.setSplashTexture(asset: string) → () Sets the splash texture of the rain.  ","version":null,"tagName":"h3"},{"title":"setSoundId​","type":1,"pageTitle":"rain","url":"/libraries/api/rain#setSoundId","content":"&lt;/&gt; rain.setSoundId(asset: string) → () Sets the sound id of the rain sound.  ","version":null,"tagName":"h3"},{"title":"setConfig​","type":1,"pageTitle":"rain","url":"/libraries/api/rain#setConfig","content":"&lt;/&gt; rain.setConfig(config: { ceiling: number?, intensityRatio: number?, direction: Vector3? , splashTexture: string?, topDownTexture: string?, volume: number?, straightTexture: string?, soundId: string?, transparency: number?, lightEmission: string?, lightInfluence: string?, color: Color3? , speedRatio: number?, collisionMode: string, collisionModeFunction: CollisonModeFunction?, }) → () Sets the rain config.  ","version":null,"tagName":"h3"},{"title":"setCollisionMode​","type":1,"pageTitle":"rain","url":"/libraries/api/rain#setCollisionMode","content":"&lt;/&gt; rain.setCollisionMode( mode: CollisionMode, param: {Instance } | Instance | CollisonModeFunction ) → () Sets the rain collision mode. -- Example uses: -- 1) rain.setCollisionMode(rain.CollisionMode.callback, function(basePart) return not basePart.CanCollide end) -- 2) rain.setCollisionMode(rain.CollisionMode.whitelist, {Workspace.Baseplate}) -- 3) rain.setCollisionMode(rain.CollisionMode.blacklist, {Workspace.Baseplate})  ","version":null,"tagName":"h3"},{"title":"queryUtil","type":0,"sectionRef":"#","url":"/libraries/api/queryUtil","content":"","keywords":"","version":null},{"title":"Types​","type":1,"pageTitle":"queryUtil","url":"/libraries/api/queryUtil#types","content":" ","version":null,"tagName":"h2"},{"title":"Connection​","type":1,"pageTitle":"queryUtil","url":"/libraries/api/queryUtil#Connection","content":"&lt;/&gt; type Connection = RBXScriptConnection | { Connected: boolean, Disconnect: (self: Connection) → () }   ","version":null,"tagName":"h3"},{"title":"EventLike<T>​","type":1,"pageTitle":"queryUtil","url":"/libraries/api/queryUtil#EventLike<T>","content":"&lt;/&gt; type EventLike&lt;T&gt; = { Connect: ((T) → ()) → Connection, connect: ((T) → ()) → Connection }  ","version":null,"tagName":"h3"},{"title":"Functions​","type":1,"pageTitle":"queryUtil","url":"/libraries/api/queryUtil#functions","content":" ","version":null,"tagName":"h2"},{"title":"query​","type":1,"pageTitle":"queryUtil","url":"/libraries/api/queryUtil#query","content":"&lt;/&gt; queryUtil.query( queryResults: T, queryAddition: EventLike&lt;T&gt;, queryRemoving: EventLike&lt;T&gt; ) → Property&lt;T&gt;,Trove Returns a property object and a trove. The property object is initially updated withqueryResults, and then updated based off of queryAddition and queryRemoving events firing off. local Workspace = game:GetService(&quot;Workspace&quot;) local queryResultsProperty, cleanup = queryUtil.query( Workspace:GetDescendants(), Workspace.DescendantAdded, Workspace.DescendantRemoving ) queryResultsProperty:observe(function(newQueryResults, oldQueryResults) print(newQueryResults) --&gt; {...} (Array of all Workspace descendants) end)  ","version":null,"tagName":"h3"},{"title":"robuxConversionUtil","type":0,"sectionRef":"#","url":"/libraries/api/robuxConversionUtil","content":"","keywords":"","version":null},{"title":"Functions​","type":1,"pageTitle":"robuxConversionUtil","url":"/libraries/api/robuxConversionUtil#functions","content":" ","version":null,"tagName":"h2"},{"title":"robuxToDevexAmount​","type":1,"pageTitle":"robuxConversionUtil","url":"/libraries/api/robuxConversionUtil#robuxToDevexAmount","content":"&lt;/&gt; robuxConversionUtil.robuxToDevexAmount(robux: number) → number Returns the given robux converted to dollars.  ","version":null,"tagName":"h3"},{"title":"devexAmountToRobux​","type":1,"pageTitle":"robuxConversionUtil","url":"/libraries/api/robuxConversionUtil#devexAmountToRobux","content":"&lt;/&gt; robuxConversionUtil.devexAmountToRobux(dollar: number) → number Returns the given dollar converted to robux. ","version":null,"tagName":"h3"},{"title":"schedulerUtil","type":0,"sectionRef":"#","url":"/libraries/api/schedulerUtil","content":"","keywords":"","version":null},{"title":"Functions​","type":1,"pageTitle":"schedulerUtil","url":"/libraries/api/schedulerUtil#functions","content":" ","version":null,"tagName":"h2"},{"title":"schedule​","type":1,"pageTitle":"schedulerUtil","url":"/libraries/api/schedulerUtil#schedule","content":"&lt;/&gt; schedulerUtil.schedule( runServiceEventName: string, callbackIdentifier: string, callback: (...any) → (), maxExpectedCallbackRunTime: number? ) → Connection Schedules the given callback to be run during the given run service event. This is useful because this utility sets up all these events once and registers the given scheduledCallbacksData to be called during each event's invocation point - this prevents you from initializing many different types of RunService events. schedulerUtil.schedule(schedulerUtil.RunServiceEvent.Stepped, &quot;PerformPhyicsUpdate&quot; function(_, deltaTime: number) -- Perform physics update here end) Yielding is not allowed Scheduled callbacks should never yield. If they do so, other scheduled callbacks will not be able to run and the utility offers no protection against this due to performance related issues. Automatic memory &amp; performance profiling A debug profile is automatically created for the scheduled callback using debug.profilebegin(callbackIdentifier), which will allow you to easily monitor the performance of individual scheduled callback. Additionally, a debug memory category is also setup for the given callback using debug.setmemorycategory(callbackIdentifier). This utility automatically outputs a warning message in the console every 10 seconds if a given scheduled callback takes a bit too long to finish running - so you can also pass in an optional 4th argument, maxExpectedCallbackRunTime to have the system know how long the given scheduled callback should be expected to finish running.  ","version":null,"tagName":"h3"},{"title":"unschedule​","type":1,"pageTitle":"schedulerUtil","url":"/libraries/api/schedulerUtil#unschedule","content":"&lt;/&gt; schedulerUtil.unschedule( runServiceEventName: string, callbackIdentifier: string ) → () Deschedules the given RunService event bound callback. ","version":null,"tagName":"h3"},{"title":"seatUtil","type":0,"sectionRef":"#","url":"/libraries/api/seatUtil","content":"","keywords":"","version":null},{"title":"Functions​","type":1,"pageTitle":"seatUtil","url":"/libraries/api/seatUtil#functions","content":" ","version":null,"tagName":"h2"},{"title":"seatOccupanciesProperty​","type":1,"pageTitle":"seatUtil","url":"/libraries/api/seatUtil#seatOccupanciesProperty","content":"&lt;/&gt; seatUtil.seatOccupanciesProperty(seats: {Seat | VehicleSeat }) → Property&lt;{Seat | VehicleSeat }: Player &gt; Returns a property which is updated based on the Occupant property of the given seats. Also returns a trove object which will cleanup everything. ","version":null,"tagName":"h3"},{"title":"soundInitializerUtil","type":0,"sectionRef":"#","url":"/libraries/api/soundInitializerUtil","content":"","keywords":"","version":null},{"title":"Properties​","type":1,"pageTitle":"soundInitializerUtil","url":"/libraries/api/soundInitializerUtil#properties","content":" ","version":null,"tagName":"h2"},{"title":"GOAL_SOUND_VOLUME_ATTRIBUTE​","type":1,"pageTitle":"soundInitializerUtil","url":"/libraries/api/soundInitializerUtil#GOAL_SOUND_VOLUME_ATTRIBUTE","content":"Constant &lt;/&gt; soundInitializerUtil.GOAL_SOUND_VOLUME_ATTRIBUTE: &quot;GoalSoundVolume&quot;  Not Accessible Constant, not accesible within soundInitializerUtil.  ","version":null,"tagName":"h3"},{"title":"DEFAULT_SOUND_VOLUME_LERP_IN_ALPHA​","type":1,"pageTitle":"soundInitializerUtil","url":"/libraries/api/soundInitializerUtil#DEFAULT_SOUND_VOLUME_LERP_IN_ALPHA","content":"Constant &lt;/&gt; soundInitializerUtil.DEFAULT_SOUND_VOLUME_LERP_IN_ALPHA: 4  Not Accessible Constant, not accesible within soundInitializerUtil.  ","version":null,"tagName":"h3"},{"title":"DEFAULT_SOUND_VOLUME_LERP_OUT_ALPHA​","type":1,"pageTitle":"soundInitializerUtil","url":"/libraries/api/soundInitializerUtil#DEFAULT_SOUND_VOLUME_LERP_OUT_ALPHA","content":"Constant &lt;/&gt; soundInitializerUtil.DEFAULT_SOUND_VOLUME_LERP_OUT_ALPHA: 4  Not Accessible Constant, not accesible within soundInitializerUtil. ","version":null,"tagName":"h3"},{"title":"Functions​","type":1,"pageTitle":"soundInitializerUtil","url":"/libraries/api/soundInitializerUtil#functions","content":" ","version":null,"tagName":"h2"},{"title":"initForBasicFadingInAndOut​","type":1,"pageTitle":"soundInitializerUtil","url":"/libraries/api/soundInitializerUtil#initForBasicFadingInAndOut","content":"&lt;/&gt; soundInitializerUtil.initForBasicFadingInAndOut( sound: Sound , data: { goalSoundVolumeIn: number, goalSoundVolumeOut: number, lerpInAlpha: number?, lerpOutAlpha: number?, } ) → () Initializes the given sound for basic fading in and fading out. If lerpInAlpha and lerpOutAlpha are not specified, they'll default to soundInitializerUtil.DEFAULT_SOUND_VOLUME_LERP_IN_ALPHA. ","version":null,"tagName":"h3"},{"title":"soundUtil","type":0,"sectionRef":"#","url":"/libraries/api/soundUtil","content":"","keywords":"","version":null},{"title":"Functions​","type":1,"pageTitle":"soundUtil","url":"/libraries/api/soundUtil#functions","content":" ","version":null,"tagName":"h2"},{"title":"playSoundCloneAndCleanup​","type":1,"pageTitle":"soundUtil","url":"/libraries/api/soundUtil#playSoundCloneAndCleanup","content":"&lt;/&gt; soundUtil.playSoundCloneAndCleanup(sound: Sound ) → Sound  Plays a cloned version of the sound and destroys it when it has ended.  ","version":null,"tagName":"h3"},{"title":"stopAll​","type":1,"pageTitle":"soundUtil","url":"/libraries/api/soundUtil#stopAll","content":"&lt;/&gt; soundUtil.stopAll() → () Stops all playing registered ounds via soundUtil.stopSound.  ","version":null,"tagName":"h3"},{"title":"playSound​","type":1,"pageTitle":"soundUtil","url":"/libraries/api/soundUtil#playSound","content":"&lt;/&gt; soundUtil.playSound(sound: Sound ) → () Plays the given sound instance, if the sound instance has a heartbeat callback registered for it, then the sound instance will not be played by this method. soundUtil.registerSoundHeartbeatCallback(someSound, function(sound, deltaTime) if not sound.Playing then sound.Volume = 0 sound:Play() end -- Lerp the volume to 1: sound.Volume += (2 - sound.Volume) * deltaTime end) soundUtil.playSound(someSound)   ","version":null,"tagName":"h3"},{"title":"playSoundIn3DOnce​","type":1,"pageTitle":"soundUtil","url":"/libraries/api/soundUtil#playSoundIn3DOnce","content":"&lt;/&gt; soundUtil.playSoundIn3DOnce( sound: Sound , positionOrBasePart: Vector3 | BasePart ) → () Plays the given sound at the specified given 3D position or instance. If the sound instance has a heartbeat callback registered for it, then the sound instance will not be played by this method. Once the sound has ended, it'll be destroyed. -- Usecase: lightning bolt sounds! local lightningBoltSound = ... local generatedLightningBoltModel = ... soundUtil.playSound3D(lightningBoltSound, generatedLightningBoltModel.PrimaryPart) NOTE Ideally you should always generally pass in a cloned version of the sound instance so you can reuse it. -- BAD: soundUtil.playSoundIn3DOnce(someStorage.someRandomSound, workspace.Baseplate) soundUtil.playSoundIn3DOnce(someStorage.someRandomSound, workspace.ZombiePart) -- PANIC: `someStorage.someRandomSound` does not exist anymore! -- GOOD: oundUtil.playSoundIn3DOnce(someStorage.someRandomSound:Clone(), workspace.Baseplate) soundUtil.playSoundIn3DOnce(someStorage.someRandomSound:Clone(), workspace.ZombiePart)   ","version":null,"tagName":"h3"},{"title":"stopSound​","type":1,"pageTitle":"soundUtil","url":"/libraries/api/soundUtil#stopSound","content":"&lt;/&gt; soundUtil.stopSound(sound: Sound ) → () Stops the given sound instance.  ","version":null,"tagName":"h3"},{"title":"registerSoundCleanupCallback​","type":1,"pageTitle":"soundUtil","url":"/libraries/api/soundUtil#registerSoundCleanupCallback","content":"&lt;/&gt; soundUtil.registerSoundCleanupCallback( sound: Sound , cleanupPredicate: (( sound: Sound , deltaTime: number ) → boolean)? ) → () Registers the given callback as a cleanup callback for the given sound instance. The callback will be called every Heartbeat when the sound is stopped via soundUtil.stopSound, for as long as it doesn't return false (to complete cleanup). local someSound = ... soundUtil.registerSoundCleanupCallback(someSound, function(someSound, deltaTime) -- Lerp the volume to 0: someSound.Volume += (0 - someSound.Volume) * deltaTime if someSound.Volume &lt; 1e-3 then -- We've fully lerped the volume to 0, let's stop the sound and finish -- up cleanup! someSound:Stop() return false end return true end) soundUtil.playSound(someSound) task.wait(2) someSoundUtil.stopSound(someSound) NOTE The cleanupPredicate will no longer run if the same sound instance is suddenly played again.  ","version":null,"tagName":"h3"},{"title":"registerSoundHeartbeatCallback​","type":1,"pageTitle":"soundUtil","url":"/libraries/api/soundUtil#registerSoundHeartbeatCallback","content":"&lt;/&gt; soundUtil.registerSoundHeartbeatCallback( sound: Sound , heartbeatCallback: ( sound: Sound , deltaTime: number ) → () ) → () Registers the given callback as a heartbeat callback for the given sound instance. It will be called every Heartbeat for as long as the sound is playing (sound will be in &quot;playing&quot; state if it has been played by soundUtil.playSound and has not finished / stopped yet). soundUtil.registerSoundHeartbeatCallback(someSound, function(sound, deltaTime) if not sound.Playing then sound.Volume = 0 sound:Play() end -- Lerp the volume to 2: sound.Volume += (2 - sound.Volume) * deltaTime end) soundUtil.playSound(someSound)  ","version":null,"tagName":"h3"},{"title":"serializerUtil","type":0,"sectionRef":"#","url":"/libraries/api/serializerUtil","content":"","keywords":"","version":null},{"title":"Types​","type":1,"pageTitle":"serializerUtil","url":"/libraries/api/serializerUtil#types","content":" ","version":null,"tagName":"h2"},{"title":"ClassDataType​","type":1,"pageTitle":"serializerUtil","url":"/libraries/api/serializerUtil#ClassDataType","content":"&lt;/&gt; type ClassDataType = { valueType: any, serializer: ( value: any, intermediateSerializedData: {} ) → (), deserializer: (serializedData: {}) → (), }  ","version":null,"tagName":"h3"},{"title":"Properties​","type":1,"pageTitle":"serializerUtil","url":"/libraries/api/serializerUtil#properties","content":" ","version":null,"tagName":"h2"},{"title":"customValueType​","type":1,"pageTitle":"serializerUtil","url":"/libraries/api/serializerUtil#customValueType","content":"&lt;/&gt; serializerUtil.customValueType: &quot;serDesCustomValueType&quot; A constant to be used as a key in tables, to represent some type which this utility can easily know about when serializing and deserializing values. local spmeTable = { -- Allow the serializer utility module to know the &quot;type&quot; of this table [serializerUtil.customValueType] = &quot;uniqueType&quot; }  ","version":null,"tagName":"h3"},{"title":"Functions​","type":1,"pageTitle":"serializerUtil","url":"/libraries/api/serializerUtil#functions","content":" ","version":null,"tagName":"h2"},{"title":"serialize​","type":1,"pageTitle":"serializerUtil","url":"/libraries/api/serializerUtil#serialize","content":"&lt;/&gt; serializerUtil.serialize(value: any) → () Serializes the given vale, if it can be serialized. If it can't be serialized, then the value it self is returned. local serializedValue = serializerUtil.serializer(150) print(serializedValue) --&gt; 150 (can't serialize a number!) local serializedValue = serializerUtil.serializer(CFrame.new(5,5,5)) print(serializedValue) --&gt; {...} (serialized data)   ","version":null,"tagName":"h3"},{"title":"deserialize​","type":1,"pageTitle":"serializerUtil","url":"/libraries/api/serializerUtil#deserialize","content":"&lt;/&gt; serializerUtil.deserialize(serializedData: any) → () Deserializes the given serialized value, if it can be deserialized. If it can't be deserialized, then the value it self is returned. local serializedValue = serializerUtil.serializer(CFrame.new(5,5,5)) print(serializerUtil.deserialize(serializedValue)) --&gt; CFrame (5,5,5) print(serializerUtil.deserialize(15)) --&gt; 15 (Can't deserialize a non-serialized value)   ","version":null,"tagName":"h3"},{"title":"addClassDataType​","type":1,"pageTitle":"serializerUtil","url":"/libraries/api/serializerUtil#addClassDataType","content":"&lt;/&gt; serializerUtil.addClassDataType(classDataType: ClassDataType) → () Adds a class data type to the serializer. A class data type (in the context of this utility) is simply an object which you can use to add your own custom serializers and deserializers. -- In this project X, we have a funny which we would like to serialize -- and deserialize according to how our game is structured; local someUniqueTable = { [serializerUtil.customValueType] = &quot;TheUniqueTable&quot; } serializerUtil.addClassDataType({ valueType = &quot;TheUniqueTable&quot;, serializer = { run = function(uniqueTable, intermediateSerializedData) intermediateSerializedData.component = {1, 2, 3, 4, 5, 6} end, }, deserializer = { run = function(serializedUniqueTable) return serializedUniqueTable.component end, }, }) local serializedTable = serializerUtil.serialize(someUniqueTable) print(serializerUtil.deserialize(serializedTable)) --&gt; {1, 2, 3, 4, 5, 6} Override default data types Currently this utility supports a lot of data types to serialize and serialize - however you can override them too with your own serializers and deserializers for them, for e.g: -- Let's just override the serializer and deserializer for the `Vector3` data type -- in favour of our own: serializerUtil.addClassDataType({ valueType = &quot;Vector3&quot;, serializer = { run = function(vector3, intermediateSerializedData) intermediateSerializedData.components = {vector3.X, vector3.Y, vector3.Z} end, }, deserializer = { run = function(serializedVector3) return Vector3.new(table.unpack(serializedVector3.components)) end, }, }) This gives you flexibility to append your own serializer and deserializer for specific data types as per your game's need!  ","version":null,"tagName":"h3"},{"title":"addClassDataTypes​","type":1,"pageTitle":"serializerUtil","url":"/libraries/api/serializerUtil#addClassDataTypes","content":"&lt;/&gt; serializerUtil.addClassDataTypes(classDataTypes: {ClassDataType}) → () Shorthand for adding multiple class data types in 1 go. serializerUtil.addClass is called for every class data type in classDataTypes. local classDataTypes = { { valueType = &quot;Vector3&quot;, serializer = { run = function(vector3, intermediateSerializedData) intermediateSerializedData.components = {vector3.X, vector3.Y, vector.Z} end, }, deserializer = { run = function(serializedVector3) return Vector3.new(table.unpack(serializedVector3.components)) end, }, }, { valueType = &quot;Vector2&quot;, serializer = { run = function(vector2, intermediateSerializedData) intermediateSerializedData.components = {vector2.X, vector2.Y} end, }, deserializer = { run = function(serializedVector2) return Vector2.new(table.unpack(serializedVector2.components)) end, }, } } serializerUtil.addClassDataTypes(classDataTypes)   ","version":null,"tagName":"h3"},{"title":"serializeTableDeep​","type":1,"pageTitle":"serializerUtil","url":"/libraries/api/serializerUtil#serializeTableDeep","content":"&lt;/&gt; serializerUtil.serializeTableDeep(deserializedTable: {[any]: any}) → () Deep serializes all keys and values in the given table via serializerUtil.serialize. local tabl = {bo = Enum.Keycode.A} local serializedTable = serializerUtil.serializeTableDeep(tabl) print(serializedTable) --&gt; {bo: {...}} (serialized)   ","version":null,"tagName":"h3"},{"title":"deserializeTableDeep​","type":1,"pageTitle":"serializerUtil","url":"/libraries/api/serializerUtil#deserializeTableDeep","content":"&lt;/&gt; serializerUtil.deserializeTableDeep(serializedTable: {[any]: any}) → () Deep - deserializes all keys and values in the given table via serializerUtil.deserialize. local tabl = {bo = Enum.Keycode.A} local serializedTable = serializerUtil.serializeTableDeep(tabl) print(serializerUtil.deserializeTableDeep(serializedTable)) --&gt; {bo: Enum.Keycode.A} (deserialized)  ","version":null,"tagName":"h3"},{"title":"stringUtil","type":0,"sectionRef":"#","url":"/libraries/api/stringUtil","content":"","keywords":"","version":null},{"title":"Functions​","type":1,"pageTitle":"stringUtil","url":"/libraries/api/stringUtil#functions","content":" ","version":null,"tagName":"h2"},{"title":"formatLongString​","type":1,"pageTitle":"stringUtil","url":"/libraries/api/stringUtil#formatLongString","content":"&lt;/&gt; stringUtil.formatLongString(string: string) → string Returns a formatted version of the given string (essentially just add in hiphens). print(stringUtil.formatLongString(&quot;jail in the break&quot;)) --&gt; &quot;jail-in-the-break&quot;  ","version":null,"tagName":"h3"},{"title":"timeFormatUtil","type":0,"sectionRef":"#","url":"/libraries/api/timeFormatUtil","content":"","keywords":"","version":null},{"title":"Functions​","type":1,"pageTitle":"timeFormatUtil","url":"/libraries/api/timeFormatUtil#functions","content":" ","version":null,"tagName":"h2"},{"title":"formatTimeTo24hFormat​","type":1,"pageTitle":"timeFormatUtil","url":"/libraries/api/timeFormatUtil#formatTimeTo24hFormat","content":"&lt;/&gt; timeFormatUtil.formatTimeTo24hFormat(timeString: string) → string Formats the given timeString in 12h format to 24h format. print(timeUtil.formatTimeTo24hFormat(&quot;11:56 PM&quot;)) --&gt; &quot;23:56&quot;   ","version":null,"tagName":"h3"},{"title":"formatTimeTo12hFormat​","type":1,"pageTitle":"timeFormatUtil","url":"/libraries/api/timeFormatUtil#formatTimeTo12hFormat","content":"&lt;/&gt; timeFormatUtil.formatTimeTo12hFormat(timeString: string) → string Formats the given timeString in 24h format to 12h format. print(timeUtil.formatTimeTo12hFormat(&quot;00:41&quot;)) --&gt; &quot;12:41&quot; AM  ","version":null,"tagName":"h3"},{"title":"textServiceUtil","type":0,"sectionRef":"#","url":"/libraries/api/textServiceUtil","content":"","keywords":"","version":null},{"title":"Functions​","type":1,"pageTitle":"textServiceUtil","url":"/libraries/api/textServiceUtil#functions","content":" ","version":null,"tagName":"h2"},{"title":"filterStringForBroadcastPromise​","type":1,"pageTitle":"textServiceUtil","url":"/libraries/api/textServiceUtil#filterStringForBroadcastPromise","content":"&lt;/&gt; textServiceUtil.filterStringForBroadcastPromise( string: string, playerUserId: string, textFilterContext: Enum.TextFilterContext ) → Promise&lt;string&gt; Returns a promise which is resolved with the filtered string, to be displayed to all users.  ","version":null,"tagName":"h3"},{"title":"filterStringForUserPromise​","type":1,"pageTitle":"textServiceUtil","url":"/libraries/api/textServiceUtil#filterStringForUserPromise","content":"&lt;/&gt; textServiceUtil.filterStringForUserPromise( string: string, playerUserId: string, textFilterContext: Enum.TextFilterContext ) → Promise&lt;string&gt; Returns a promise which is resolved with the given string filtered in a manner appropriate for the passed user.  ","version":null,"tagName":"h3"},{"title":"filterStringForUserChatPromise​","type":1,"pageTitle":"textServiceUtil","url":"/libraries/api/textServiceUtil#filterStringForUserChatPromise","content":"&lt;/&gt; textServiceUtil.filterStringForUserChatPromise( string: string, playerUserId: string, textFilterContext: Enum.TextFilterContext ) → Promise&lt;string&gt; Returns a promise which is resolved with the string filtered in the least restrictive manner appropriate for the given user.  ","version":null,"tagName":"h3"},{"title":"familyInfoPromise​","type":1,"pageTitle":"textServiceUtil","url":"/libraries/api/textServiceUtil#familyInfoPromise","content":"&lt;/&gt; textServiceUtil.familyInfoPromise(assetId: string) → Promise&lt;{FaceInfo: FaceInfo}&gt; Wraps TextService:GetFamilyInfoAsync into a promise.  ","version":null,"tagName":"h3"},{"title":"textSizeOffsetPromise​","type":1,"pageTitle":"textServiceUtil","url":"/libraries/api/textServiceUtil#textSizeOffsetPromise","content":"&lt;/&gt; textServiceUtil.textSizeOffsetPromise( fontSize: number, font: Enum.Font ) → Promise&lt;Vector2 &gt; Wraps TextService:GetTextSizeOffsetAsync into a promise.  ","version":null,"tagName":"h3"},{"title":"textBoundsPromise​","type":1,"pageTitle":"textServiceUtil","url":"/libraries/api/textServiceUtil#textBoundsPromise","content":"&lt;/&gt; textServiceUtil.textBoundsPromise(params: GetTextBoundsParams ) → Promise&lt;Vector2 &gt; Wraps TextService:GetTextBoundsAsync into a promise.  ","version":null,"tagName":"h3"},{"title":"filterAndTranslateStringPromise​","type":1,"pageTitle":"textServiceUtil","url":"/libraries/api/textServiceUtil#filterAndTranslateStringPromise","content":"&lt;/&gt; textServiceUtil.filterAndTranslateStringPromise( stringToFilter: string, fromUserId: number, targetLocales: {}, textContext: Enum.TextFilterContext ) → Promise&lt;TextFilterTranslatedResult &gt; Wraps TextService:FilterAndTranslateStringAsync into a promise. ","version":null,"tagName":"h3"},{"title":"RemoteProperty","type":0,"sectionRef":"#","url":"/libraries/api/RemoteProperty","content":"","keywords":"","version":null},{"title":"Types​","type":1,"pageTitle":"RemoteProperty","url":"/libraries/api/RemoteProperty#types","content":" ","version":null,"tagName":"h2"},{"title":"DefaultRemotePropertyConfig​","type":1,"pageTitle":"RemoteProperty","url":"/libraries/api/RemoteProperty#DefaultRemotePropertyConfig","content":"&lt;/&gt; interface DefaultRemotePropertyConfig { automaticArgumentSerializationAndDeserializationEnabled: true }   ","version":null,"tagName":"h3"},{"title":"DefaultRemotePropertyMiddleware​","type":1,"pageTitle":"RemoteProperty","url":"/libraries/api/RemoteProperty#DefaultRemotePropertyMiddleware","content":"&lt;/&gt; interface DefaultRemotePropertyMiddleware { clientSet: {...} clientGet: {} } By default, clientSet contains a function which always returns [RejectClientSetRequest], in order to reject the client's request of setting a value for themselves in the remote property, as this is a security risk, if by default, this behavior is allowed. Additionally, a warn is also produced in the output to let you know of this. So in order to allow clients to request the server to set their value, then you must define a middleware where clientSet contains at least 1 function, for e.g; local remoteProperty = RemoteProperty.new({ clientSet = { function(_, _, valueFromClient) return valueFromClient end } })   ","version":null,"tagName":"h3"},{"title":"RemotePropertyConfig​","type":1,"pageTitle":"RemoteProperty","url":"/libraries/api/RemoteProperty#RemotePropertyConfig","content":"&lt;/&gt; interface RemotePropertyConfig { automaticArgumentSerializationAndDeserializationEnabled: boolean-- determines whether or not values sent to clients by the remote signal be internally serialized/deserialized or not. } automaticArgumentSerializationAndDeserializationEnabled -&gt; true Arguments and values sent across the network by the remote property will be automatically serialized and deserialized respectively, with the help of an internal library, i.e serializerUtil. Serialization and deserialization limitations! While the serializer utility used to accomplish this supports a variety of data types, do keep in mind that not all data types can be supported on the go for serialization and deserialization - check the above hyperlink to the serializer utility on how many data types it supports. :::: **See the type of the value of the remote property being `TweenInfo` on the client**: ```lua -- Server local Workspace = game:GetService(&quot;Workspace&quot;) local testNetwork = network.Server.new(&quot;TestNetwork&quot;) local remoteProperty = network.Server.RemoteProperty.new(TweenInfo.new()) testNetwork:append(&quot;remoteProperty&quot;, remoteProperty) testNetwork:dispatch(Workspace) -- Client local Workspace = game:GetService(&quot;Workspace&quot;) local testNetwork = network.client.fromParent(&quot;TestNetwork&quot;, Workspace):expect() print(typeof(testNetwork.remoteProperty:get())) --&gt; &quot;TweenInfo&quot; ``` automaticArgumentSerializationAndDeserializationEnabled -&gt; false Arguments and values sent across the network will not be internally serialized and deserialized. Using the same example as above: See the type of the value of the remote property being table on the client instead of TweenInfo: -- Server local Workspace = game:GetService(&quot;Workspace&quot;) local testNetwork = network.Server.new(&quot;TestNetwork&quot;) local remoteProperty = network.Server.RemoteProperty.new(TweenInfo.new()) testNetwork:append(&quot;remoteProperty&quot;, remoteProperty) testNetwork:dispatch(Workspace) -- Client local Workspace = game:GetService(&quot;Workspace&quot;) local testNetwork = network.client.fromParent(&quot;TestNetwork&quot;, Workspace):expect() print(typeof(testNetwork.remoteProperty:get())) --&gt; &quot;table&quot;   ","version":null,"tagName":"h3"},{"title":"RemoteProperty​","type":1,"pageTitle":"RemoteProperty","url":"/libraries/api/RemoteProperty#RemoteProperty","content":"&lt;/&gt; type RemoteProperty = RemoteProperty   ","version":null,"tagName":"h3"},{"title":"RemoteProperty​","type":1,"pageTitle":"RemoteProperty","url":"/libraries/api/RemoteProperty#RemoteProperty","content":"&lt;/&gt; type RemoteProperty = RemoteProperty   ","version":null,"tagName":"h3"},{"title":"Observer​","type":1,"pageTitle":"RemoteProperty","url":"/libraries/api/RemoteProperty#Observer","content":"&lt;/&gt; type Observer = ( newValue: T, oldValue: T? ) → ()   ","version":null,"tagName":"h3"},{"title":"RemotePropertyMiddleware​","type":1,"pageTitle":"RemoteProperty","url":"/libraries/api/RemoteProperty#RemotePropertyMiddleware","content":"&lt;/&gt; interface RemotePropertyMiddleware { clientSet: {( client: Player , value: any ) → any}?, clientGet: {(client: Player ) → any}?, }  Yielding in middleware callbacks is not allowed Middleware callbacks aren't allowed to yield. If they do so, their thread will be closed viacoroutine.close and an error will be outputted in the console. Yielding, (especially in network-related code) results in weird bugs and behavior which can be hard to track down! clientSet Callbacks in clientSet are called whenever the client tries to set the value of the remote property for themselves specifically. The first argument passed to each callback is a reference to the remote property itself, followed by the client object and the value the client is trying to set. local clientSetCallbacks = { function (remoteProperty, client, value) print(RemoteProperty.is(remoteProperty)) --&gt; true print(client:IsA(&quot;Player&quot;)) --&gt; true end } --- More control A clientSet callback can return a non-nil value, which will then be set as the value for the client in the remote property. This is useful in cases where you want to have more control over what values the client can set for themseves in the remote property. For e.g: -- Server local Workspace = game:GetService(&quot;Workspace&quot;) local testRemoteProperty = network.Server.RemoteProperty.new(50, { clientSet = {function() return &quot;rickrolled&quot; end} }) local testNetwork = network.Server.new(&quot;TestNetwork&quot;) testNetwork:append(&quot;property&quot;, testRemoteProperty) testNetwork:dispatch(Workspace) -- Client local Workspace = game:GetService(&quot;Workspace&quot;) local testNetwork = network.client.fromParent(&quot;TestNetwork&quot;, Workspace):expect() testNetwork.property:set(1) print(testNetwork.property.onUpdate:Wait()) --&gt; &quot;rickrolled&quot; (This ought to print 1, but our middleware returned a custom value!) You can also return [RejectClientSetRequest] from a clientSet middleware callback, in order to reject the client's request of setting a value for themselves in the remote property. Additionally, if more than 1 callback returns a value, then all those returned values will be packed into an array and then sent back to the client. This is by design - as it isn't ideal to disregard all returned values for just 1. For e.g: -- Server local Workspace = game:GetService(&quot;Workspace&quot;) local testRemoteProperty = network.Server.RemoteProperty.new(50, { clientSet = { function() return &quot;rickrolled&quot; end, function() return &quot;oof&quot; end, function() return &quot;hello&quot; end } }) local testNetwork = network.Server.new(&quot;TestNetwork&quot;) testNetwork:append(&quot;property&quot;, testRemoteProperty) testNetwork:dispatch(Workspace) -- Client local Workspace = game:GetService(&quot;Workspace&quot;) local testNetwork = network.client.fromParent(&quot;TestNetwork&quot;, Workspace):expect() testNetwork.property:set(1) print(testNetwork.property.onUpdate:Wait()) --&gt; {&quot;oofed&quot;, &quot;rickrolled&quot;, &quot;hello&quot;} If any of the clientSet middleware callbacks return [RejectClientSetRequest], then the client's request of setting a value for themselves in the remote property, will be rejected. clientGet Callbacks in clientGet are called whenever the client tries to get the value of the remote property. The first argument passed to each callback is a reference to the remote property itself, which is followed by the client object. local clientGetCallbacks = { function (remoteProperty, client) print(client:IsA(&quot;Player&quot;)) --&gt; true end } --- More control A callback can return a non-nil value, which will then be returned to the client. This is useful in cases where you want to have more control over what values the client can retrieve from the remote property. For e.g: -- Server local Workspace = game:GetService(&quot;Workspace&quot;) local testRemoteProperty = network.Server.RemoteProperty.new(5000, { clientGet = {function() return &quot;rickrolled&quot; end} }) local testNetwork = network.Server.new(&quot;TestNetwork&quot;) testNetwork:append(&quot;property&quot;, testRemoteProperty) testNetwork:dispatch(Workspace) -- Client local Workspace = game:GetService(&quot;Workspace&quot;) local testNetwork = network.client.fromParent(&quot;TestNetwork&quot;, Workspace):expect() print(testNetwork.property:get()) --&gt; &quot;rickrolled&quot; (This ought to print 5000, but our middleware returned a custom value!) Additionally, if more than 1 callback returns a value, then all those returned values will be packed into an array and then sent back to the client. This is by design - as it isn't ideal to disregard all returned values for just 1. For e.g: -- Server local Workspace = game:GetService(&quot;Workspace&quot;) local testRemoteProperty = network.Server.RemoteProperty.new(50, { clientGet = { function() return &quot;rickrolled&quot; end, function() return &quot;oof&quot; end, function() return &quot;hello&quot; end } }) local testNetwork = network.Server.new(&quot;TestNetwork&quot;) testNetwork:append(&quot;property&quot;, testRemoteProperty) testNetwork:dispatch(Workspace) -- Client local Workspace = game:GetService(&quot;Workspace&quot;) local testNetwork = network.client.fromParent(&quot;TestNetwork&quot;, Workspace):expect() print(testNetwork.property:get()) --&gt; {&quot;oofed&quot;, &quot;rickrolled&quot;, &quot;hello&quot;}  ","version":null,"tagName":"h3"},{"title":"Properties​","type":1,"pageTitle":"RemoteProperty","url":"/libraries/api/RemoteProperty#properties","content":" ","version":null,"tagName":"h2"},{"title":"RejectClientSetRequest​","type":1,"pageTitle":"RemoteProperty","url":"/libraries/api/RemoteProperty#RejectClientSetRequest","content":"Read only &lt;/&gt; RemoteProperty.RejectClientSetRequest: &quot;RejectClientSetRequest&quot; A marker that can be passed from a clientSet middleware callback, to reject a client's request of setting some value (for themselves in the remote property).  ","version":null,"tagName":"h3"},{"title":"onUpdate​","type":1,"pageTitle":"RemoteProperty","url":"/libraries/api/RemoteProperty#onUpdate","content":"Read only Signal RemoteProperty Instance &lt;/&gt; RemoteProperty.onUpdate: Signal&lt;newValue: T,oldValue: T?&gt; A signal which is fired whenever the value of the remote property is set to a new one. The signal is only passed the new value as the only argument.  ","version":null,"tagName":"h3"},{"title":"clientValueOnUpdate​","type":1,"pageTitle":"RemoteProperty","url":"/libraries/api/RemoteProperty#clientValueOnUpdate","content":"Read only Signal RemoteProperty Instance &lt;/&gt; RemoteProperty.clientValueOnUpdate: Signal&lt;client: Player, newValue: T,oldValue: T?&gt; A signal which is fired whenever the value of player specifically in the remote property is set to a new one. The signal is passed the player as the first argument, and the new specific value of player set in the remote property, as the second argument. ","version":null,"tagName":"h3"},{"title":"Functions​","type":1,"pageTitle":"RemoteProperty","url":"/libraries/api/RemoteProperty#functions","content":" ","version":null,"tagName":"h2"},{"title":"new​","type":1,"pageTitle":"RemoteProperty","url":"/libraries/api/RemoteProperty#new","content":"&lt;/&gt; RemoteProperty.new( initialValue: T?, middleware: RemotePropertyMiddleware?, remotePropertyConfig: RemotePropertyConfig? ) → RemoteProperty Creates and returns a new remote property with the value of initialValue. If the 2nd parameter middleware is not specified, then it will default to DefaultRemotePropertyMiddleware instead. If the 3rd parameter remotePropertyConfig is not specified, then it will default to DefaultRemotePropertyConfig instead.   ","version":null,"tagName":"h3"},{"title":"is​","type":1,"pageTitle":"RemoteProperty","url":"/libraries/api/RemoteProperty#is","content":"&lt;/&gt; RemoteProperty.is(self: any) → boolean Returns a boolean indicating if self is a remote property or not.  ","version":null,"tagName":"h3"},{"title":"get​","type":1,"pageTitle":"RemoteProperty","url":"/libraries/api/RemoteProperty#get","content":"RemoteProperty instance &lt;/&gt; RemoteProperty:get() → T Returns a shallow copy of the current value set for the remote property.  ","version":null,"tagName":"h3"},{"title":"valuePromise​","type":1,"pageTitle":"RemoteProperty","url":"/libraries/api/RemoteProperty#valuePromise","content":"RemoteProperty instance &lt;/&gt; RemoteProperty:valuePromise(valuePredicate: ( T: any, oldValue: T? ) → boolean) → Promise&lt;T&gt; Returns a promise which is resolved with a non-nil value of the remote property, given that valuePredicate is not passed as an argument. remoteProperty:valuePromise():andThen(function(value) print(value) end) valuePredicate can also be passed, which allows you to filter out values. If it returns exactly true, only then will the promise resolve with the new value. remoteProperty:valuePromise(function(newValue, oldValue) return newValue == 10 and oldValue == 1 end):andThen(function(value) print(value) end) remoteProperty:set(1) remoteProperty:set(10) --&gt; 10   ","version":null,"tagName":"h3"},{"title":"setRateLimitForClientSettingValue​","type":1,"pageTitle":"RemoteProperty","url":"/libraries/api/RemoteProperty#setRateLimitForClientSettingValue","content":"RemoteProperty instance &lt;/&gt; RemoteProperty:setRateLimitForClientSettingValue( client: Player , rateLimit: number ) → () Rate limits the given client setting their own value by rateLimit seconds. NOTE This specific rate limit set for this client will be removed once the client leaves the game. -- Server remoteProperty:setRateLimitForClientSettingValue(client, 30) -- 30 seconds -- Client clientRemoteProperty.onUpdate:Connect(function(newValue) print(newValue) end) -- Spam the setting of value for the client, so we ought for the value of the -- client stored in the remote property (finally) to be `100`, but instead -- it will be `1`, as subsequent calls after the first one will be ignored -- due to the rate limit imposed. for index = 1, 100 do clientRemoteProperty:set(index) end --&gt; 1   ","version":null,"tagName":"h3"},{"title":"setForClients​","type":1,"pageTitle":"RemoteProperty","url":"/libraries/api/RemoteProperty#setForClients","content":"RemoteProperty instance &lt;/&gt; RemoteProperty:setForClients( clients: {Player }, value: T ) → () Calls RemoteProperty:setForClient for all clients in clients.  ","version":null,"tagName":"h3"},{"title":"setForClient​","type":1,"pageTitle":"RemoteProperty","url":"/libraries/api/RemoteProperty#setForClient","content":"RemoteProperty instance &lt;/&gt; RemoteProperty:setForClient( client: Player , value: T ) → () Sets the value of the remote property for client specifically, to value. This client will now no longer be receiving updates of the value of the remote property, and thus will only be receiving updates of their own specific value set in the remote property. NOTE RemoteProperty:removeForClient will be called for the given client whenever they leave the game, so that this value is cleared out for the player, and thus this helps prevent memory leaks. Precaution! Setting the value for client to nil will not remove the client's value - call RemoteProperty:removeForClient to do that. This method will throw an error if you attempt to set a value for the client who are not present anymore in the server (i.e not a descendant of Players) - this is done to avoid memory leaks.   ","version":null,"tagName":"h3"},{"title":"removeForClient​","type":1,"pageTitle":"RemoteProperty","url":"/libraries/api/RemoteProperty#removeForClient","content":"RemoteProperty instance &lt;/&gt; RemoteProperty:removeForClient(client: Player ) → () Removes the value stored for client specifically in the remote property. This client will now be informed of the current value of the remote property and will now no longer be receiving updates of their specific value (that was previously set in the remote property, as it has been removed), instead the client will start receiving updates of the value of the remote property itself.  ","version":null,"tagName":"h3"},{"title":"removeForClients​","type":1,"pageTitle":"RemoteProperty","url":"/libraries/api/RemoteProperty#removeForClients","content":"RemoteProperty instance &lt;/&gt; RemoteProperty:removeForClients(clients: {Player }) → () Iterates through clients and calls RemoteProperty:removeForClient for each client.  ","version":null,"tagName":"h3"},{"title":"clientHasValueSet​","type":1,"pageTitle":"RemoteProperty","url":"/libraries/api/RemoteProperty#clientHasValueSet","content":"RemoteProperty instance &lt;/&gt; RemoteProperty:clientHasValueSet(client: Player ) → boolean Returns a boolean indicating if there is a specific value stored for client in the remote property.  ","version":null,"tagName":"h3"},{"title":"clientValue​","type":1,"pageTitle":"RemoteProperty","url":"/libraries/api/RemoteProperty#clientValue","content":"RemoteProperty instance &lt;/&gt; RemoteProperty:clientValue(client: Player ) → T? Returns a shallow copy of value stored specifically for client in the remote property.  ","version":null,"tagName":"h3"},{"title":"clientValuePromise​","type":1,"pageTitle":"RemoteProperty","url":"/libraries/api/RemoteProperty#clientValuePromise","content":"RemoteProperty instance &lt;/&gt; RemoteProperty:clientValuePromise( client: Player , valuePredicate: ( newValue: T, oldValue: T? ) → boolean ) → Promise&lt;any&gt; Returns a promise which is resolved with a non-nil value of the value stored for the client in the remote property. remoteProperty:clientValuePromise(client):andThen(function(value) print(value) end) valuePredicate (an optional predicate), allows you to filter out values: remoteProperty:clientValuePromise(client, function(newValue, oldValue) print(newValue, oldValue) return oldValue == 1 end):andThen(function(value) print(value) end) remoteProperty:setForClient(client, 1) remoteProperty:setForClient(client, 2) -- Output: -- 1, nil -- 2, 1 -- 2   ","version":null,"tagName":"h3"},{"title":"set​","type":1,"pageTitle":"RemoteProperty","url":"/libraries/api/RemoteProperty#set","content":"RemoteProperty instance &lt;/&gt; RemoteProperty:set(value: T) → () Sets the value of the remote property to value. Clients who have a specific value set will not be informed of this new value of this remote property.  ","version":null,"tagName":"h3"},{"title":"clientValueOnUpdateSignalForClient​","type":1,"pageTitle":"RemoteProperty","url":"/libraries/api/RemoteProperty#clientValueOnUpdateSignalForClient","content":"RemoteProperty instance &lt;/&gt; RemoteProperty:clientValueOnUpdateSignalForClient(client: Player ) → Signal Returns a signal that is fired whenever a value is set for the client, or the client's specific value is updated in the remote property (through RemoteProperty:setForClient). remoteProperty:clientValueOnUpdateSignalForClient(somePlayer):Connect(function(newValue, oldValue) print(newValue, oldValue) end) remoteProperty:setForClient(somePlayer, 1) --&gt; 1, nil   ","version":null,"tagName":"h3"},{"title":"observeClientValue​","type":1,"pageTitle":"RemoteProperty","url":"/libraries/api/RemoteProperty#observeClientValue","content":"RemoteProperty instance &lt;/&gt; RemoteProperty:observeClientValue( client: Player , callback: ( newValue: T, oldValue: T? ) → () ) → Connection Observes the value of the given client stored in the remote property. remoteProperty:observeClientValue(somePlayer, function(newValue, oldValue) print(newValue, oldValue) end) remoteProperty:setForClient(somePlayer, 1) --&gt; nil, nil --&gt; 1, nil   ","version":null,"tagName":"h3"},{"title":"observe​","type":1,"pageTitle":"RemoteProperty","url":"/libraries/api/RemoteProperty#observe","content":"RemoteProperty instance &lt;/&gt; RemoteProperty:observe(callback: ( newValue: T, oldValue: T? ) → ()) → Connection Observes the value of the remote property. local remoteProperty = RemoteProperty.new() remoteProperty:observe(function(newValue, oldValue) print(newValue, oldValue) end) remoteProperty:set(1) --&gt; nil, nil --&gt; 1, nil   ","version":null,"tagName":"h3"},{"title":"observeClientsValue​","type":1,"pageTitle":"RemoteProperty","url":"/libraries/api/RemoteProperty#observeClientsValue","content":"RemoteProperty instance &lt;/&gt; RemoteProperty:observeClientsValue(observer: ( player: Player , newValue: T, oldValue: T? ) → ()) → Connection Observes the values set for clients in the remote property. local remoteProperty = RemoteProperty.new() remoteProperty:observeClientsValue(function(client: Player, newValue, oldValue) end)   ","version":null,"tagName":"h3"},{"title":"destroy​","type":1,"pageTitle":"RemoteProperty","url":"/libraries/api/RemoteProperty#destroy","content":"RemoteProperty instance &lt;/&gt; RemoteProperty:destroy() → () Destroys the remote property and renders it unusable. All clients who have a specific value set for themselves in the remote property will be removed through RemoteProperty:removeForClient. ","version":null,"tagName":"h3"},{"title":"RemoteSignal","type":0,"sectionRef":"#","url":"/libraries/api/RemoteSignal","content":"","keywords":"","version":null},{"title":"Types​","type":1,"pageTitle":"RemoteSignal","url":"/libraries/api/RemoteSignal#types","content":" ","version":null,"tagName":"h2"},{"title":"DefaultRemoteSignalConfig​","type":1,"pageTitle":"RemoteSignal","url":"/libraries/api/RemoteSignal#DefaultRemoteSignalConfig","content":"&lt;/&gt; interface DefaultRemoteSignalConfig { automaticArgumentSerializationAndDeserializationEnabled: true globalRateLimit: 0 useUnreliableRemoteEvent: false }   ","version":null,"tagName":"h3"},{"title":"DefaultRemoteSignalMiddleware​","type":1,"pageTitle":"RemoteSignal","url":"/libraries/api/RemoteSignal#DefaultRemoteSignalMiddleware","content":"&lt;/&gt; interface DefaultRemoteSignalMiddleware { serverEvent: {} }   ","version":null,"tagName":"h3"},{"title":"RemoteSignal​","type":1,"pageTitle":"RemoteSignal","url":"/libraries/api/RemoteSignal#RemoteSignal","content":"&lt;/&gt; type RemoteSignal = RemoteSignal   ","version":null,"tagName":"h3"},{"title":"RemoteSignalConfig​","type":1,"pageTitle":"RemoteSignal","url":"/libraries/api/RemoteSignal#RemoteSignalConfig","content":"&lt;/&gt; interface RemoteSignalConfig { useUnreliableRemoteEvent: boolean-- determines whether or not the remote signal will use UnreliableRemoteEvent or RemoteEvent internally. automaticArgumentSerializationAndDeserializationEnabled: boolean-- determines whether or not values sent to clients by the remote signal be internally serialized/deserialized or not. globalRateLimit: number-- (in seconds) will serve as the global rate limit for all players firing to this RemoteSignal. }  automaticArgumentSerializationAndDeserializationEnabled -&gt; true Arguments and values sent across the network by the remote signal will be automatically serialized and deserialized respectively, with the help of an internal library, i.e serializerUtil. Serialization and deserialization limitations While the serializer utility used to accomplish this supports a variety of data types, do keep in mind that not all data types can be supported on the go for serialization and deserialization - check the above hyperlink to the serializer utility on how many data types it supports. :::: **See the type of the value sent to the client by the remote signal, being `TweenInfo` on the client**: ```lua -- Server local Workspace = game:GetService(&quot;Workspace&quot;) local Players = game:GetService(&quot;Players&quot;) local testNetwork = network.Server.new(&quot;TestNetwork&quot;) local remoteSignal = network.Server.RemoteSignal.new() testNetwork:append(&quot;remoteSignal&quot;, remoteSignal) testNetwork:dispatch(Workspace) remoteSignal:fireClient(Players:GetPlayers()[1] or Players.PlayerAdded:Wait()) -- Client local Workspace = game:GetService(&quot;Workspace&quot;) local testNetwork = network.client.fromParent(&quot;TestNetwork&quot;, Workspace):expect() testNetwork.remoteSignal:connect(function(value) print(typeof(value)) --&gt; &quot;TweenInfo&quot; end) ``` automaticArgumentSerializationAndDeserializationEnabled -&gt; false Arguments and values sent across the network by the remote signal will not be internally serialized and deserialized. Using the same example as above: See the type of the value sent to the client by the remote signal, being TweenInfo on the client: -- Server local Workspace = game:GetService(&quot;Workspace&quot;) local Players = game:GetService(&quot;Players&quot;) local testNetwork = network.Server.new(&quot;TestNetwork&quot;) local remoteSignal = network.Server.RemoteSignal.new() testNetwork:append(&quot;remoteSignal&quot;, remoteSignal) testNetwork:dispatch(Workspace) remoteSignal:fireClient(Players:GetPlayers()[1] or Players.PlayerAdded:Wait()) -- Client local Workspace = game:GetService(&quot;Workspace&quot;) local testNetwork = network.client.fromParent(&quot;TestNetwork&quot;, Workspace):expect() testNetwork.remoteSignal:connect(function(value) print(typeof(value)) --&gt; &quot;table&quot; end)   ","version":null,"tagName":"h3"},{"title":"RemoteSignalMiddleware​","type":1,"pageTitle":"RemoteSignal","url":"/libraries/api/RemoteSignal#RemoteSignalMiddleware","content":"&lt;/&gt; interface RemoteSignalMiddleware { serverEvent: {( remoteSignal: RemoteSignal, client: Player , args: {any} ) → any}?, }  Yielding in middleware callbacks is not allowed Middleware callbacks aren't allowed to yield. If they do so, their thread will be closed viacoroutine.close and an error will be outputted in the console. Yielding, (especially in network-related code) results in weird bugs and behavior which can be hard to track down! serverEvent Callbacks in serverEvent are called whenever the client fires off the remote signal. The first argument passed to each callback is a reference to the remote signal itself, which is followed by the client itself, which is followed by an array of arguments fired by the client. local serverEventCallbacks = { function (remoteSignal, client: Player, arguments) print(RemoteSignal.is(remoteSignal)) --&gt; true print(client:IsA(&quot;Player&quot;)) --&gt; true print(typeof(arguments)) --&gt; &quot;table&quot; end } --- More control If any of the callbacks return an explicit false value, then the remote signal will not be fired. For e.g: -- Server local Workspace = game:GetService(&quot;Workspace&quot;) local testNetwork = network.Server.new(&quot;TestNetwork&quot;) local testRemoteSignal = network.Server.RemoteSignal.new({ serverEvent = {function() return false end} }) testRemoteSignal:connect(function() print(&quot;Fired&quot;) --&gt; never prints end) testNetwork:append(&quot;signal&quot;, testRemoteSignal) testNetwork:dispatch(Workspace) -- Client local Workspace = game:GetService(&quot;Workspace&quot;) local testNetwork = network.client.fromParent(&quot;TestNetwork&quot;, Workspace) print(testNetwork.signal:fireServer()) Additionally, you can modify the arguments table before it is passed to the connected callback, for e.g: -- Server local Workspace = game:GetService(&quot;Workspace&quot;) local testNetwork = network.Server.new(&quot;TestNetwork&quot;) local testRemoteSignal = network.Server.RemoteSignal.new({ serverEvent = { function(_, arguments) arguments[2] = 5 arguments[3] = &quot;test&quot; end } }) testRemoteSignal:connect(function(client, a, b) print(a, b) --&gt; 5, &quot;test&quot; (a and b ought to be 1 and 24 respectively, but they were modified through the middleware) end) testNetwork:append(&quot;signal&quot;, testRemoteSignal) testNetwork:dispatch(Workspace) -- Client local Workspace = game:GetService(&quot;Workspace&quot;) local testNetwork = network.client.fromParent(&quot;Test&quot;, Workspace):expect() print(testNetwork.signal:fireServer(1, 24))  ","version":null,"tagName":"h3"},{"title":"Functions​","type":1,"pageTitle":"RemoteSignal","url":"/libraries/api/RemoteSignal#functions","content":" ","version":null,"tagName":"h2"},{"title":"new​","type":1,"pageTitle":"RemoteSignal","url":"/libraries/api/RemoteSignal#new","content":"&lt;/&gt; RemoteSignal.new( middleware: RemoteSignalMiddleware, remoteSignalConfig: RemoteSignalConfig ) → RemoteSignal Creates and returns a new remote signal. If the 2nd parameter middleware is not specified, then it will default to DefaultRemoteSignalMiddleware instead. If the 3rd parameter remoteSignalConfig is not specified, then it will default to DefaultRemoteSignalConfig instead.  ","version":null,"tagName":"h3"},{"title":"is​","type":1,"pageTitle":"RemoteSignal","url":"/libraries/api/RemoteSignal#is","content":"&lt;/&gt; RemoteSignal.is(self: any) → boolean Returns a boolean indicating if self is a remote signal or not.  ","version":null,"tagName":"h3"},{"title":"connect​","type":1,"pageTitle":"RemoteSignal","url":"/libraries/api/RemoteSignal#connect","content":"RemoteSignal instance &lt;/&gt; RemoteSignal:connect(callback: ( client: Player , ...any ) → ()) → RBXScriptConnection  Connects callback to the remote signal so that it is called whenever the client fires the remote signal. Additionally, callback will be passed all the arguments sent by the client. -- Server remoteSignal:connect(function(client, a, b) print(a + b) --&gt; 3 end) -- Client clientRemoteSignal:fireServer(1, 2) Possible Rate Limit It is possible that the client firing to this remote signal is intercepted by a rate-limit, either due to the global rate limit imposed on this remote signal for all players, or a specific-rate limit imposed for this client. local remoteSignal = RemoteSignal.new(nil, 10) -- global rate limit of 10 seconds -- Server remoteSignal:connect(function() print(&quot;Fired&quot;) end) --&gt; &quot;Fired&quot; -- Only printed once! -- Client for _ = 1, 5 do clientRemoteSignal:fireServer() end If you do not desire this behavior, you can do the following: Set a specific rate limit for the client through RemoteSignal:setClientSpecificRateLimit or RemoteSignal:setClientSpecificRateLimits, to 0. Not impose a global rate limit to the remote signal (See RemoteSignalConfig for more info).  ","version":null,"tagName":"h3"},{"title":"once​","type":1,"pageTitle":"RemoteSignal","url":"/libraries/api/RemoteSignal#once","content":"RemoteSignal instance &lt;/&gt; RemoteSignal:once(callback: ( client: Player , ...any ) → ()) → RBXScriptConnection  Works almost exactly the same as RemoteSignal:connect, except the connection returned is disconnected immediately upon callback being called.  ","version":null,"tagName":"h3"},{"title":"wait​","type":1,"pageTitle":"RemoteSignal","url":"/libraries/api/RemoteSignal#wait","content":"RemoteSignal instance &lt;/&gt; RemoteSignal:wait() → ...any Connects callback to the remote signal so that it is called whenever the remote signal is fired off by the client successfully. Additionally, callback will be passed all the arguments sent by the client. -- Server remoteSignal:connect(function(client, a, b) print(a + b) --&gt; 3 end) -- Client clientRemoteSignal:fireServer(1, 2)   ","version":null,"tagName":"h3"},{"title":"wait​","type":1,"pageTitle":"RemoteSignal","url":"/libraries/api/RemoteSignal#wait","content":"RemoteSignal instance &lt;/&gt; RemoteSignal:wait() → ...any Yields the current thread until the remote signal is successfully fired off by the client. The yielded thread is resumed once the client fires some data to the server successfully, with the arguments sent by the client. -- Server local client, a, b = remoteSignal:wait() print(a + b) --&gt; 3 -- Client clientRemoteSignal:fireServer(1, 2)   ","version":null,"tagName":"h3"},{"title":"setGlobalRateLimit​","type":1,"pageTitle":"RemoteSignal","url":"/libraries/api/RemoteSignal#setGlobalRateLimit","content":"RemoteSignal instance &lt;/&gt; RemoteSignal:setGlobalRateLimit(globalRateLimit: number) → () Sets the given remote signal's global rate limit - clients firing to this remote signal will be ignored if the time (in seconds) between their last fire and the new fire is less than globalRateLimit. -- Server remoteSignal:setGlobalRateLimit(10) -- 10 seconds remoteSignal:Connect(function(client) print(&quot;2&quot;) end) --&gt; &quot;2&quot; -- Client for _ = 1, 100 do clientRemoteSignal:Fire() -- Only 1 fire call will be respected by the server, rest will be ignored! end NOTE Clients who have a specific rate limit set through RemoteSignal:setClientSpecificRateLimit will not be affected by this global rate limit.  ","version":null,"tagName":"h3"},{"title":"globalRateLimit​","type":1,"pageTitle":"RemoteSignal","url":"/libraries/api/RemoteSignal#globalRateLimit","content":"RemoteSignal instance &lt;/&gt; RemoteSignal:globalRateLimit() → number Returns the remote signal's global rate limit. Defaults to 0.  ","version":null,"tagName":"h3"},{"title":"clientSpecificRateLimit​","type":1,"pageTitle":"RemoteSignal","url":"/libraries/api/RemoteSignal#clientSpecificRateLimit","content":"RemoteSignal instance &lt;/&gt; RemoteSignal:clientSpecificRateLimit(client: Player ) → number? Returns the given client's rate liimt set specifically on them.  ","version":null,"tagName":"h3"},{"title":"setClientSpecificRateLimit​","type":1,"pageTitle":"RemoteSignal","url":"/libraries/api/RemoteSignal#setClientSpecificRateLimit","content":"RemoteSignal instance &lt;/&gt; RemoteSignal:setClientSpecificRateLimit( client: Player , rateLimit: number ) → () Sets a specific rate limit for the given client. NOTE This specific rate limit set for this client will be removed once the client leaves the game.  ","version":null,"tagName":"h3"},{"title":"setClientSpecificRateLimits​","type":1,"pageTitle":"RemoteSignal","url":"/libraries/api/RemoteSignal#setClientSpecificRateLimits","content":"RemoteSignal instance &lt;/&gt; RemoteSignal:setClientSpecificRateLimits( clients: {Player }, rateLimit: number ) → () Wrapper for RemoteSignal:setClientSpecificRateLimit for an array of clients.  ","version":null,"tagName":"h3"},{"title":"removeClientSpecificRateLimit​","type":1,"pageTitle":"RemoteSignal","url":"/libraries/api/RemoteSignal#removeClientSpecificRateLimit","content":"RemoteSignal instance &lt;/&gt; RemoteSignal:removeClientSpecificRateLimit(client: Player ) → () Removes the specific rate limit set for the given client through RemoteSignal:setClientSpecificRateLimit. Global Rate Limit If the remote signal has a global rate limit set (see RemoteSignal.new's second parameter), then the given client will now be subject to that global rate limit. If you do not desire this behavior and want the rate limit imposation completely lifted for the client, you should set a specific rate limit of 0 for the given client (through RemoteSignal:setClientSpecificRateLimit).  ","version":null,"tagName":"h3"},{"title":"removeClientSpecificRateLimits​","type":1,"pageTitle":"RemoteSignal","url":"/libraries/api/RemoteSignal#removeClientSpecificRateLimits","content":"RemoteSignal instance &lt;/&gt; RemoteSignal:removeClientSpecificRateLimits(clients: {Player }) → () Wrapper for RemoteSignal:removeClientSpecificRateLimit for an array of clients.  ","version":null,"tagName":"h3"},{"title":"fireClient​","type":1,"pageTitle":"RemoteSignal","url":"/libraries/api/RemoteSignal#fireClient","content":"RemoteSignal instance &lt;/&gt; RemoteSignal:fireClient( client: Player , ...: any ) → () Fires the given arguments to client.  ","version":null,"tagName":"h3"},{"title":"fireAllClients​","type":1,"pageTitle":"RemoteSignal","url":"/libraries/api/RemoteSignal#fireAllClients","content":"RemoteSignal instance &lt;/&gt; RemoteSignal:fireAllClients(...: any) → () Calls RemoteSignal:fireClient for every player in the game, passing in the given arguments along.  ","version":null,"tagName":"h3"},{"title":"fireClients​","type":1,"pageTitle":"RemoteSignal","url":"/libraries/api/RemoteSignal#fireClients","content":"RemoteSignal instance &lt;/&gt; RemoteSignal:fireClients( clients: {Player }, ...: any ) → () Iterates through clients and calls RemoteSignal:fireClient for each client, passing in the given arguments along.  ","version":null,"tagName":"h3"},{"title":"fireAllClientsExcept​","type":1,"pageTitle":"RemoteSignal","url":"/libraries/api/RemoteSignal#fireAllClientsExcept","content":"RemoteSignal instance &lt;/&gt; RemoteSignal:fireAllClientsExcept( client: Player , ...: any ) → () Calls RemoteSignal:fireClient for every player in the game, except for client, passing in the given arguments along.  ","version":null,"tagName":"h3"},{"title":"destroy​","type":1,"pageTitle":"RemoteSignal","url":"/libraries/api/RemoteSignal#destroy","content":"RemoteSignal instance &lt;/&gt; RemoteSignal:destroy() → () Destroys the remote signal and renders it unusable. ","version":null,"tagName":"h3"},{"title":"toolUtil","type":0,"sectionRef":"#","url":"/libraries/api/toolUtil","content":"","keywords":"","version":null},{"title":"Functions​","type":1,"pageTitle":"toolUtil","url":"/libraries/api/toolUtil#functions","content":" ","version":null,"tagName":"h2"},{"title":"toolOwner​","type":1,"pageTitle":"toolUtil","url":"/libraries/api/toolUtil#toolOwner","content":"&lt;/&gt; toolUtil.toolOwner(tool: Tool ) → Player?  Attempts to returns the owner of the given tool, if found.  ","version":null,"tagName":"h3"},{"title":"tryPlaceToolInBackpackAndStarterGear​","type":1,"pageTitle":"toolUtil","url":"/libraries/api/toolUtil#tryPlaceToolInBackpackAndStarterGear","content":"&lt;/&gt; toolUtil.tryPlaceToolInBackpackAndStarterGear( player: Player , tool: Tool ) → () Places the given tool in the given player's backpack and a cloned variant of it in player.StarterGear.  ","version":null,"tagName":"h3"},{"title":"tryPlaceToolInBackpackAndEquip​","type":1,"pageTitle":"toolUtil","url":"/libraries/api/toolUtil#tryPlaceToolInBackpackAndEquip","content":"&lt;/&gt; toolUtil.tryPlaceToolInBackpackAndEquip( player: Player , tool: Tool ) → () Places the given tool in the given player's backpack and tries to equips it on the humanoid.  ","version":null,"tagName":"h3"},{"title":"mappedPlayerToolCount​","type":1,"pageTitle":"toolUtil","url":"/libraries/api/toolUtil#mappedPlayerToolCount","content":"&lt;/&gt; toolUtil.mappedPlayerToolCount( player: Player , predicate: (tool: Tool ) → boolean ) → () Returns the player tool count. predicate is called on every tool owned by the given player, and each time it returns true, the tool count is incremented by 1.  ","version":null,"tagName":"h3"},{"title":"playerTools​","type":1,"pageTitle":"toolUtil","url":"/libraries/api/toolUtil#playerTools","content":"&lt;/&gt; toolUtil.playerTools(player: Player ) → () Returns a read only array of all player tools - both equipped and unequipped.  ","version":null,"tagName":"h3"},{"title":"currentEquippedTool​","type":1,"pageTitle":"toolUtil","url":"/libraries/api/toolUtil#currentEquippedTool","content":"&lt;/&gt; toolUtil.currentEquippedTool(player: Player ) → () Returns the current equipped tool by the player.  ","version":null,"tagName":"h3"},{"title":"observePlayerForToolsEquippedAndUnequipped​","type":1,"pageTitle":"toolUtil","url":"/libraries/api/toolUtil#observePlayerForToolsEquippedAndUnequipped","content":"&lt;/&gt; toolUtil.observePlayerForToolsEquippedAndUnequipped( player: Player , observerForToolEquipped: ((toolEquipped: Tool ) → ())?, observerForToolUnequipped: ((toolUnequipped: Tool ) → ())? ) → () Observes the player for any new tools equipped or unequipped. Also captures all the initial tool equipped. toolUtil.observePlayerForEquippedTool(player, function(newToolEquipped) end, function(newToolUnequipped) end) WARNING This method will throw an error if both observerForToolEquipped and observerForToolUnequipped are not specified, at least any one of them must be specified.  ","version":null,"tagName":"h3"},{"title":"observePlayerBackpackForTools​","type":1,"pageTitle":"toolUtil","url":"/libraries/api/toolUtil#observePlayerBackpackForTools","content":"&lt;/&gt; toolUtil.observePlayerBackpackForTools( player: Player , observerForToolAdded: ((newToolAdded: Tool ) → ())?, observerForToolRemoved: ((newToolRemoved: Tool ) → ())? ) → () Observes the player's backpack for any new tools added or removed. Also captures all initial tools in the player backpack. toolUtil.observePlayerBackpackForTools(player, function(toolAdded) end, function(toolRemoved) end) WARNING This method will throw an error if both observerForToolAdded and observerForToolRemoved are not specified, at least any one of them must be specified.  ","version":null,"tagName":"h3"},{"title":"observePlayerForToolOwnership​","type":1,"pageTitle":"toolUtil","url":"/libraries/api/toolUtil#observePlayerForToolOwnership","content":"&lt;/&gt; toolUtil.observePlayerForToolOwnership( player: Player , observerForToolOwnershipGranted: ((newTool: Tool ) → ())?, observerForToolOwnershipRemoved: ((newTool: Tool ) → ())? ) → () Observes the player's backpack and character for any new tools added or removed. toolUtil.observePlayerForToolOwnership(player, function(toolOwnershipGranted) end, function(toolOwnershipRemoved) end) WARNING This method will throw an error if both observerForToolOwnershipGranted and observerForToolOwnershipRemoved are not specified, at least any one of them must be specified. ","version":null,"tagName":"h3"},{"title":"Timer","type":0,"sectionRef":"#","url":"/libraries/api/Timer","content":"","keywords":"","version":null},{"title":"Properties​","type":1,"pageTitle":"Timer","url":"/libraries/api/Timer#properties","content":" ","version":null,"tagName":"h2"},{"title":"onTicked​","type":1,"pageTitle":"Timer","url":"/libraries/api/Timer#onTicked","content":"&lt;/&gt; Timer.onTicked: Signal&lt;timerDelta: number&gt; The event which is fired every time the timer hits its interval. ","version":null,"tagName":"h3"},{"title":"Functions​","type":1,"pageTitle":"Timer","url":"/libraries/api/Timer#functions","content":" ","version":null,"tagName":"h2"},{"title":"new​","type":1,"pageTitle":"Timer","url":"/libraries/api/Timer#new","content":"&lt;/&gt; Timer.new(interval: number) → Timer Creates a new timer.  ","version":null,"tagName":"h3"},{"title":"is​","type":1,"pageTitle":"Timer","url":"/libraries/api/Timer#is","content":"&lt;/&gt; Timer.is(self: any) → boolean Returns true if the given object is a Timer.  ","version":null,"tagName":"h3"},{"title":"start​","type":1,"pageTitle":"Timer","url":"/libraries/api/Timer#start","content":"&lt;/&gt; Timer:start() → () Starts the timer. Will do nothing if the timer is already running. timer:Start()   ","version":null,"tagName":"h3"},{"title":"tickDelta​","type":1,"pageTitle":"Timer","url":"/libraries/api/Timer#tickDelta","content":"&lt;/&gt; Timer:tickDelta() → number Returns the timer tick delta. print(timer:tickDelta())   ","version":null,"tagName":"h3"},{"title":"ticked​","type":1,"pageTitle":"Timer","url":"/libraries/api/Timer#ticked","content":"&lt;/&gt; Timer:ticked() → boolean Returns a boolean indicating whether or not the timer ticked. Here's an alternative variant to just listening to [Timer.onTicked]: local timer = Timer.new(1) while true do if timer:ticked() then warn(&quot;we do something every 1~ second&quot;) end timer.onTicked:Wait() end   ","version":null,"tagName":"h3"},{"title":"startNow​","type":1,"pageTitle":"Timer","url":"/libraries/api/Timer#startNow","content":"&lt;/&gt; Timer:startNow() → () Starts the timer and fires off the Timer.onTicked signal immediately. Will do nothing if the timer is already running. timer:startNow()   ","version":null,"tagName":"h3"},{"title":"stop​","type":1,"pageTitle":"Timer","url":"/libraries/api/Timer#stop","content":"&lt;/&gt; Timer:stop() → () Stops the timer. Will do nothing if the timer is already stopped. timer:stop()   ","version":null,"tagName":"h3"},{"title":"interval​","type":1,"pageTitle":"Timer","url":"/libraries/api/Timer#interval","content":"&lt;/&gt; Timer:interval() → number Returns the timer's tick interval.  ","version":null,"tagName":"h3"},{"title":"running​","type":1,"pageTitle":"Timer","url":"/libraries/api/Timer#running","content":"&lt;/&gt; Timer:running() → boolean Returns true if the timer is currently running. if timer:running() then -- Do something end   ","version":null,"tagName":"h3"},{"title":"destroy​","type":1,"pageTitle":"Timer","url":"/libraries/api/Timer#destroy","content":"&lt;/&gt; Timer:destroy() → () Destroys the timer. This will also stop the timer. ","version":null,"tagName":"h3"},{"title":"ViewportModel","type":0,"sectionRef":"#","url":"/libraries/api/ViewportModel","content":"ViewportModel EgoMoose's viewport model class ported to wally.","keywords":"","version":null},{"title":"weldConstraintUtil","type":0,"sectionRef":"#","url":"/libraries/api/weldConstraintUtil","content":"","keywords":"","version":null},{"title":"Functions​","type":1,"pageTitle":"weldConstraintUtil","url":"/libraries/api/weldConstraintUtil#functions","content":" ","version":null,"tagName":"h2"},{"title":"weld​","type":1,"pageTitle":"weldConstraintUtil","url":"/libraries/api/weldConstraintUtil#weld","content":"&lt;/&gt; weldConstraintUtil.weld( basePart: BasePart , target: BasePart ) → () Welds the given basepart to the target basepart. ","version":null,"tagName":"h3"},{"title":"ValueMultiplier","type":0,"sectionRef":"#","url":"/libraries/api/ValueMultiplier","content":"","keywords":"","version":null},{"title":"Properties​","type":1,"pageTitle":"ValueMultiplier","url":"/libraries/api/ValueMultiplier#properties","content":" ","version":null,"tagName":"h2"},{"title":"DEFAULT_MULTIPLIER​","type":1,"pageTitle":"ValueMultiplier","url":"/libraries/api/ValueMultiplier#DEFAULT_MULTIPLIER","content":"Constant &lt;/&gt; ValueMultiplier.DEFAULT_MULTIPLIER: 1  Not Accessible Constant, not accesible within ValueMultiplier. ","version":null,"tagName":"h3"},{"title":"Functions​","type":1,"pageTitle":"ValueMultiplier","url":"/libraries/api/ValueMultiplier#functions","content":" ","version":null,"tagName":"h2"},{"title":"new​","type":1,"pageTitle":"ValueMultiplier","url":"/libraries/api/ValueMultiplier#new","content":"ValueMultiplier Instance &lt;/&gt; ValueMultiplier.new( identifier: any, value: number, baseValue: number?, multiplier: number? ) → ValueMultiplier Creates and returns a new value multiplier object. If multiplier is not specified, it'll default to ValueMultiplier.DEFAULT_MULTIPLIER. local valueMultiplier = ValueMultiplier.new(&quot;Test&quot;, 16, 16) print(valueMultiplier:updatedValue()) --&gt; 16 valueMultiplier:setMultiplier(2) print(valueMultiplier:updatedValue()) --&gt; 32 WARNING This method will throw an error if value is nil - it must be specified as a number.  ","version":null,"tagName":"h3"},{"title":"fromIdentifier​","type":1,"pageTitle":"ValueMultiplier","url":"/libraries/api/ValueMultiplier#fromIdentifier","content":"&lt;/&gt; ValueMultiplier.fromIdentifier(identifier: any) → ValueMultiplier? Returns the value multiplier object of identifier identifier, if there is any.  ","version":null,"tagName":"h3"},{"title":"fromIdentifierPromise​","type":1,"pageTitle":"ValueMultiplier","url":"/libraries/api/ValueMultiplier#fromIdentifierPromise","content":"&lt;/&gt; ValueMultiplier.fromIdentifierPromise(identifier: any) → Promise&lt;ValueMultiplier&gt; Promisified version of ValueMultiplier.fromIdentifier.  ","version":null,"tagName":"h3"},{"title":"observeForIdentifier​","type":1,"pageTitle":"ValueMultiplier","url":"/libraries/api/ValueMultiplier#observeForIdentifier","content":"ValueMultiplier Instance &lt;/&gt; ValueMultiplier.observeForIdentifier( identifier: any, observer: (newValueMultiplier: ValueMultiplier) → () ) → Connection Observes for a new value multiplier created under the given identifier. If one already exists, then observer will be called for it initially. local valueMultiplier = ValueMultiplier.new(&quot;test&quot;, 0) ValueMultiplier.observeForIdentifier(&quot;test&quot;, function(newValueMultiplier) print(newValueMultiplier:baseValue()) end) valueMultiplier:destroy() ValueMultiplier.new(&quot;test&quot;, 5) --&gt; 0 --&gt; 5   ","version":null,"tagName":"h3"},{"title":"updatedValue​","type":1,"pageTitle":"ValueMultiplier","url":"/libraries/api/ValueMultiplier#updatedValue","content":"ValueMultiplier Instance &lt;/&gt; ValueMultiplier:updatedValue() → number Returns the current value of the value multiplier adjusted based off of the multiplier and the base value. If no base value is set, then just the current value will be returned instead. local valueMultiplier = ValueMultiplier.new(player, 16) print(valueMultiplier.updatedValue()) --&gt; 16, as no base value is set valueMultiplier:setMultiplier(2) print(valueMultiplier.updatedValue()) --&gt; Still 16, as no base value is set valueMultiplier:setBaseValue(16) print(valueMultiplier:updatedValue()) --&gt; 32   ","version":null,"tagName":"h3"},{"title":"setValue​","type":1,"pageTitle":"ValueMultiplier","url":"/libraries/api/ValueMultiplier#setValue","content":"ValueMultiplier Instance &lt;/&gt; ValueMultiplier:setValue(newValue: number) → () Sets the value multiplier's value to newValue.  ","version":null,"tagName":"h3"},{"title":"setBaseValue​","type":1,"pageTitle":"ValueMultiplier","url":"/libraries/api/ValueMultiplier#setBaseValue","content":"ValueMultiplier Instance &lt;/&gt; ValueMultiplier:setBaseValue(baseValue: number) → () Sets the value multiplier's base value to baseValue.  ","version":null,"tagName":"h3"},{"title":"setMultiplier​","type":1,"pageTitle":"ValueMultiplier","url":"/libraries/api/ValueMultiplier#setMultiplier","content":"ValueMultiplier Instance &lt;/&gt; ValueMultiplier:setMultiplier(newMultiplier: number) → () Sets the value multiplier's multiplier to newMultiplier.  ","version":null,"tagName":"h3"},{"title":"multiplier​","type":1,"pageTitle":"ValueMultiplier","url":"/libraries/api/ValueMultiplier#multiplier","content":"ValueMultiplier Instance &lt;/&gt; ValueMultiplier:multiplier() → number Returns the multiplier set for the value multiplier.  ","version":null,"tagName":"h3"},{"title":"baseValue​","type":1,"pageTitle":"ValueMultiplier","url":"/libraries/api/ValueMultiplier#baseValue","content":"ValueMultiplier Instance &lt;/&gt; ValueMultiplier:baseValue() → number? Returns the base value of the value multiplier.  ","version":null,"tagName":"h3"},{"title":"destroy​","type":1,"pageTitle":"ValueMultiplier","url":"/libraries/api/ValueMultiplier#destroy","content":"ValueMultiplier Instance &lt;/&gt; ValueMultiplier:destroy() → () Destroys the value multiplier and renders it unusable. ","version":null,"tagName":"h3"},{"title":"viewportFrameUtil","type":0,"sectionRef":"#","url":"/libraries/api/viewportFrameUtil","content":"","keywords":"","version":null},{"title":"Functions​","type":1,"pageTitle":"viewportFrameUtil","url":"/libraries/api/viewportFrameUtil#functions","content":" ","version":null,"tagName":"h2"},{"title":"renderModel​","type":1,"pageTitle":"viewportFrameUtil","url":"/libraries/api/viewportFrameUtil#renderModel","content":"&lt;/&gt; viewportFrameUtil.renderModel( viewportFrame: ViewportFrame , model: Model , data: { cameraFieldOfView: number, rotationSpeed: number? }? ) → () Renders the given model in the viewport frame. Returns a trove. ","version":null,"tagName":"h3"},{"title":"ZonePlus","type":0,"sectionRef":"#","url":"/libraries/api/ZonePlus","content":"ZonePlus ZonePlus by 1ForeverHD, ported to wally.","keywords":"","version":null},{"title":"windLines","type":0,"sectionRef":"#","url":"/libraries/api/windLines","content":"","keywords":"","version":null},{"title":"Types​","type":1,"pageTitle":"windLines","url":"/libraries/api/windLines#types","content":" ","version":null,"tagName":"h2"},{"title":"WindLinesConfig​","type":1,"pageTitle":"windLines","url":"/libraries/api/windLines#WindLinesConfig","content":"&lt;/&gt; interface WindLinesConfig { lifetime: number?-- The life time of wind lines. direction: Vector3? -- The direction of wind lines. speed: number?-- The speed at which wind lines move. spawnRate: number?-- The rate at which wind lines are created. raycastParams: RaycastParams?-- A RaycastParams object, to be used in determining if the player is under a roof or not. } This is a config template, none of these members are required in the config table when configuring windLines through windLines.setConfig, however the config table must not be empty!  ","version":null,"tagName":"h3"},{"title":"DefaultWindLinesConfig​","type":1,"pageTitle":"windLines","url":"/libraries/api/windLines#DefaultWindLinesConfig","content":"&lt;/&gt; interface DefaultWindLinesConfig { lifetime: 3 direction: Vector3.new(1,0,0) speed: 6 spawnRate: 25 raycastParams: nil } This is the default config template that windLines initially uses. You can configure windLines through windLines.setConfig. ","version":null,"tagName":"h3"},{"title":"Properties​","type":1,"pageTitle":"windLines","url":"/libraries/api/windLines#properties","content":" ","version":null,"tagName":"h2"},{"title":"onEffectStarted​","type":1,"pageTitle":"windLines","url":"/libraries/api/windLines#onEffectStarted","content":"Signal Read only &lt;/&gt; windLines.onEffectStarted: Signal&lt;&gt; A signal which is fired whenever the wind lines effect starts.  ","version":null,"tagName":"h3"},{"title":"onEffectStopped​","type":1,"pageTitle":"windLines","url":"/libraries/api/windLines#onEffectStopped","content":"Signal Read only &lt;/&gt; windLines.onEffectStopped: Signal&lt;&gt; A signal which is fired whenever the wind lines effect stops. ","version":null,"tagName":"h3"},{"title":"Functions​","type":1,"pageTitle":"windLines","url":"/libraries/api/windLines#functions","content":" ","version":null,"tagName":"h2"},{"title":"effectStarted​","type":1,"pageTitle":"windLines","url":"/libraries/api/windLines#effectStarted","content":"&lt;/&gt; windLines.effectStarted() → boolean Returns a boolean indicating if the wind lines effect is started.  ","version":null,"tagName":"h3"},{"title":"started​","type":1,"pageTitle":"windLines","url":"/libraries/api/windLines#started","content":"&lt;/&gt; windLines.started() → boolean Returns a boolean indicating if windLines is started through windLines.start.  ","version":null,"tagName":"h3"},{"title":"setConfig​","type":1,"pageTitle":"windLines","url":"/libraries/api/windLines#setConfig","content":"&lt;/&gt; windLines.setConfig(newConfig: WindLinesConfig) → () Sets the current config of windLines to newConfig, so that this new config will be used for wind line effects.  ","version":null,"tagName":"h3"},{"title":"start​","type":1,"pageTitle":"windLines","url":"/libraries/api/windLines#start","content":"&lt;/&gt; windLines.start() → () Starts up the wind lines effect. Custom behavior If the player is standing under a roof, then the wind lines effect will be stopped for realism purposes and this behavior cannot be toggled. However, you can adjust this behavior through windLines.setConfig through the RaycastParams member, since ray casting is used in determining if the player is standing under a roof. For e.g, the following config does not consider descendants in the filteredPartsFolder folder as roofs, so if a player stands under them, the wind lines effect will not be stopped: local Workspace = game:GetService(&quot;Workspace&quot;) local filteredPartsFolder = Workspace.SomeFolder local raycastParams = RaycastParams.new() raycastParams.FilterDescendantsInstances = {filteredPartsFolder} windLines.setConfig({raycastParams = raycastParams}) windLines.start()   ","version":null,"tagName":"h3"},{"title":"stop​","type":1,"pageTitle":"windLines","url":"/libraries/api/windLines#stop","content":"&lt;/&gt; windLines.stop() → () Stops the wind lines effect. ","version":null,"tagName":"h3"},{"title":"Installation","type":0,"sectionRef":"#","url":"/libraries/docs/intro","content":"","keywords":"","version":"Next"},{"title":"Wally Setup​","type":1,"pageTitle":"Installation","url":"/libraries/docs/intro#wally-setup","content":" Install Wally and once it is installed, run wally init on your project directory, and then add the various open-sourced libraries that you need as wally dependencies. For e.g, the following may be a wally.toml file for a project that includes a numberUtil wally package:  [package] name = &quot;someuser/project&quot; version = &quot;1.0.0&quot; registry = &quot;https://github.com/UpliftGames/wally-index&quot; realm = &quot;shared&quot; [dependencies] numberUtil = &quot;bubshurb/numberutil@3&quot;   Now, to install these dependencies, run wally install within your project. Wally will then create a package folder in your directory with the installed dependencies. Then use Rojo to sync in the package folder to Studio.  ","version":"Next","tagName":"h2"},{"title":"Usage Example​","type":1,"pageTitle":"Installation","url":"/libraries/docs/intro#usage-example","content":" Once the above necessary steps are completed, the installed wally dependencies can now be used in code, for e.g:  local ReplicatedStorage = game:GetService(&quot;ReplicatedStorage&quot;) local numberUtil = require(ReplicatedStorage.Packages.numberUtil) print(numberUtil.factors(2)) --&gt; {1, 2}  ","version":"Next","tagName":"h2"}],"options":{"id":"default"}}