"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[4208],{78877:e=>{e.exports=JSON.parse('{"functions":[{"name":"all","desc":"Returns an array of all descendants in `instanceTree` which have the\\n`desiredAttribute` attribute.","params":[{"name":"instanceTree","desc":"","lua_type":"Instance"},{"name":"desiredAttribute","desc":"","lua_type":"string"}],"returns":[],"function_type":"static","source":{"line":15,"path":"src/instanceAttributeUtil/init.luau"}},{"name":"new","desc":"Sets up an event connection which listens to any descendant added to `instanceTree`, if it has the\\n`desiredAttribute` atribute, then `callback` will be called.\\n\\n```lua\\ninstanceAttributeUtil.new(workspace, \\"Test\\", function(instance)\\n\\tprint(instance)\\nend)\\n```","params":[{"name":"instanceTree","desc":"","lua_type":"Instance"},{"name":"desiredAttribute","desc":"","lua_type":"string"},{"name":"callback","desc":"","lua_type":"(descendant: Instance) -> ()\\n"}],"returns":[],"function_type":"static","source":{"line":38,"path":"src/instanceAttributeUtil/init.luau"}},{"name":"removed","desc":"Sets up an event connection which listens to any descendant removed from `instanceTree`, if it has the\\n`desiredAttribute` atribute, then `callback` will be called.\\n\\n```lua\\ninstanceAttributeUtil.removed(workspace, \\"Test\\", function(instance)\\n\\tprint(instance)\\nend)\\n```","params":[{"name":"instanceTree","desc":"","lua_type":"Instance"},{"name":"desiredAttribute","desc":"","lua_type":"string"},{"name":"callback","desc":"","lua_type":"(descendant: Instance) -> ()\\n"}],"returns":[],"function_type":"static","source":{"line":61,"path":"src/instanceAttributeUtil/init.luau"}},{"name":"observe","desc":"Observes the value of attribute `desiredAttribute` in `instance`, so `callback` is called\\nevery time the attribute updates.\\n\\n```lua\\ninstanceAttributeUtil.observe(workspace, \\"Some\\", function(attributeValue)\\n\\tprint(instance)\\nend)\\n```","params":[{"name":"instance","desc":"","lua_type":"Instance"},{"name":"desiredAttribute","desc":"","lua_type":"string"},{"name":"callback","desc":"","lua_type":"(attributeValue: any) -> ()\\n"}],"returns":[],"function_type":"static","source":{"line":84,"path":"src/instanceAttributeUtil/init.luau"}},{"name":"instanceAttributePromise","desc":"Returns a promise which is resolved when the given instance has the given attribute.\\n\\n```lua\\ninstanceAttributeUtil.instanceAttributePromise(instance, \\"SomeAttribute\\"):andThen(function(value)\\n\\tprint(value) --\x3e 5\\nend)\\n\\ninstance:SetAttribute(\\"SomeAttribute\\", 5)\\n```\\n\\n`predicate` can also be passed, which should return a boolean value. It is passed\\nthe new attribute value of the instance, and the old attribute value of the instance. The promise\\nwill only resolve when `predicate` returns `true` for the new attribute value of the instance.\\n\\n```lua\\ninstanceAttributeUtil.instanceAttributePromise(instance, \\"SomeAttribute\\", function(newValue, oldValue)\\n\\treturn newValue == 2 and oldValue == 1\\nend):andThen(function(value)\\n\\tprint(value) --\x3e 2\\nend)\\n\\ninstance:SetAttribute(\\"SomeAttribute\\", 1)\\ninstance:SetAttribute(\\"SomeAttribute\\", 2)\\n```","params":[{"name":"instance","desc":"","lua_type":"Instance"},{"name":"attribute","desc":"","lua_type":"string"},{"name":"predicate","desc":"","lua_type":"((\\n\\t\\tnewValue: any,\\n\\t\\toldValue: any\\n\\t) -> boolean)?\\n"}],"returns":[],"function_type":"static","source":{"line":126,"path":"src/instanceAttributeUtil/init.luau"}}],"properties":[],"types":[],"name":"instanceAttributeUtil","desc":"A utility module for working with instance attributes.","source":{"line":8,"path":"src/instanceAttributeUtil/init.luau"}}')}}]);