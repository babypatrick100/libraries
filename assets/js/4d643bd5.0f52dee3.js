"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[6727],{60073:e=>{e.exports=JSON.parse('{"functions":[{"name":"all","desc":"Returns a read only array of all descendants in `instanceTree` which have the\\n`desiredAttribute` attribute.","params":[{"name":"instanceTree","desc":"","lua_type":"Instance"},{"name":"desiredAttribute","desc":"","lua_type":"string"}],"returns":[{"desc":"","lua_type":"{ Instance }\\n"}],"function_type":"static","source":{"line":15,"path":"src/instanceAttributeUtil/init.luau"}},{"name":"observeMany","desc":"Works similar to [instanceAttributeUtil.observe], but observes an array of \\nattributes instead of a single attribute. \\n\\n```lua\\ninstanceAttributeUtil.observeMany(workspace, {\\"Number1\\", \\"Number2\\"}, function(newAttributes, oldAttributes)\\n\\tprint(newAttributes.Number1 + newAttributes.Number2)\\nend)\\n```","params":[{"name":"instance","desc":"","lua_type":"Instance"},{"name":"attributesToObserve","desc":"","lua_type":"{ string }"},{"name":"observer","desc":"","lua_type":"(\\n\\t\\tnewAttributes: { [string]: any },\\n\\t\\toldAttributeValue: { [string]: any }?\\n\\t) -> ()\\n"}],"returns":[{"desc":"","lua_type":"RBXScriptConnection\\n"}],"function_type":"static","source":{"line":38,"path":"src/instanceAttributeUtil/init.luau"}},{"name":"new","desc":"Sets up an event connection which listens to any descendant added to `instanceTree`, if it has the\\n`desiredAttribute` atribute, then `callback` will be called. \\n\\nThis method will also capture initial descendants of the given `instanceTree` as well.\\n\\n```lua\\ninstanceAttributeUtil.new(workspace, \\"Test\\", function(instance)\\n\\tprint(instance)\\nend)\\n```","params":[{"name":"instanceTree","desc":"","lua_type":"Instance"},{"name":"desiredAttribute","desc":"","lua_type":"string"},{"name":"callback","desc":"","lua_type":"(descendant: Instance) -> ()\\n"}],"returns":[{"desc":"","lua_type":"RBXScriptConnection\\n"}],"function_type":"static","source":{"line":90,"path":"src/instanceAttributeUtil/init.luau"}},{"name":"removed","desc":"Sets up an event connection which listens to any descendant removed from `instanceTree`, if it has the\\n`desiredAttribute` atribute, then `callback` will be called. Returns a [RBXScriptConnection](https://create.roblox.com/docs/reference/engine/datatypes/RBXScriptConnection) object.\\n\\n```lua\\ninstanceAttributeUtil.removed(workspace, \\"Test\\", function(instance)\\n\\tprint(instance)\\nend)\\n```","params":[{"name":"instanceTree","desc":"","lua_type":"Instance"},{"name":"desiredAttribute","desc":"","lua_type":"string"},{"name":"callback","desc":"","lua_type":"(descendant: Instance) -> ()\\n"}],"returns":[{"desc":"","lua_type":"RBXScriptConnection\\n"}],"function_type":"static","source":{"line":119,"path":"src/instanceAttributeUtil/init.luau"}},{"name":"observe","desc":"Observes the value of attribute `desiredAttribute` in `instance`, so `observer` is called\\nevery time the attribute updates. Returns a [RBXScriptConnection](https://create.roblox.com/docs/reference/engine/datatypes/RBXScriptConnection) object, \\nas well a promise that is resolved when `observer` is called for the first time and has finished running.\\n\\n```lua\\ninstanceAttributeUtil.observe(workspace, \\"SomeAttribute\\", function(newValue, oldValue)\\n\\t...\\nend)\\n```","params":[{"name":"instance","desc":"","lua_type":"Instance"},{"name":"desiredAttribute","desc":"","lua_type":"string"},{"name":"observer","desc":"","lua_type":"(newAttributeValue: any, oldAttributeValue: any) -> ()\\n"}],"returns":[{"desc":"","lua_type":"RBXScriptConnection, Promise<>"}],"function_type":"static","source":{"line":145,"path":"src/instanceAttributeUtil/init.luau"}},{"name":"instanceAttributePromise","desc":"Returns a promise which is resolved when the given instance has the given attribute.\\n\\n```lua\\ninstanceAttributeUtil.instanceAttributePromise(instance, \\"SomeAttribute\\"):andThen(function(value)\\n\\tprint(value) --\x3e 5\\nend)\\n\\ninstance:SetAttribute(\\"SomeAttribute\\", 5)\\n```\\n\\n`predicate` can also be passed, which should return a boolean value. It is passed\\nthe new attribute value of the instance, and the old attribute value of the instance. The promise\\nwill only resolve when `predicate` returns `true` for the new attribute value of the instance.\\n\\nThe returned promise will be cancelled if `instance` is destroyed.\\n\\n```lua\\ninstanceAttributeUtil.instanceAttributePromise(instance, \\"SomeAttribute\\", function(newValue, oldValue)\\n\\treturn newValue == 2 and oldValue == 1\\nend):andThen(function(value)\\n\\tprint(value) --\x3e 2\\nend)\\n\\ninstance:SetAttribute(\\"SomeAttribute\\", 1)\\ninstance:SetAttribute(\\"SomeAttribute\\", 2)\\n```","params":[{"name":"instance","desc":"","lua_type":"Instance"},{"name":"attribute","desc":"","lua_type":"string"},{"name":"predicate","desc":"","lua_type":"((\\n\\t\\tnewValue: any,\\n\\t\\toldValue: any\\n\\t) -> boolean)?\\n"}],"returns":[{"desc":"","lua_type":"Promise<value: any>"}],"function_type":"static","source":{"line":198,"path":"src/instanceAttributeUtil/init.luau"}},{"name":"instanceAttributesPromise","desc":"Calls [instanceAttributeUtil.instanceAttributePromise] for every attribute in `attributes`, and saves\\nthe promise internally. Returns a promise that is reolved once all internal promises have been resolved.","params":[{"name":"instance","desc":"","lua_type":"Instance"},{"name":"attributes","desc":"","lua_type":"{ string }"}],"returns":[{"desc":"","lua_type":"Promise<>"}],"function_type":"static","source":{"line":243,"path":"src/instanceAttributeUtil/init.luau"}},{"name":"setInstanceAttributes","desc":"Sets the attributes of `instance` from the `attributes` table.\\n\\n```lua\\ninstanceAttributeUtil.setInstanceAttributes(workspace.Baseplate, {IsMayoSauce = true})\\nprint(workspace.Baseplate:GetAttribute(\\"IsMayoSauce\\")) --\x3e true\\n```","params":[{"name":"instance","desc":"","lua_type":"Instance"},{"name":"attributes","desc":"","lua_type":"{ [string]: any }\\n"}],"returns":[],"function_type":"static","source":{"line":265,"path":"src/instanceAttributeUtil/init.luau"}}],"properties":[],"types":[],"name":"instanceAttributeUtil","desc":"A utility module for working with instance attributes.","source":{"line":6,"path":"src/instanceAttributeUtil/init.luau"}}')}}]);