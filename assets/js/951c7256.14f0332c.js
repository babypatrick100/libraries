"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[668],{45272:e=>{e.exports=JSON.parse('{"functions":[{"name":"serialize","desc":"Serializes the given vale, if it can be serialized. If it can\'t be serialized, then the value it self is returned.\\n\\n```lua\\nlocal serializedValue = serializerUtil.serializer(150)\\nprint(serializedValue) --\x3e 150 (can\'t serialize a number!)\\nlocal serializedValue = serializerUtil.serializer(CFrame.new(5,5,5))\\nprint(serializedValue) --\x3e {...} (serialized data)\\n```","params":[{"name":"value","desc":"","lua_type":"any"}],"returns":[],"function_type":"static","source":{"line":96,"path":"src/serializerUtil/init.luau"}},{"name":"deserialize","desc":"Deserializes the given serialized value, if it can be deserialized. If it can\'t be deserialized, then the value\\nit self is returned.\\n\\n```lua\\nlocal serializedValue = serializerUtil.serializer(CFrame.new(5,5,5))\\nprint(serializerUtil.deserialize(serializedValue)) --\x3e CFrame (5,5,5) \\nprint(serializerUtil.deserialize(15)) --\x3e 15 (Can\'t deserialize a non-serialized value)\\n```","params":[{"name":"serializedData","desc":"","lua_type":"any"}],"returns":[],"function_type":"static","source":{"line":123,"path":"src/serializerUtil/init.luau"}},{"name":"addClassDataType","desc":"Adds a class data type to the serializer. A class data type (in the context of this utility) is simply\\nan object which you can use to add your own custom serializers and deserializers.\\n\\n```lua\\n-- In this project X, we have a funny which we would like to serialize\\n-- and deserialize according to how our game is structured;\\nlocal someUniqueTable = {\\n\\t[serializerUtil.customValueType] = \\"TheUniqueTable\\"\\n}\\n\\nserializerUtil.addClassDataType({\\n\\tvalueType = \\"TheUniqueTable\\",\\n\\tserializer = {\\n\\t\\trun = function(uniqueTable, intermediateSerializedData)\\n\\t\\t\\tintermediateSerializedData.component = {1, 2, 3, 4, 5, 6}\\n\\t\\tend,\\n\\t},\\n\\tdeserializer = {\\n\\t\\trun = function(serializedUniqueTable)\\n\\t\\t\\treturn serializedUniqueTable.component\\n\\t\\tend,\\n\\t},\\n})\\n\\nlocal serializedTable = serializerUtil.serialize(someUniqueTable)\\nprint(serializerUtil.deserialize(serializedTable)) --\x3e {1, 2, 3, 4, 5, 6}\\n```\\n\\n:::tip Override default data types\\nCurrently this utility supports a lot of data types to serialize and serialize - however\\nyou can override them too with your own serializers and deserializers for them, for e.g:\\n\\n```lua\\n-- Let\'s just override the serializer and deserializer for the `Vector3` data type\\n-- in favour of our own:\\nserializerUtil.addClassDataType({\\n\\tvalueType = \\"Vector3\\",\\n\\tserializer = {\\n\\t\\trun = function(vector3, intermediateSerializedData)\\n\\t\\t\\tintermediateSerializedData.components = {vector3.X, vector3.Y, vector3.Z}\\n\\t\\tend,\\n\\t},\\n\\tdeserializer = {\\n\\t\\trun = function(serializedVector3)\\n\\t\\t\\treturn Vector3.new(table.unpack(serializedVector3.components))\\n\\t\\tend,\\n\\t},\\n})\\n```\\n\\nThis gives you flexibility to append your own serializer and deserializer for specific data types\\nas per your game\'s need!\\n:::","params":[{"name":"classDataType","desc":"","lua_type":"ClassDataType"}],"returns":[],"function_type":"static","source":{"line":195,"path":"src/serializerUtil/init.luau"}},{"name":"addClassDataTypes","desc":"Shorthand for adding multiple class data types in 1 go. [serializerUtil.addClass] is called\\nfor every class data type in `classDataTypes`.\\n\\n```lua\\nlocal classDataTypes = {\\n\\t{\\n\\t\\tvalueType = \\"Vector3\\",\\n\\t\\tserializer = {\\n\\t\\t\\trun = function(vector3, intermediateSerializedData)\\n\\t\\t\\t\\tintermediateSerializedData.components = {vector3.X, vector3.Y, vector.Z}\\n\\t\\t\\tend,\\n\\t\\t},\\n\\t\\tdeserializer = {\\n\\t\\t\\trun = function(serializedVector3)\\n\\t\\t\\t\\treturn Vector3.new(table.unpack(serializedVector3.components))\\n\\t\\t\\tend,\\n\\t\\t},\\n\\t},\\n\\n\\t{\\n\\t\\tvalueType = \\"Vector2\\",\\n\\t\\tserializer = {\\n\\t\\t\\trun = function(vector2, intermediateSerializedData)\\n\\t\\t\\t\\tintermediateSerializedData.components = {vector2.X, vector2.Y}\\n\\t\\t\\tend,\\n\\t\\t},\\n\\t\\tdeserializer = {\\n\\t\\t\\trun = function(serializedVector2)\\n\\t\\t\\t\\treturn Vector2.new(table.unpack(serializedVector2.components))\\n\\t\\t\\tend,\\n\\t\\t},\\n\\t}\\n}\\n\\nserializerUtil.addClassDataTypes(classDataTypes)\\n```","params":[{"name":"classDataTypes","desc":"","lua_type":"{ ClassDataType }"}],"returns":[],"function_type":"static","source":{"line":245,"path":"src/serializerUtil/init.luau"}},{"name":"serializeTableDeep","desc":"Deep serializes all keys and values in the given table via [serializerUtil.serialize].\\n\\n```lua\\nlocal tabl = {bo = Enum.Keycode.A}\\nlocal serializedTable = serializerUtil.serializeTableDeep(tabl)\\nprint(serializedTable) --\x3e {bo: {...}} (serialized)\\n```","params":[{"name":"deserializedTable","desc":"","lua_type":"{ [any]: any }"}],"returns":[],"function_type":"static","source":{"line":261,"path":"src/serializerUtil/init.luau"}},{"name":"deserializeTableDeep","desc":"Deep - deserializes all keys and values in the given table via [serializerUtil.deserialize].\\n\\n```lua\\nlocal tabl = {bo = Enum.Keycode.A}\\nlocal serializedTable = serializerUtil.serializeTableDeep(tabl)\\nprint(serializerUtil.deserializeTableDeep(serializedTable)) --\x3e {bo: Enum.Keycode.A} (deserialized)\\n```","params":[{"name":"serializedTable","desc":"","lua_type":"{ [any]: any }"}],"returns":[],"function_type":"static","source":{"line":297,"path":"src/serializerUtil/init.luau"}}],"properties":[{"name":"customValueType","desc":" \\n\\nA constant to be used as a key in tables, to represent some type which this utility\\ncan easily know about when serializing and deserializing values.\\n\\n```lua\\nlocal spmeTable = {\\n\\t-- Allow the serializer utility module to know the \\"type\\" of this table\\n\\t[serializerUtil.customValueType] = \\"uniqueType\\"\\n}\\n```","lua_type":"\\"serDesCustomValueType\\"","source":{"line":58,"path":"src/serializerUtil/init.luau"}}],"types":[{"name":"ClassDataType","desc":" ","lua_type":"{valueType: any, serializer: (value: any, intermediateSerializedData: {}) -> (), deserializer: (serializedData: {}) -> (),}","source":{"line":43,"path":"src/serializerUtil/init.luau"}}],"name":"serializerUtil","desc":"A very simple utility for serializing and deserializing data types.\\n\\n:::note This utility supports the following data types: \\n- CFrame\\n- Vector3\\n- Vector2\\n- BrickColor\\n- Color3\\n- Enum\\n- EnumItem\\n- Axes\\n- CatalogSearchParams\\n- ColorSequence\\n- ColorSequenceKeypoint\\n- NumberSequence\\n- NumberSequenceKeypoint\\n- Faces\\n- Axes\\n- NumberRange\\n- PathWaypoint\\n- Region3\\n- Region3init16\\n- TweenInfo\\n- UDim\\n- UDim2\\n- Vector3int16\\n- Vector2int16\\n- Region3int16\\n- Font\\n- Rect\\n- DateTime\\n- PhysicalProperties\\n:::","source":{"line":38,"path":"src/serializerUtil/init.luau"}}')}}]);