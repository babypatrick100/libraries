"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[6360],{52523:e=>{e.exports=JSON.parse('{"functions":[{"name":"throttle","desc":"Accepts a duration `seconds`, and returns true if it has been that long since the last time this function returned `true`. Always returns `false` \\nthe first time it is called. \\n\\nThis method returns unique results keyed by script and line number, however you also can pass in some unique value as the\\n`descriminator` if you want the method to return unique results keyed by that instead of script and line number.\\n\\n```lua\\nRunService.Heartbeat:Connect(function()\\n    if throttleUtil.throttle(1) then\\n        print(\\"Every second, something happens (during a.. heartbeat!)\\")\\n    end\\nend)\\n```\\n\\nAdditionally, a second value i.e `totalDelta` is returned which is basically how much time has passed\\never **since the last throttle.**\\n\\n```lua\\nRunService.Heartbeat:Connect(function()\\n    local throttle, totalDelta = throttleUtil.throttle(1)\\n    if throttle then\\n        print(\\"Time elapsed since last throttle: \\", totalDelta) \\n    end\\nend)\\n\\n--\x3e Time elapsed since last throttle:  1.0079841441474855\\n--\x3e Time elapsed since last throttle:  1.0000211205333471\\n--\x3e Time elapsed since last throttle:  1.004997929558158\\n```\\n\\n:::note\\nThrottle data keyed by script and line (or script and descriminator, if `descriminator` is passed) will be cleared out if it has been\\nmore than `1` seconds since the last `throttleUtil.throttle` call.\\n:::","params":[{"name":"seconds","desc":"","lua_type":"number"},{"name":"descriminator","desc":"","lua_type":"any"}],"returns":[{"desc":"","lua_type":"boolean"},{"desc":"","lua_type":"number"}],"function_type":"static","source":{"line":60,"path":"src/throttleUtil/init.luau"}},{"name":"setThrottle","desc":"Sets the throttle keyed by `descriminator`, to `seconds`. This method is only usually useful in cases\\nwhere you want to reset throttles.\\n\\nFor e.g:\\n\\n```lua\\nlocal descriminator = \\"LastInputTypeThrottle\\"\\n\\nRunService.RenderStepped:Connect(function()\\n    if UserInputService:GetLastInputType() == Enum.UserInputType.MouseButton1 then\\n        if throttleUtil.throttle(2, descriminator) then\\n            print(\\"GetLastInputType has been Enum.UserInputType.MouseButton1 for 2 seconds now\\")\\n        end\\n    else\\n        throttleUtil.setThrottle(descriminator, 0)\\n    end \\nend)\\n``` ","params":[{"name":"descriminator","desc":"","lua_type":"number"},{"name":"seconds","desc":"","lua_type":"number"}],"returns":[],"function_type":"static","source":{"line":127,"path":"src/throttleUtil/init.luau"}}],"properties":[],"types":[],"name":"throttleUtil","desc":" \\n\\nA simple utility module which implements a somewhat similar functionality of [Matter.useThrottle](https://eryn.io/matter/api/Matter#useThrottle),\\nhowever this small utility module allows you to use this functionality outside of Matter in a similar fashion!\\n \\n```lua\\nRunService.Heartbeat:Connect(function()\\n    if throttleUtil.useThrottle(2) then\\n        warn(\\"Every 2 seconds, something happens..\\")\\n    end\\nend)\\n```","source":{"line":17,"path":"src/throttleUtil/init.luau"}}')}}]);